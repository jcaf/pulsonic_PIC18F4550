

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Tue Jul  9 03:43:41 2019

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og9 
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    12                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    14                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    15                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    16                           	psect	text0,global,reloc=2,class=CODE,delta=1
    17                           	psect	text1,global,reloc=2,class=CODE,delta=1
    18                           	psect	text2,global,reloc=2,class=CODE,delta=1
    19                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=1
    20                           	psect	text4,global,reloc=2,class=CODE,delta=1
    21                           	psect	text5,global,reloc=2,class=CODE,delta=1
    22                           	psect	text6,global,reloc=2,class=CODE,delta=1
    23                           	psect	text7,global,reloc=2,class=CODE,delta=1
    24                           	psect	text8,global,reloc=2,class=CODE,delta=1
    25                           	psect	text9,global,reloc=2,class=CODE,delta=1
    26                           	psect	text10,global,reloc=2,class=CODE,delta=1,keep,inline
    27                           	psect	text11,global,reloc=2,class=CODE,delta=1,keep,inline
    28                           	psect	text12,global,reloc=2,class=CODE,delta=1,keep,inline
    29                           	psect	text13,global,reloc=2,class=CODE,delta=1,keep,inline
    30                           	psect	text14,global,reloc=2,class=CODE,delta=1,keep,inline
    31                           	psect	text15,global,reloc=2,class=CODE,delta=1
    32                           	psect	text16,global,reloc=2,class=CODE,delta=1
    33                           	psect	text17,global,reloc=2,class=CODE,delta=1,group=1
    34                           	psect	text18,global,reloc=2,class=CODE,delta=1
    35                           	psect	text19,global,reloc=2,class=CODE,delta=1
    36                           	psect	text20,global,reloc=2,class=CODE,delta=1
    37                           	psect	text21,global,reloc=2,class=CODE,delta=1
    38                           	psect	text22,global,reloc=2,class=CODE,delta=1
    39                           	psect	text23,global,reloc=2,class=CODE,delta=1
    40                           	psect	text24,global,reloc=2,class=CODE,delta=1
    41                           	psect	text25,global,reloc=2,class=CODE,delta=1,keep,inline
    42                           	psect	text26,global,reloc=2,class=CODE,delta=1,keep,inline
    43                           	psect	text27,global,reloc=2,class=CODE,delta=1,keep,inline
    44                           	psect	text28,global,reloc=2,class=CODE,delta=1,keep,inline
    45                           	psect	text29,global,reloc=2,class=CODE,delta=1,keep,inline
    46                           	psect	text30,global,reloc=2,class=CODE,delta=1,keep,inline
    47                           	psect	text31,global,reloc=2,class=CODE,delta=1,keep,inline
    48                           	psect	text32,global,reloc=2,class=CODE,delta=1,keep,inline
    49                           	psect	text33,global,reloc=2,class=CODE,delta=1,keep,inline
    50                           	psect	text34,global,reloc=2,class=CODE,delta=1,keep,inline
    51                           	psect	text35,global,reloc=2,class=CODE,delta=1
    52                           	psect	text36,global,reloc=2,class=CODE,delta=1,group=2
    53                           	psect	text37,global,reloc=2,class=CODE,delta=1,group=2
    54                           	psect	text38,global,reloc=2,class=CODE,delta=1,group=1
    55                           	psect	text39,global,reloc=2,class=CODE,delta=1,group=1
    56                           	psect	text40,global,reloc=2,class=CODE,delta=1,group=1
    57                           	psect	text41,global,reloc=2,class=CODE,delta=1,group=1
    58                           	psect	text42,global,reloc=2,class=CODE,delta=1,group=1
    59                           	psect	text43,global,reloc=2,class=CODE,delta=1,group=1
    60                           	psect	text44,global,reloc=2,class=CODE,delta=1,group=1
    61                           	psect	text45,global,reloc=2,class=CODE,delta=1,group=1
    62                           	psect	text46,global,reloc=2,class=CODE,delta=1,group=1
    63                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    64                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    65                           	psect	text48,global,reloc=2,class=CODE,delta=1
    66                           	psect	text49,global,reloc=2,class=CODE,delta=1
    67                           	psect	text50,global,reloc=2,class=CODE,delta=1
    68                           	psect	text51,global,reloc=2,class=CODE,delta=1
    69                           	psect	text52,global,reloc=2,class=CODE,delta=1
    70                           	psect	text53,global,reloc=2,class=CODE,delta=1
    71                           	psect	text54,global,reloc=2,class=CODE,delta=1
    72                           	psect	text55,global,reloc=2,class=CODE,delta=1
    73                           	psect	text56,global,reloc=2,class=CODE,delta=1,keep,inline
    74                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    75                           	psect	text57,global,reloc=2,class=CODE,delta=1,keep,inline
    76                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    77                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    78  0000                     
    79                           ; Version 2.05
    80                           ; Generated 20/12/2018 GMT
    81                           ; 
    82                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    83                           ; All rights reserved.
    84                           ; 
    85                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    86                           ; 
    87                           ; Redistribution and use in source and binary forms, with or without modification, are
    88                           ; permitted provided that the following conditions are met:
    89                           ; 
    90                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    91                           ;        conditions and the following disclaimer.
    92                           ; 
    93                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    94                           ;        of conditions and the following disclaimer in the documentation and/or other
    95                           ;        materials provided with the distribution.
    96                           ; 
    97                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    98                           ;        software without specific prior written permission.
    99                           ; 
   100                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   101                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   102                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   103                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   104                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   105                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   106                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   107                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   108                           ; 
   109                           ; 
   110                           ; Code-generator required, PIC18F4550 Definitions
   111                           ; 
   112                           ; SFR Addresses
   113  0000                     
   114                           	psect	idataCOMRAM
   115  002044                     __pidataCOMRAM:
   116                           	opt callstack 0
   117                           
   118                           ;initializer for mpap_test@k
   119  002044  0A                 	db	10
   120                           
   121                           ;initializer for mpap_do1step@i
   122  002045  FF                 	db	255
   123                           
   124                           	psect	idataBANK0
   125  001F56                     __pidataBANK0:
   126                           	opt callstack 0
   127                           
   128                           ;initializer for _multiplexedDisp
   129  001F56  3C                 	db	low _multiplexedDisp0_off
   130  001F57  20                 	db	high _multiplexedDisp0_off
   131  001F58  38                 	db	low _multiplexedDisp0_on
   132  001F59  20                 	db	high _multiplexedDisp0_on
   133  001F5A  34                 	db	low _multiplexedDisp1_off
   134  001F5B  20                 	db	high _multiplexedDisp1_off
   135  001F5C  30                 	db	low _multiplexedDisp1_on
   136  001F5D  20                 	db	high _multiplexedDisp1_on
   137  001F5E  2C                 	db	low _multiplexedDisp2_off
   138  001F5F  20                 	db	high _multiplexedDisp2_off
   139  001F60  28                 	db	low _multiplexedDisp2_on
   140  001F61  20                 	db	high _multiplexedDisp2_on
   141  001F62  24                 	db	low _multiplexedDisp3_off
   142  001F63  20                 	db	high _multiplexedDisp3_off
   143  001F64  20                 	db	low _multiplexedDisp3_on
   144  001F65  20                 	db	high _multiplexedDisp3_on
   145  001F66  1C                 	db	low _multiplexedDisp4_off
   146  001F67  20                 	db	high _multiplexedDisp4_off
   147  001F68  40                 	db	low _multiplexedDisp4_on
   148  001F69  20                 	db	high _multiplexedDisp4_on
   149                           
   150                           ;initializer for _mpap_step
   151  001F6A  10                 	db	low __mpap_step1
   152  001F6B  20                 	db	high __mpap_step1
   153  001F6C  0A                 	db	low __mpap_step2
   154  001F6D  20                 	db	high __mpap_step2
   155  001F6E  04                 	db	low __mpap_step3
   156  001F6F  20                 	db	high __mpap_step3
   157  001F70  16                 	db	low __mpap_step4
   158  001F71  20                 	db	high __mpap_step4
   159                           
   160                           ;initializer for _mpap_off
   161  001F72  DE                 	db	low __mpap_off
   162  001F73  1F                 	db	high __mpap_off
   163                           
   164                           	psect	smallconst
   165  000800                     __psmallconst:
   166                           	opt callstack 0
   167  000800  00                 	db	0
   168  000801                     _DISP7S_NUMS:
   169                           	opt callstack 0
   170  000801  3F                 	db	63
   171  000802  06                 	db	6
   172  000803  5B                 	db	91
   173  000804  4F                 	db	79
   174  000805  66                 	db	102
   175  000806  6D                 	db	109
   176  000807  7C                 	db	124
   177  000808  07                 	db	7
   178  000809  7F                 	db	127
   179  00080A  67                 	db	103
   180  00080B                     __end_of_DISP7S_NUMS:
   181                           	opt callstack 0
   182  00080B                     _DISP7S_CHARS:
   183                           	opt callstack 0
   184  00080B  00                 	db	0
   185  00080C  40                 	db	64
   186  00080D                     __end_of_DISP7S_CHARS:
   187                           	opt callstack 0
   188  0000                     _PORTE	set	3972
   189  0000                     _TRISB	set	3987
   190  0000                     _TRISA	set	3986
   191  0000                     _PORTD	set	3971
   192  0000                     _PORTC	set	3970
   193  0000                     _TRISC	set	3988
   194  0000                     _TRISD	set	3989
   195  0000                     _TRISE	set	3990
   196  0000                     _TMR0L	set	4054
   197  0000                     _TMR0H	set	4055
   198  0000                     _T0CON	set	4053
   199  0000                     _UCFG	set	3951
   200  0000                     _UCON	set	3949
   201  0000                     _CMCON	set	4020
   202  0000                     _ADCON1	set	4033
   203  0000                     _LATB	set	3978
   204  0000                     _LATE	set	3981
   205  0000                     _LATD	set	3980
   206  0000                     _LATC	set	3979
   207  0000                     _LATA	set	3977
   208  0000                     _TMR0IF	set	32658
   209  0000                     _GIE	set	32663
   210  0000                     _TMR0IE	set	32661
   211                           
   212                           ; #config settings
   213  00080D  00                 	db	0	; dummy byte at the end
   214  0000                     
   215                           	psect	cinit
   216  001A2A                     __pcinit:
   217                           	opt callstack 0
   218  001A2A                     start_initialization:
   219                           	opt callstack 0
   220  001A2A                     __initialization:
   221                           	opt callstack 0
   222                           
   223                           ; Initialize objects allocated to BANK0 (30 bytes)
   224                           ; load TBLPTR registers with __pidataBANK0
   225  001A2A  0E56               	movlw	low __pidataBANK0
   226  001A2C  6EF6               	movwf	tblptrl,c
   227  001A2E  0E1F               	movlw	high __pidataBANK0
   228  001A30  6EF7               	movwf	tblptrh,c
   229  001A32  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   230  001A34  6EF8               	movwf	tblptru,c
   231  001A36  EE00  F0B5         	lfsr	0,__pdataBANK0
   232  001A3A  EE10 F01E          	lfsr	1,30
   233  001A3E                     copy_data0:
   234  001A3E  0009               	tblrd		*+
   235  001A40  CFF5 FFEE          	movff	tablat,postinc0
   236  001A44  50E5               	movf	postdec1,w,c
   237  001A46  50E1               	movf	fsr1l,w,c
   238  001A48  E1FA               	bnz	copy_data0
   239                           
   240                           ; Initialize objects allocated to COMRAM (2 bytes)
   241                           ; load TBLPTR registers with __pidataCOMRAM
   242  001A4A  0E44               	movlw	low __pidataCOMRAM
   243  001A4C  6EF6               	movwf	tblptrl,c
   244  001A4E  0E20               	movlw	high __pidataCOMRAM
   245  001A50  6EF7               	movwf	tblptrh,c
   246  001A52  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   247  001A54  6EF8               	movwf	tblptru,c
   248  001A56  0009               	tblrd		*+	;fetch initializer
   249  001A58  CFF5 F043          	movff	tablat,__pdataCOMRAM
   250  001A5C  0009               	tblrd		*+	;fetch initializer
   251  001A5E  CFF5 F044          	movff	tablat,__pdataCOMRAM+1
   252                           
   253                           ; Clear objects allocated to BANK1 (123 bytes)
   254  001A62  EE01  F000         	lfsr	0,__pbssBANK1
   255  001A66  0E7B               	movlw	123
   256  001A68                     clear_0:
   257  001A68  6AEE               	clrf	postinc0,c
   258  001A6A  06E8               	decf	wreg,f,c
   259  001A6C  E1FD               	bnz	clear_0
   260                           
   261                           ; Clear objects allocated to BANK0 (85 bytes)
   262  001A6E  EE00  F060         	lfsr	0,__pbssBANK0
   263  001A72  0E55               	movlw	85
   264  001A74                     clear_1:
   265  001A74  6AEE               	clrf	postinc0,c
   266  001A76  06E8               	decf	wreg,f,c
   267  001A78  E1FD               	bnz	clear_1
   268                           
   269                           ; Clear objects allocated to COMRAM (14 bytes)
   270  001A7A  EE00  F035         	lfsr	0,__pbssCOMRAM
   271  001A7E  0E0E               	movlw	14
   272  001A80                     clear_2:
   273  001A80  6AEE               	clrf	postinc0,c
   274  001A82  06E8               	decf	wreg,f,c
   275  001A84  E1FD               	bnz	clear_2
   276  001A86                     end_of_initialization:
   277                           	opt callstack 0
   278  001A86                     __end_of__initialization:
   279                           	opt callstack 0
   280  001A86  9045               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   281  001A88  9245               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   282  001A8A  0E00               	movlw	low (__Lmediumconst shr (0+16))
   283  001A8C  6EF8               	movwf	tblptru,c
   284  001A8E  0100               	movlb	0
   285  001A90  EFDC  F00C         	goto	_main	;jump to C main() function
   286                           
   287                           	psect	bssCOMRAM
   288  000035                     __pbssCOMRAM:
   289                           	opt callstack 0
   290  000035                     _mpap:
   291                           	opt callstack 0
   292  000035                     	ds	8
   293  00003D                     mpap_test@sm0:
   294                           	opt callstack 0
   295  00003D                     	ds	1
   296  00003E                     display7s_job@q:
   297                           	opt callstack 0
   298  00003E                     	ds	1
   299  00003F                     INTERRUPCION@cm:
   300                           	opt callstack 0
   301  00003F                     	ds	1
   302  000040                     mpap_sych@sm0:
   303                           	opt callstack 0
   304  000040                     	ds	1
   305  000041                     _main_flag:
   306                           	opt callstack 0
   307  000041                     	ds	1
   308  000042                     _isr_flag:
   309                           	opt callstack 0
   310  000042                     	ds	1
   311                           
   312                           	psect	dataCOMRAM
   313  000043                     __pdataCOMRAM:
   314                           	opt callstack 0
   315  000043                     mpap_test@k:
   316                           	opt callstack 0
   317  000043                     	ds	1
   318  000044                     mpap_do1step@i:
   319                           	opt callstack 0
   320  000044                     	ds	1
   321                           
   322                           	psect	bssBANK0
   323  000060                     __pbssBANK0:
   324                           	opt callstack 0
   325  000060                     _key:
   326                           	opt callstack 0
   327  000060                     	ds	80
   328  0000B0                     _group_x:
   329                           	opt callstack 0
   330  0000B0                     	ds	5
   331                           
   332                           	psect	dataBANK0
   333  0000B5                     __pdataBANK0:
   334                           	opt callstack 0
   335  0000B5                     _multiplexedDisp:
   336                           	opt callstack 0
   337  0000B5                     	ds	20
   338  0000C9                     _mpap_step:
   339                           	opt callstack 0
   340  0000C9                     	ds	8
   341  0000D1                     _mpap_off:
   342                           	opt callstack 0
   343  0000D1                     	ds	2
   344                           
   345                           	psect	bssBANK1
   346  000100                     __pbssBANK1:
   347                           	opt callstack 0
   348  000100                     _pulsonic:
   349                           	opt callstack 0
   350  000100                     	ds	123
   351                           
   352                           	psect	cstackBANK0
   353  0000D3                     __pcstackBANK0:
   354                           	opt callstack 0
   355  0000D3                     disp_show_quantity@buff:
   356                           	opt callstack 0
   357                           
   358                           ; 10 bytes @ 0x0
   359  0000D3                     	ds	10
   360  0000DD                     disp_show_quantity@real:
   361                           	opt callstack 0
   362                           
   363                           ; 3 bytes @ 0xA
   364  0000DD                     	ds	3
   365  0000E0                     disp_show_quantity@num:
   366                           	opt callstack 0
   367                           
   368                           ; 1 bytes @ 0xD
   369  0000E0                     	ds	1
   370  0000E1                     disp_show_quantity@q:
   371                           	opt callstack 0
   372                           
   373                           ; 1 bytes @ 0xE
   374  0000E1                     	ds	1
   375  0000E2                     disp_show_quantity@last_pos:
   376                           	opt callstack 0
   377                           
   378                           ; 1 bytes @ 0xF
   379  0000E2                     	ds	1
   380  0000E3                     disp_show_quantity@I:
   381                           	opt callstack 0
   382                           
   383                           ; 2 bytes @ 0x10
   384  0000E3                     	ds	2
   385  0000E5                     disp_show_quantity@i:
   386                           	opt callstack 0
   387                           
   388                           ; 1 bytes @ 0x12
   389  0000E5                     	ds	1
   390                           
   391                           	psect	cstackCOMRAM
   392  000001                     __pcstackCOMRAM:
   393                           	opt callstack 0
   394  000001                     mpap_do1step@KI:
   395                           	opt callstack 0
   396                           
   397                           ; 1 bytes @ 0x0
   398  000001                     	ds	1
   399  000002                     ??_mpap_homming:
   400  000002                     mpap_normal_mode@cod_ret:
   401                           	opt callstack 0
   402                           
   403                           ; 1 bytes @ 0x1
   404  000002                     	ds	1
   405  000003                     mpap_homming@cod_ret:
   406                           	opt callstack 0
   407                           
   408                           ; 1 bytes @ 0x2
   409  000003                     	ds	1
   410  000004                     
   411                           ; 1 bytes @ 0x3
   412  000004                     	ds	1
   413  000005                     ??_INTERRUPCION:
   414                           
   415                           ; 1 bytes @ 0x4
   416  000005                     	ds	6
   417  00000B                     ??_ikey_is_accessible:
   418  00000B                     ??_multiplexedDisp_job:
   419  00000B                     ?___wmul:
   420                           	opt callstack 0
   421  00000B                     ?___lwdiv:
   422                           	opt callstack 0
   423  00000B                     ?___lwmod:
   424                           	opt callstack 0
   425  00000B                     ?___ftpack:
   426                           	opt callstack 0
   427  00000B                     ikb_init@i:
   428                           	opt callstack 0
   429  00000B                     ikb_key_is_ready2read@k:
   430                           	opt callstack 0
   431  00000B                     ikey_clear_all_flag@i:
   432                           	opt callstack 0
   433  00000B                     multiplexedDisp_init@i:
   434                           	opt callstack 0
   435  00000B                     ___wmul@multiplier:
   436                           	opt callstack 0
   437  00000B                     ___lwdiv@dividend:
   438                           	opt callstack 0
   439  00000B                     ___lwmod@dividend:
   440                           	opt callstack 0
   441  00000B                     ___ftpack@arg:
   442                           	opt callstack 0
   443                           
   444                           ; 3 bytes @ 0xA
   445  00000B                     	ds	1
   446  00000C                     ikey_scan@k:
   447                           	opt callstack 0
   448                           
   449                           ; 1 bytes @ 0xB
   450  00000C                     	ds	1
   451  00000D                     ikey_is_accessible@k:
   452                           	opt callstack 0
   453  00000D                     ___wmul@multiplicand:
   454                           	opt callstack 0
   455  00000D                     ___lwdiv@divisor:
   456                           	opt callstack 0
   457  00000D                     ___lwmod@divisor:
   458                           	opt callstack 0
   459                           
   460                           ; 2 bytes @ 0xC
   461  00000D                     	ds	1
   462  00000E                     ___ftpack@exp:
   463                           	opt callstack 0
   464                           
   465                           ; 1 bytes @ 0xD
   466  00000E                     	ds	1
   467  00000F                     ___ftpack@sign:
   468                           	opt callstack 0
   469  00000F                     ___lwdiv@counter:
   470                           	opt callstack 0
   471  00000F                     ___lwmod@counter:
   472                           	opt callstack 0
   473  00000F                     ___wmul@product:
   474                           	opt callstack 0
   475                           
   476                           ; 2 bytes @ 0xE
   477  00000F                     	ds	1
   478  000010                     ??___ftpack:
   479  000010                     ___lwdiv@quotient:
   480                           	opt callstack 0
   481                           
   482                           ; 2 bytes @ 0xF
   483  000010                     	ds	1
   484  000011                     multiplexedDisp_job@q:
   485                           	opt callstack 0
   486  000011                     mpap_setupToTurn@numSteps_tomove:
   487                           	opt callstack 0
   488                           
   489                           ; 2 bytes @ 0x10
   490  000011                     	ds	1
   491  000012                     multiplexedDisp_job@i:
   492                           	opt callstack 0
   493  000012                     utoa@buf:
   494                           	opt callstack 0
   495                           
   496                           ; 1 bytes @ 0x11
   497  000012                     	ds	1
   498  000013                     ?___ftadd:
   499                           	opt callstack 0
   500  000013                     ?___ftmul:
   501                           	opt callstack 0
   502  000013                     ?___awtoft:
   503                           	opt callstack 0
   504  000013                     ?___lwtoft:
   505                           	opt callstack 0
   506  000013                     _mpap_setupToTurn$428:
   507                           	opt callstack 0
   508  000013                     ___awtoft@c:
   509                           	opt callstack 0
   510  000013                     ___lwtoft@c:
   511                           	opt callstack 0
   512  000013                     utoa@val:
   513                           	opt callstack 0
   514  000013                     ___ftadd@f1:
   515                           	opt callstack 0
   516  000013                     ___ftmul@f1:
   517                           	opt callstack 0
   518                           
   519                           ; 3 bytes @ 0x12
   520  000013                     	ds	2
   521  000015                     ??_mpap_test:
   522  000015                     nozzle_moveto@nozzle:
   523                           	opt callstack 0
   524  000015                     utoa@base:
   525                           	opt callstack 0
   526                           
   527                           ; 2 bytes @ 0x14
   528  000015                     	ds	1
   529  000016                     ___awtoft@sign:
   530                           	opt callstack 0
   531  000016                     ___ftadd@f2:
   532                           	opt callstack 0
   533  000016                     ___ftge@ff1:
   534                           	opt callstack 0
   535  000016                     ___ftmul@f2:
   536                           	opt callstack 0
   537                           
   538                           ; 3 bytes @ 0x15
   539  000016                     	ds	1
   540  000017                     utoa@v:
   541                           	opt callstack 0
   542                           
   543                           ; 2 bytes @ 0x16
   544  000017                     	ds	2
   545  000019                     ??___ftadd:
   546  000019                     ??___ftmul:
   547  000019                     utoa@c:
   548                           	opt callstack 0
   549  000019                     ___ftge@ff2:
   550                           	opt callstack 0
   551                           
   552                           ; 3 bytes @ 0x18
   553  000019                     	ds	1
   554  00001A                     itoa@buf:
   555                           	opt callstack 0
   556                           
   557                           ; 1 bytes @ 0x19
   558  00001A                     	ds	1
   559  00001B                     itoa@val:
   560                           	opt callstack 0
   561                           
   562                           ; 2 bytes @ 0x1A
   563  00001B                     	ds	1
   564  00001C                     ??___ftge:
   565  00001C                     ___ftadd@sign:
   566                           	opt callstack 0
   567  00001C                     ___ftmul@exp:
   568                           	opt callstack 0
   569                           
   570                           ; 1 bytes @ 0x1B
   571  00001C                     	ds	1
   572  00001D                     ___ftadd@exp2:
   573                           	opt callstack 0
   574  00001D                     itoa@base:
   575                           	opt callstack 0
   576  00001D                     ___ftmul@f3_as_product:
   577                           	opt callstack 0
   578                           
   579                           ; 3 bytes @ 0x1C
   580  00001D                     	ds	1
   581  00001E                     ___ftadd@exp1:
   582                           	opt callstack 0
   583                           
   584                           ; 1 bytes @ 0x1D
   585  00001E                     	ds	1
   586  00001F                     ??_ikey_parsing:
   587  00001F                     ?___ftsub:
   588                           	opt callstack 0
   589  00001F                     ___ftsub@f1:
   590                           	opt callstack 0
   591                           
   592                           ; 3 bytes @ 0x1E
   593  00001F                     	ds	1
   594  000020                     ___ftmul@cntr:
   595                           	opt callstack 0
   596                           
   597                           ; 1 bytes @ 0x1F
   598  000020                     	ds	1
   599  000021                     ___ftmul@sign:
   600                           	opt callstack 0
   601                           
   602                           ; 1 bytes @ 0x20
   603  000021                     	ds	1
   604  000022                     ?___fttol:
   605                           	opt callstack 0
   606  000022                     ___ftsub@f2:
   607                           	opt callstack 0
   608  000022                     ___fttol@f1:
   609                           	opt callstack 0
   610                           
   611                           ; 3 bytes @ 0x21
   612  000022                     	ds	1
   613  000023                     ikey_parsing@k:
   614                           	opt callstack 0
   615                           
   616                           ; 1 bytes @ 0x22
   617  000023                     	ds	1
   618  000024                     
   619                           ; 1 bytes @ 0x23
   620  000024                     	ds	1
   621  000025                     
   622                           ; 1 bytes @ 0x24
   623  000025                     	ds	1
   624  000026                     ??___fttol:
   625                           
   626                           ; 1 bytes @ 0x25
   627  000026                     	ds	5
   628  00002B                     ___fttol@sign1:
   629                           	opt callstack 0
   630                           
   631                           ; 1 bytes @ 0x2A
   632  00002B                     	ds	1
   633  00002C                     ___fttol@lval:
   634                           	opt callstack 0
   635                           
   636                           ; 4 bytes @ 0x2B
   637  00002C                     	ds	4
   638  000030                     ___fttol@exp1:
   639                           	opt callstack 0
   640                           
   641                           ; 1 bytes @ 0x2F
   642  000030                     	ds	1
   643  000031                     disp_show_quantity@f:
   644                           	opt callstack 0
   645                           
   646                           ; 3 bytes @ 0x30
   647  000031                     	ds	3
   648  000034                     ??_disp_show_quantity:
   649                           
   650                           ; 1 bytes @ 0x33
   651  000034                     	ds	1
   652  000035                     
   653                           ; 1 bytes @ 0x34
   654 ;;
   655 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   656 ;;
   657 ;; *************** function _main *****************
   658 ;; Defined at:
   659 ;;		line 55 in file "main.c"
   660 ;; Parameters:    Size  Location     Type
   661 ;;		None
   662 ;; Auto vars:     Size  Location     Type
   663 ;;  c               1    0        char 
   664 ;;  c_disp          1    0        char 
   665 ;; Return value:  Size  Location     Type
   666 ;;                  1    wreg      void 
   667 ;; Registers used:
   668 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   669 ;; Tracked objects:
   670 ;;		On entry : 0/0
   671 ;;		On exit  : 0/0
   672 ;;		Unchanged: 0/0
   673 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   674 ;;      Params:         0       0       0       0       0       0       0       0       0
   675 ;;      Locals:         2       0       0       0       0       0       0       0       0
   676 ;;      Temps:          0       0       0       0       0       0       0       0       0
   677 ;;      Totals:         2       0       0       0       0       0       0       0       0
   678 ;;Total ram usage:        2 bytes
   679 ;; Hardware stack levels required when called:    9
   680 ;; This function calls:
   681 ;;		_disp_show_quantity
   682 ;;		_display7s_init
   683 ;;		_display7s_job
   684 ;;		_ikb_flush
   685 ;;		_ikb_init
   686 ;;		_ikb_job
   687 ;;		_ikb_key_is_ready2read
   688 ;;		_mpap_setupToHomming
   689 ;;		_mpap_setupToTurn
   690 ;;		_mpap_sych
   691 ;;		_mpap_test
   692 ;;		_nozzle_moveto
   693 ;; This function is called by:
   694 ;;		Startup code after reset
   695 ;; This function uses a non-reentrant model
   696 ;;
   697                           
   698                           	psect	text0
   699  0019B8                     __ptext0:
   700                           	opt callstack 0
   701  0019B8                     _main:
   702                           	opt callstack 22
   703                           
   704                           ;main.c: 57: LATA = 0x00;
   705                           
   706                           ;incstack = 0
   707  0019B8  0E00               	movlw	0
   708  0019BA  6E89               	movwf	3977,c	;volatile
   709                           
   710                           ;main.c: 58: LATC = 0x00;
   711  0019BC  0E00               	movlw	0
   712  0019BE  6E8B               	movwf	3979,c	;volatile
   713                           
   714                           ;main.c: 59: LATD = 0x00;
   715  0019C0  0E00               	movlw	0
   716  0019C2  6E8C               	movwf	3980,c	;volatile
   717                           
   718                           ;main.c: 60: LATE = 0x00;
   719  0019C4  0E00               	movlw	0
   720  0019C6  6E8D               	movwf	3981,c	;volatile
   721                           
   722                           ;main.c: 61: LATB = 0x00;
   723  0019C8  0E00               	movlw	0
   724  0019CA  6E8A               	movwf	3978,c	;volatile
   725                           
   726                           ;main.c: 65: ADCON1 = 0x0F;
   727  0019CC  0E0F               	movlw	15
   728  0019CE  6EC1               	movwf	4033,c	;volatile
   729                           
   730                           ;main.c: 66: CMCON=0xCF;
   731  0019D0  0ECF               	movlw	207
   732  0019D2  6EB4               	movwf	4020,c	;volatile
   733                           
   734                           ;main.c: 69: UCON = 0;
   735  0019D4  0E00               	movlw	0
   736  0019D6  6E6D               	movwf	3949,c	;volatile
   737                           
   738                           ;main.c: 70: UCFG = 1<<3;
   739  0019D8  0E08               	movlw	8
   740  0019DA  6E6F               	movwf	3951,c	;volatile
   741                           
   742                           ;main.c: 78: T0CON = 0B10000111;
   743  0019DC  0E87               	movlw	135
   744  0019DE  6ED5               	movwf	4053,c	;volatile
   745                           
   746                           ;main.c: 81: TMR0H = (uint8_t)((uint16_t)((1UL<<16) - ( 1.0E-3 *48000000UL / (256*4)) ) 
      +                          >> 8);
   747  0019E0  68D7               	setf	4055,c	;volatile
   748                           
   749                           ;main.c: 82: TMR0L = (uint8_t)((uint16_t)((1UL<<16) - ( 1.0E-3 *48000000UL / (256*4)) ))
      +                          ;
   750  0019E2  0ED1               	movlw	209
   751  0019E4  6ED6               	movwf	4054,c	;volatile
   752                           
   753                           ;main.c: 83: TMR0IE = 1;
   754  0019E6  8AF2               	bsf	4082,5,c	;volatile
   755  0019E8  808D               	bsf	3981,0,c	;volatile
   756  0019EA  9096               	bcf	3990,0,c	;volatile
   757  0019EC  9095               	bcf	3989,0,c	;volatile
   758  0019EE  9295               	bcf	3989,1,c	;volatile
   759  0019F0  9495               	bcf	3989,2,c	;volatile
   760  0019F2  9695               	bcf	3989,3,c	;volatile
   761  0019F4  928B               	bcf	3979,1,c	;volatile
   762  0019F6  9294               	bcf	3988,1,c	;volatile
   763  0019F8  8296               	bsf	3990,1,c	;volatile
   764                           
   765                           ;main.c: 99: display7s_init();
   766  0019FA  ECD0  F00D         	call	_display7s_init	;wreg free
   767                           
   768                           ;main.c: 100: ikb_init();
   769  0019FE  EC56  F00B         	call	_ikb_init	;wreg free
   770                           
   771                           ; BSR set to: 0
   772                           ;main.c: 102: disp_show_quantity(77.7);
   773  001A02  0E66               	movlw	102
   774  001A04  6E31               	movwf	disp_show_quantity@f,c
   775  001A06  0E9B               	movlw	155
   776  001A08  6E32               	movwf	disp_show_quantity@f+1,c
   777  001A0A  0E42               	movlw	66
   778  001A0C  6E33               	movwf	disp_show_quantity@f+2,c
   779  001A0E  EC1F  F007         	call	_disp_show_quantity	;wreg free
   780                           
   781                           ;main.c: 108: mpap_setupToTurn( (4*200));
   782  001A12  0E03               	movlw	3
   783  001A14  6E12               	movwf	mpap_setupToTurn@numSteps_tomove+1,c
   784  001A16  0E20               	movlw	32
   785  001A18  6E11               	movwf	mpap_setupToTurn@numSteps_tomove,c
   786  001A1A  EC44  F00F         	call	_mpap_setupToTurn	;wreg free
   787                           
   788                           ;main.c: 109: mpap.mode = NORMAL_MODE;
   789  001A1E  0E03               	movlw	3
   790  001A20  6E3C               	movwf	_mpap+7,c	;volatile
   791                           
   792                           ;main.c: 110: GIE = 1;
   793  001A22  8EF2               	bsf	4082,7,c	;volatile
   794  001A24                     l3835:
   795                           
   796                           ;main.c: 114: {;main.c: 115: mpap_test();
   797  001A24  ECF6  F00A         	call	_mpap_test	;wreg free
   798  001A28  D7FD               	goto	l3835
   799  001A2A                     __end_of_main:
   800                           	opt callstack 0
   801                           
   802 ;; *************** function _nozzle_moveto *****************
   803 ;; Defined at:
   804 ;;		line 112 in file "mpap.c"
   805 ;; Parameters:    Size  Location     Type
   806 ;;  nozzle          1    wreg     char 
   807 ;; Auto vars:     Size  Location     Type
   808 ;;  nozzle          1   20[COMRAM] char 
   809 ;; Return value:  Size  Location     Type
   810 ;;                  1    wreg      void 
   811 ;; Registers used:
   812 ;;		wreg, status,2, status,0, prodl, prodh, cstack
   813 ;; Tracked objects:
   814 ;;		On entry : 0/0
   815 ;;		On exit  : 0/0
   816 ;;		Unchanged: 0/0
   817 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   818 ;;      Params:         0       0       0       0       0       0       0       0       0
   819 ;;      Locals:         1       0       0       0       0       0       0       0       0
   820 ;;      Temps:          0       0       0       0       0       0       0       0       0
   821 ;;      Totals:         1       0       0       0       0       0       0       0       0
   822 ;;Total ram usage:        1 bytes
   823 ;; Hardware stack levels used:    1
   824 ;; Hardware stack levels required when called:    6
   825 ;; This function calls:
   826 ;;		___wmul
   827 ;;		_mpap_setupToTurn
   828 ;; This function is called by:
   829 ;;		_main
   830 ;; This function uses a non-reentrant model
   831 ;;
   832                           
   833                           	psect	text1
   834  001EB8                     __ptext1:
   835                           	opt callstack 0
   836  001EB8                     _nozzle_moveto:
   837                           	opt callstack 24
   838                           
   839                           ;incstack = 0
   840                           ;nozzle_moveto@nozzle stored from wreg
   841  001EB8  6E15               	movwf	nozzle_moveto@nozzle,c
   842                           
   843                           ;mpap.c: 115: mpap.mode = NORMAL_MODE;
   844  001EBA  0E03               	movlw	3
   845  001EBC  6E3C               	movwf	_mpap+7,c	;volatile
   846                           
   847                           ;mpap.c: 116: mpap_setupToTurn( (nozzle*200) - mpap.numSteps_current);
   848  001EBE  5015               	movf	nozzle_moveto@nozzle,w,c
   849  001EC0  6E0B               	movwf	___wmul@multiplier,c
   850  001EC2  6A0C               	clrf	___wmul@multiplier+1,c
   851  001EC4  BE0B               	btfsc	___wmul@multiplier,7,c
   852  001EC6  060C               	decf	___wmul@multiplier+1,f,c
   853  001EC8  0E00               	movlw	0
   854  001ECA  6E0E               	movwf	___wmul@multiplicand+1,c
   855  001ECC  0EC8               	movlw	200
   856  001ECE  6E0D               	movwf	___wmul@multiplicand,c
   857  001ED0  EC73  F00F         	call	___wmul	;wreg free
   858  001ED4  5035               	movf	_mpap,w,c	;volatile
   859  001ED6  5C0B               	subwf	?___wmul,w,c
   860  001ED8  6E11               	movwf	mpap_setupToTurn@numSteps_tomove,c
   861  001EDA  5036               	movf	_mpap+1,w,c	;volatile
   862  001EDC  580C               	subwfb	?___wmul+1,w,c
   863  001EDE  6E12               	movwf	mpap_setupToTurn@numSteps_tomove+1,c
   864  001EE0  EC44  F00F         	call	_mpap_setupToTurn	;wreg free
   865  001EE4  0012               	return		;funcret
   866  001EE6                     __end_of_nozzle_moveto:
   867                           	opt callstack 0
   868                           
   869 ;; *************** function _mpap_test *****************
   870 ;; Defined at:
   871 ;;		line 214 in file "mpap.c"
   872 ;; Parameters:    Size  Location     Type
   873 ;;		None
   874 ;; Auto vars:     Size  Location     Type
   875 ;;		None
   876 ;; Return value:  Size  Location     Type
   877 ;;                  1    wreg      void 
   878 ;; Registers used:
   879 ;;		wreg, status,2, status,0, prodl, prodh, cstack
   880 ;; Tracked objects:
   881 ;;		On entry : 0/0
   882 ;;		On exit  : 0/0
   883 ;;		Unchanged: 0/0
   884 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   885 ;;      Params:         0       0       0       0       0       0       0       0       0
   886 ;;      Locals:         0       0       0       0       0       0       0       0       0
   887 ;;      Temps:          2       0       0       0       0       0       0       0       0
   888 ;;      Totals:         2       0       0       0       0       0       0       0       0
   889 ;;Total ram usage:        2 bytes
   890 ;; Hardware stack levels used:    1
   891 ;; Hardware stack levels required when called:    6
   892 ;; This function calls:
   893 ;;		___wmul
   894 ;;		_mpap_setupToTurn
   895 ;; This function is called by:
   896 ;;		_main
   897 ;; This function uses a non-reentrant model
   898 ;;
   899                           
   900                           	psect	text2
   901  0015EC                     __ptext2:
   902                           	opt callstack 0
   903  0015EC                     _mpap_test:
   904                           	opt callstack 24
   905                           
   906                           ;mpap.c: 216: static int8_t k = 10;;mpap.c: 217: static int8_t sm0;;mpap.c: 219: if (sm0
      +                           == 0)
   907                           
   908                           ;incstack = 0
   909  0015EC  503D               	movf	mpap_test@sm0,w,c
   910  0015EE  A4D8               	btfss	status,2,c
   911  0015F0  D010               	goto	l3061
   912                           
   913                           ;mpap.c: 220: {;mpap.c: 221: if ((mpap.mode == NORMAL_MODE) || (mpap.mode == HOMMING_MOD
      +                          E))
   914  0015F2  0E03               	movlw	3
   915  0015F4  183C               	xorwf	_mpap+7,w,c	;volatile
   916  0015F6  B4D8               	btfsc	status,2,c
   917  0015F8  D004               	goto	u3180
   918  0015FA  0E02               	movlw	2
   919  0015FC  183C               	xorwf	_mpap+7,w,c	;volatile
   920  0015FE  A4D8               	btfss	status,2,c
   921  001600  D002               	goto	l3057
   922  001602                     u3180:
   923                           
   924                           ;mpap.c: 222: {;mpap.c: 223: sm0++;
   925  001602  2A3D               	incf	mpap_test@sm0,f,c
   926                           
   927                           ;mpap.c: 224: }
   928  001604  0012               	return	
   929  001606                     l3057:
   930                           
   931                           ;mpap.c: 225: else if (mpap.mode == STALL_MODE)
   932  001606  043C               	decf	_mpap+7,w,c	;volatile
   933  001608  A4D8               	btfss	status,2,c
   934  00160A  0012               	return	
   935                           
   936                           ;mpap.c: 226: {;mpap.c: 227: sm0 = 2;
   937  00160C  0E02               	movlw	2
   938  00160E  6E3D               	movwf	mpap_test@sm0,c
   939  001610  0012               	return	
   940  001612                     l3061:
   941                           
   942                           ;mpap.c: 230: else if (sm0 == 1)
   943  001612  043D               	decf	mpap_test@sm0,w,c
   944  001614  A4D8               	btfss	status,2,c
   945  001616  D01D               	goto	l3079
   946                           
   947                           ;mpap.c: 231: {;mpap.c: 232: if (mpap.numSteps_tomove == 0)
   948  001618  5039               	movf	_mpap+4,w,c	;volatile
   949  00161A  103A               	iorwf	_mpap+5,w,c	;volatile
   950  00161C  A4D8               	btfss	status,2,c
   951  00161E  0012               	return	
   952                           
   953                           ;mpap.c: 233: {;mpap.c: 234: if (mpap.mode == HOMMING_MODE)
   954  001620  0E02               	movlw	2
   955  001622  183C               	xorwf	_mpap+7,w,c	;volatile
   956  001624  A4D8               	btfss	status,2,c
   957  001626  D005               	goto	l3071
   958                           
   959                           ;mpap.c: 235: {;mpap.c: 236: if ( pulsonic.errors.flag.mpap_home_sensor == 1)
   960  001628  0101               	movlb	1	; () banked
   961  00162A  A175               	btfss	(_pulsonic+117)& (0+255),0,b
   962  00162C  D003               	goto	l3073
   963                           
   964                           ; BSR set to: 1
   965                           ;mpap.c: 237: {;mpap.c: 238: pulsonic.errors.flag.mpap_home_sensor = 0;
   966  00162E  9175               	bcf	(_pulsonic+117)& (0+255),0,b
   967  001630  D001               	goto	l3073
   968  001632                     l3071:
   969                           
   970                           ;mpap.c: 242: else if (mpap.mode == NORMAL_MODE)
   971  001632  503C               	movf	_mpap+7,w,c	;volatile
   972  001634                     l3073:
   973                           
   974                           ;mpap.c: 244: };mpap.c: 245: _delay((unsigned long)((20)*(48000000UL/4000.0)));
   975  001634  0E02               	movlw	2
   976  001636  6E16               	movwf	(??_mpap_test+1)& (0+255),c
   977  001638  0E38               	movlw	56
   978  00163A  6E15               	movwf	??_mpap_test& (0+255),c
   979  00163C  0EAD               	movlw	173
   980  00163E                     u4497:
   981  00163E  2EE8               	decfsz	wreg,f,c
   982  001640  D7FE               	bra	u4497
   983  001642  2E15               	decfsz	??_mpap_test& (0+255),f,c
   984  001644  D7FC               	bra	u4497
   985  001646  2E16               	decfsz	(??_mpap_test+1)& (0+255),f,c
   986  001648  D7FA               	bra	u4497
   987  00164A  F000               	nop	
   988                           
   989                           ;mpap.c: 246: mpap.mode = STALL_MODE;
   990  00164C  0E01               	movlw	1
   991  00164E  6E3C               	movwf	_mpap+7,c	;volatile
   992  001650  D7D8               	goto	u3180
   993  001652                     l3079:
   994                           
   995                           ;mpap.c: 250: else if (sm0 == 2)
   996  001652  0E02               	movlw	2
   997  001654  183D               	xorwf	mpap_test@sm0,w,c
   998  001656  A4D8               	btfss	status,2,c
   999  001658  0012               	return	
  1000                           
  1001                           ;mpap.c: 251: {;mpap.c: 252: if (mpap.mode == IDLE_MODE)
  1002  00165A  503C               	movf	_mpap+7,w,c	;volatile
  1003  00165C  A4D8               	btfss	status,2,c
  1004  00165E  0012               	return	
  1005                           
  1006                           ;mpap.c: 253: {;mpap.c: 255: sm0 = 0;
  1007  001660  0E00               	movlw	0
  1008  001662  6E3D               	movwf	mpap_test@sm0,c
  1009                           
  1010                           ;mpap.c: 256: _delay((unsigned long)((2000)*(48000000UL/4000.0)));
  1011  001664  0E7A               	movlw	122
  1012  001666  6E16               	movwf	(??_mpap_test+1)& (0+255),c
  1013  001668  0EC1               	movlw	193
  1014  00166A  6E15               	movwf	??_mpap_test& (0+255),c
  1015  00166C  0E82               	movlw	130
  1016  00166E                     u4507:
  1017  00166E  2EE8               	decfsz	wreg,f,c
  1018  001670  D7FE               	bra	u4507
  1019  001672  2E15               	decfsz	??_mpap_test& (0+255),f,c
  1020  001674  D7FC               	bra	u4507
  1021  001676  2E16               	decfsz	(??_mpap_test+1)& (0+255),f,c
  1022  001678  D7FA               	bra	u4507
  1023                           
  1024                           ;mpap.c: 258: k = k*-1;
  1025  00167A  5043               	movf	mpap_test@k,w,c
  1026  00167C  0D01               	mullw	1
  1027  00167E  50F3               	movf	prodl,w,c
  1028  001680  0800               	sublw	0
  1029  001682  6E43               	movwf	mpap_test@k,c
  1030                           
  1031                           ;mpap.c: 259: mpap_setupToTurn( (k*200));
  1032  001684  5043               	movf	mpap_test@k,w,c
  1033  001686  6E0B               	movwf	___wmul@multiplier,c
  1034  001688  6A0C               	clrf	___wmul@multiplier+1,c
  1035  00168A  BE0B               	btfsc	___wmul@multiplier,7,c
  1036  00168C  060C               	decf	___wmul@multiplier+1,f,c
  1037  00168E  0E00               	movlw	0
  1038  001690  6E0E               	movwf	___wmul@multiplicand+1,c
  1039  001692  0EC8               	movlw	200
  1040  001694  6E0D               	movwf	___wmul@multiplicand,c
  1041  001696  EC73  F00F         	call	___wmul	;wreg free
  1042  00169A  C00B  F011         	movff	?___wmul,mpap_setupToTurn@numSteps_tomove
  1043  00169E  C00C  F012         	movff	?___wmul+1,mpap_setupToTurn@numSteps_tomove+1
  1044  0016A2  EC44  F00F         	call	_mpap_setupToTurn	;wreg free
  1045                           
  1046                           ;mpap.c: 261: mpap.mode = NORMAL_MODE;
  1047  0016A6  0E03               	movlw	3
  1048  0016A8  6E3C               	movwf	_mpap+7,c	;volatile
  1049  0016AA  0012               	return		;funcret
  1050  0016AC                     __end_of_mpap_test:
  1051                           	opt callstack 0
  1052                           
  1053 ;; *************** function ___wmul *****************
  1054 ;; Defined at:
  1055 ;;		line 15 in file "/opt/microchip/xc8/v2.05/pic/sources/c90/common/Umul16.c"
  1056 ;; Parameters:    Size  Location     Type
  1057 ;;  multiplier      2   10[COMRAM] unsigned int 
  1058 ;;  multiplicand    2   12[COMRAM] unsigned int 
  1059 ;; Auto vars:     Size  Location     Type
  1060 ;;  product         2   14[COMRAM] unsigned int 
  1061 ;; Return value:  Size  Location     Type
  1062 ;;                  2   10[COMRAM] unsigned int 
  1063 ;; Registers used:
  1064 ;;		wreg, status,2, status,0, prodl, prodh
  1065 ;; Tracked objects:
  1066 ;;		On entry : 0/0
  1067 ;;		On exit  : 0/0
  1068 ;;		Unchanged: 0/0
  1069 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1070 ;;      Params:         4       0       0       0       0       0       0       0       0
  1071 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1072 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1073 ;;      Totals:         6       0       0       0       0       0       0       0       0
  1074 ;;Total ram usage:        6 bytes
  1075 ;; Hardware stack levels used:    1
  1076 ;; Hardware stack levels required when called:    5
  1077 ;; This function calls:
  1078 ;;		Nothing
  1079 ;; This function is called by:
  1080 ;;		_nozzle_moveto
  1081 ;;		_mpap_test
  1082 ;; This function uses a non-reentrant model
  1083 ;;
  1084                           
  1085                           	psect	text3
  1086  001EE6                     __ptext3:
  1087                           	opt callstack 0
  1088  001EE6                     ___wmul:
  1089                           	opt callstack 24
  1090                           
  1091                           ;incstack = 0
  1092  001EE6  500B               	movf	___wmul@multiplier,w,c
  1093  001EE8  020D               	mulwf	___wmul@multiplicand,c
  1094  001EEA  CFF3 F00F          	movff	prodl,___wmul@product
  1095  001EEE  CFF4 F010          	movff	prodh,___wmul@product+1
  1096  001EF2  500B               	movf	___wmul@multiplier,w,c
  1097  001EF4  020E               	mulwf	___wmul@multiplicand+1,c
  1098  001EF6  50F3               	movf	prodl,w,c
  1099  001EF8  2610               	addwf	___wmul@product+1,f,c
  1100  001EFA  500C               	movf	___wmul@multiplier+1,w,c
  1101  001EFC  020D               	mulwf	___wmul@multiplicand,c
  1102  001EFE  50F3               	movf	prodl,w,c
  1103  001F00  2610               	addwf	___wmul@product+1,f,c
  1104  001F02  C00F  F00B         	movff	___wmul@product,?___wmul
  1105  001F06  C010  F00C         	movff	___wmul@product+1,?___wmul+1
  1106  001F0A  0012               	return		;funcret
  1107  001F0C                     __end_of___wmul:
  1108                           	opt callstack 0
  1109                           
  1110 ;; *************** function _mpap_sych *****************
  1111 ;; Defined at:
  1112 ;;		line 175 in file "main.c"
  1113 ;; Parameters:    Size  Location     Type
  1114 ;;		None
  1115 ;; Auto vars:     Size  Location     Type
  1116 ;;		None
  1117 ;; Return value:  Size  Location     Type
  1118 ;;                  1    wreg      void 
  1119 ;; Registers used:
  1120 ;;		wreg, status,2, status,0
  1121 ;; Tracked objects:
  1122 ;;		On entry : 0/0
  1123 ;;		On exit  : 0/0
  1124 ;;		Unchanged: 0/0
  1125 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1126 ;;      Params:         0       0       0       0       0       0       0       0       0
  1127 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1128 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1129 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1130 ;;Total ram usage:        0 bytes
  1131 ;; Hardware stack levels used:    1
  1132 ;; Hardware stack levels required when called:    5
  1133 ;; This function calls:
  1134 ;;		Nothing
  1135 ;; This function is called by:
  1136 ;;		_main
  1137 ;; This function uses a non-reentrant model
  1138 ;;
  1139                           
  1140                           	psect	text4
  1141  001A94                     __ptext4:
  1142                           	opt callstack 0
  1143  001A94                     _mpap_sych:
  1144                           	opt callstack 25
  1145                           
  1146                           ;main.c: 177: static int8_t sm0;;main.c: 178: if (sm0 == 0)
  1147                           
  1148                           ;incstack = 0
  1149  001A94  5040               	movf	mpap_sych@sm0,w,c
  1150  001A96  A4D8               	btfss	status,2,c
  1151  001A98  D010               	goto	l3129
  1152                           
  1153                           ;main.c: 179: {;main.c: 180: if ((mpap.mode == NORMAL_MODE) || (mpap.mode == HOMMING_MOD
      +                          E))
  1154  001A9A  0E03               	movlw	3
  1155  001A9C  183C               	xorwf	_mpap+7,w,c	;volatile
  1156  001A9E  B4D8               	btfsc	status,2,c
  1157  001AA0  D004               	goto	u3300
  1158  001AA2  0E02               	movlw	2
  1159  001AA4  183C               	xorwf	_mpap+7,w,c	;volatile
  1160  001AA6  A4D8               	btfss	status,2,c
  1161  001AA8  D002               	goto	l3125
  1162  001AAA                     u3300:
  1163                           
  1164                           ;main.c: 181: {;main.c: 182: sm0++;
  1165  001AAA  2A40               	incf	mpap_sych@sm0,f,c
  1166                           
  1167                           ;main.c: 183: }
  1168  001AAC  0012               	return	
  1169  001AAE                     l3125:
  1170                           
  1171                           ;main.c: 184: else if (mpap.mode == STALL_MODE)
  1172  001AAE  043C               	decf	_mpap+7,w,c	;volatile
  1173  001AB0  A4D8               	btfss	status,2,c
  1174  001AB2  0012               	return	
  1175                           
  1176                           ;main.c: 185: {;main.c: 186: sm0 = 2;
  1177  001AB4  0E02               	movlw	2
  1178  001AB6  6E40               	movwf	mpap_sych@sm0,c
  1179  001AB8  0012               	return	
  1180  001ABA                     l3129:
  1181                           
  1182                           ;main.c: 189: else if (sm0 == 1)
  1183  001ABA  0440               	decf	mpap_sych@sm0,w,c
  1184  001ABC  A4D8               	btfss	status,2,c
  1185  001ABE  D011               	goto	l3145
  1186                           
  1187                           ;main.c: 190: {;main.c: 191: if (mpap.numSteps_tomove == 0)
  1188  001AC0  5039               	movf	_mpap+4,w,c	;volatile
  1189  001AC2  103A               	iorwf	_mpap+5,w,c	;volatile
  1190  001AC4  A4D8               	btfss	status,2,c
  1191  001AC6  0012               	return	
  1192                           
  1193                           ;main.c: 192: {;main.c: 193: if (mpap.mode == HOMMING_MODE)
  1194  001AC8  0E02               	movlw	2
  1195  001ACA  183C               	xorwf	_mpap+7,w,c	;volatile
  1196  001ACC  A4D8               	btfss	status,2,c
  1197  001ACE  D005               	goto	l3139
  1198                           
  1199                           ;main.c: 194: {;main.c: 195: if ( pulsonic.errors.flag.mpap_home_sensor == 1)
  1200  001AD0  0101               	movlb	1	; () banked
  1201  001AD2  A175               	btfss	(_pulsonic+117)& (0+255),0,b
  1202  001AD4  D003               	goto	l3141
  1203                           
  1204                           ; BSR set to: 1
  1205                           ;main.c: 196: {;main.c: 197: pulsonic.errors.flag.mpap_home_sensor = 0;
  1206  001AD6  9175               	bcf	(_pulsonic+117)& (0+255),0,b
  1207  001AD8  D001               	goto	l3141
  1208  001ADA                     l3139:
  1209                           
  1210                           ;main.c: 201: else if (mpap.mode == NORMAL_MODE)
  1211  001ADA  503C               	movf	_mpap+7,w,c	;volatile
  1212  001ADC                     l3141:
  1213                           
  1214                           ;main.c: 203: };main.c: 205: mpap.mode = STALL_MODE;
  1215  001ADC  0E01               	movlw	1
  1216  001ADE  6E3C               	movwf	_mpap+7,c	;volatile
  1217  001AE0  D7E4               	goto	u3300
  1218  001AE2                     l3145:
  1219                           
  1220                           ;main.c: 209: else if (sm0 == 2)
  1221  001AE2  0E02               	movlw	2
  1222  001AE4  1840               	xorwf	mpap_sych@sm0,w,c
  1223  001AE6  A4D8               	btfss	status,2,c
  1224  001AE8  0012               	return	
  1225                           
  1226                           ;main.c: 210: {;main.c: 211: if (mpap.mode == IDLE_MODE)
  1227  001AEA  503C               	movf	_mpap+7,w,c	;volatile
  1228  001AEC  A4D8               	btfss	status,2,c
  1229  001AEE  0012               	return	
  1230                           
  1231                           ;main.c: 212: {;main.c: 214: sm0 = 0;
  1232  001AF0  0E00               	movlw	0
  1233  001AF2  6E40               	movwf	mpap_sych@sm0,c
  1234  001AF4  0012               	return		;funcret
  1235  001AF6                     __end_of_mpap_sych:
  1236                           	opt callstack 0
  1237                           
  1238 ;; *************** function _mpap_setupToHomming *****************
  1239 ;; Defined at:
  1240 ;;		line 104 in file "mpap.c"
  1241 ;; Parameters:    Size  Location     Type
  1242 ;;		None
  1243 ;; Auto vars:     Size  Location     Type
  1244 ;;		None
  1245 ;; Return value:  Size  Location     Type
  1246 ;;                  1    wreg      void 
  1247 ;; Registers used:
  1248 ;;		wreg, status,2, status,0, cstack
  1249 ;; Tracked objects:
  1250 ;;		On entry : 0/0
  1251 ;;		On exit  : 0/0
  1252 ;;		Unchanged: 0/0
  1253 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1254 ;;      Params:         0       0       0       0       0       0       0       0       0
  1255 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1256 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1257 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1258 ;;Total ram usage:        0 bytes
  1259 ;; Hardware stack levels used:    1
  1260 ;; Hardware stack levels required when called:    6
  1261 ;; This function calls:
  1262 ;;		_mpap_setupToTurn
  1263 ;; This function is called by:
  1264 ;;		_main
  1265 ;; This function uses a non-reentrant model
  1266 ;;
  1267                           
  1268                           	psect	text5
  1269  001FAE                     __ptext5:
  1270                           	opt callstack 0
  1271  001FAE                     _mpap_setupToHomming:
  1272                           	opt callstack 24
  1273                           
  1274                           ;mpap.c: 106: mpap.mode = HOMMING_MODE;
  1275                           
  1276                           ;incstack = 0
  1277  001FAE  0E02               	movlw	2
  1278  001FB0  6E3C               	movwf	_mpap+7,c	;volatile
  1279                           
  1280                           ;mpap.c: 108: mpap_setupToTurn( -1 *( (18*200) +20));
  1281  001FB2  0EF1               	movlw	241
  1282  001FB4  6E12               	movwf	mpap_setupToTurn@numSteps_tomove+1,c
  1283  001FB6  0EDC               	movlw	220
  1284  001FB8  6E11               	movwf	mpap_setupToTurn@numSteps_tomove,c
  1285  001FBA  EC44  F00F         	call	_mpap_setupToTurn	;wreg free
  1286  001FBE  0012               	return		;funcret
  1287  001FC0                     __end_of_mpap_setupToHomming:
  1288                           	opt callstack 0
  1289                           
  1290 ;; *************** function _mpap_setupToTurn *****************
  1291 ;; Defined at:
  1292 ;;		line 92 in file "mpap.c"
  1293 ;; Parameters:    Size  Location     Type
  1294 ;;  numSteps_tom    2   16[COMRAM] int 
  1295 ;; Auto vars:     Size  Location     Type
  1296 ;;		None
  1297 ;; Return value:  Size  Location     Type
  1298 ;;                  1    wreg      void 
  1299 ;; Registers used:
  1300 ;;		wreg, status,2, status,0
  1301 ;; Tracked objects:
  1302 ;;		On entry : 0/0
  1303 ;;		On exit  : 0/0
  1304 ;;		Unchanged: 0/0
  1305 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1306 ;;      Params:         2       0       0       0       0       0       0       0       0
  1307 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1308 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1309 ;;      Totals:         4       0       0       0       0       0       0       0       0
  1310 ;;Total ram usage:        4 bytes
  1311 ;; Hardware stack levels used:    1
  1312 ;; Hardware stack levels required when called:    5
  1313 ;; This function calls:
  1314 ;;		Nothing
  1315 ;; This function is called by:
  1316 ;;		_main
  1317 ;;		_mpap_setupToHomming
  1318 ;;		_nozzle_moveto
  1319 ;;		_mpap_test
  1320 ;; This function uses a non-reentrant model
  1321 ;;
  1322                           
  1323                           	psect	text6
  1324  001E88                     __ptext6:
  1325                           	opt callstack 0
  1326  001E88                     _mpap_setupToTurn:
  1327                           	opt callstack 24
  1328                           
  1329                           ;mpap.c: 95: if (numSteps_tomove !=0)
  1330                           
  1331                           ;incstack = 0
  1332  001E88  5011               	movf	mpap_setupToTurn@numSteps_tomove,w,c
  1333  001E8A  1012               	iorwf	mpap_setupToTurn@numSteps_tomove+1,w,c
  1334  001E8C  B4D8               	btfsc	status,2,c
  1335  001E8E  0012               	return	
  1336                           
  1337                           ;mpap.c: 96: {;mpap.c: 97: mpap.KI = (numSteps_tomove<0)? -1: 1;
  1338  001E90  BE12               	btfsc	mpap_setupToTurn@numSteps_tomove+1,7,c
  1339  001E92  D005               	goto	l469
  1340  001E94  0E00               	movlw	0
  1341  001E96  6E14               	movwf	_mpap_setupToTurn$428+1,c
  1342  001E98  0E01               	movlw	1
  1343  001E9A  6E13               	movwf	_mpap_setupToTurn$428,c
  1344  001E9C  D002               	goto	l471
  1345  001E9E                     l469:
  1346  001E9E  6813               	setf	_mpap_setupToTurn$428,c
  1347  001EA0  6814               	setf	_mpap_setupToTurn$428+1,c
  1348  001EA2                     l471:
  1349  001EA2  C013  F03B         	movff	_mpap_setupToTurn$428,_mpap+6	;volatile
  1350                           
  1351                           ;mpap.c: 99: mpap.counter_steps = 0;
  1352  001EA6  0E00               	movlw	0
  1353  001EA8  6E38               	movwf	_mpap+3,c	;volatile
  1354  001EAA  0E00               	movlw	0
  1355  001EAC  6E37               	movwf	_mpap+2,c	;volatile
  1356                           
  1357                           ;mpap.c: 101: mpap.numSteps_tomove = numSteps_tomove;
  1358  001EAE  C011  F039         	movff	mpap_setupToTurn@numSteps_tomove,_mpap+4	;volatile
  1359  001EB2  C012  F03A         	movff	mpap_setupToTurn@numSteps_tomove+1,_mpap+5	;volatile
  1360  001EB6  0012               	return		;funcret
  1361  001EB8                     __end_of_mpap_setupToTurn:
  1362                           	opt callstack 0
  1363                           
  1364 ;; *************** function _ikb_key_is_ready2read *****************
  1365 ;; Defined at:
  1366 ;;		line 427 in file "../../../../../../FIRWAR/eslibrary/ikb/ikb.c"
  1367 ;; Parameters:    Size  Location     Type
  1368 ;;  k               1    wreg     unsigned char 
  1369 ;; Auto vars:     Size  Location     Type
  1370 ;;  k               1   10[COMRAM] unsigned char 
  1371 ;; Return value:  Size  Location     Type
  1372 ;;                  1    wreg      unsigned char 
  1373 ;; Registers used:
  1374 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  1375 ;; Tracked objects:
  1376 ;;		On entry : 0/0
  1377 ;;		On exit  : 3F/0
  1378 ;;		Unchanged: 0/0
  1379 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1380 ;;      Params:         0       0       0       0       0       0       0       0       0
  1381 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1382 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1383 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1384 ;;Total ram usage:        1 bytes
  1385 ;; Hardware stack levels used:    1
  1386 ;; Hardware stack levels required when called:    5
  1387 ;; This function calls:
  1388 ;;		Nothing
  1389 ;; This function is called by:
  1390 ;;		_main
  1391 ;; This function uses a non-reentrant model
  1392 ;;
  1393                           
  1394                           	psect	text7
  1395  001F92                     __ptext7:
  1396                           	opt callstack 0
  1397  001F92                     _ikb_key_is_ready2read:
  1398                           	opt callstack 25
  1399                           
  1400                           ;incstack = 0
  1401                           ;ikb_key_is_ready2read@k stored from wreg
  1402  001F92  6E0B               	movwf	ikb_key_is_ready2read@k,c
  1403                           
  1404                           ;ikb.c: 429: return key[k].bf.ReadyToRead;
  1405  001F94  500B               	movf	ikb_key_is_ready2read@k,w,c
  1406  001F96  0D10               	mullw	16
  1407  001F98  50F3               	movf	prodl,w,c
  1408  001F9A  0F6A               	addlw	low (_key+10)
  1409  001F9C  6ED9               	movwf	fsr2l,c
  1410  001F9E  6ADA               	clrf	fsr2h,c
  1411  001FA0  0100               	movlb	0	; () banked
  1412  001FA2  ACDF               	btfss	indf2,6,c
  1413  001FA4  D002               	goto	u3260
  1414  001FA6  0E01               	movlw	1
  1415  001FA8  0012               	return	
  1416  001FAA                     u3260:
  1417  001FAA  0E00               	movlw	0
  1418                           
  1419                           ; BSR set to: 0
  1420  001FAC  0012               	return		;funcret
  1421  001FAE                     __end_of_ikb_key_is_ready2read:
  1422                           	opt callstack 0
  1423                           
  1424 ;; *************** function _ikb_job *****************
  1425 ;; Defined at:
  1426 ;;		line 414 in file "../../../../../../FIRWAR/eslibrary/ikb/ikb.c"
  1427 ;; Parameters:    Size  Location     Type
  1428 ;;		None
  1429 ;; Auto vars:     Size  Location     Type
  1430 ;;		None
  1431 ;; Return value:  Size  Location     Type
  1432 ;;                  1    wreg      void 
  1433 ;; Registers used:
  1434 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
  1435 ;; Tracked objects:
  1436 ;;		On entry : 0/0
  1437 ;;		On exit  : 0/0
  1438 ;;		Unchanged: 0/0
  1439 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1440 ;;      Params:         0       0       0       0       0       0       0       0       0
  1441 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1442 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1443 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1444 ;;Total ram usage:        0 bytes
  1445 ;; Hardware stack levels used:    1
  1446 ;; Hardware stack levels required when called:    8
  1447 ;; This function calls:
  1448 ;;		_ikey_parsing
  1449 ;;		_ikey_scan
  1450 ;; This function is called by:
  1451 ;;		_main
  1452 ;; This function uses a non-reentrant model
  1453 ;;
  1454                           
  1455                           	psect	text8
  1456  001FC0                     __ptext8:
  1457                           	opt callstack 0
  1458  001FC0                     _ikb_job:
  1459                           	opt callstack 22
  1460                           
  1461                           ;ikb.c: 416: ikey_scan();
  1462                           
  1463                           ; BSR set to: 0
  1464                           ;incstack = 0
  1465  001FC0  EC43  F009         	call	_ikey_scan	;wreg free
  1466                           
  1467                           ;ikb.c: 417: ikey_parsing();
  1468  001FC4  EC07  F004         	call	_ikey_parsing	;wreg free
  1469  001FC8  0012               	return		;funcret
  1470  001FCA                     __end_of_ikb_job:
  1471                           	opt callstack 0
  1472                           
  1473 ;; *************** function _ikey_scan *****************
  1474 ;; Defined at:
  1475 ;;		line 449 in file "../../../../../../FIRWAR/eslibrary/ikb/ikb.c"
  1476 ;; Parameters:    Size  Location     Type
  1477 ;;		None
  1478 ;; Auto vars:     Size  Location     Type
  1479 ;;  k               1   11[COMRAM] char 
  1480 ;; Return value:  Size  Location     Type
  1481 ;;                  1    wreg      void 
  1482 ;; Registers used:
  1483 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
  1484 ;; Tracked objects:
  1485 ;;		On entry : 0/0
  1486 ;;		On exit  : 0/0
  1487 ;;		Unchanged: 0/0
  1488 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1489 ;;      Params:         0       0       0       0       0       0       0       0       0
  1490 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1491 ;;      Temps:          1       0       0       0       0       0       0       0       0
  1492 ;;      Totals:         2       0       0       0       0       0       0       0       0
  1493 ;;Total ram usage:        2 bytes
  1494 ;; Hardware stack levels used:    1
  1495 ;; Hardware stack levels required when called:    6
  1496 ;; This function calls:
  1497 ;;		_keyRead_pin_key1
  1498 ;;		_keyRead_pin_key2
  1499 ;;		_keyRead_pin_key3
  1500 ;;		_keyRead_pin_key4
  1501 ;;		_keyRead_pin_key5
  1502 ;; This function is called by:
  1503 ;;		_ikb_job
  1504 ;; This function uses a non-reentrant model
  1505 ;;
  1506                           
  1507                           	psect	text9
  1508  001286                     __ptext9:
  1509                           	opt callstack 0
  1510  001286                     _ikey_scan:
  1511                           	opt callstack 23
  1512                           
  1513                           ;ikb.c: 451: int8_t k = 5-1;
  1514                           
  1515                           ;incstack = 0
  1516  001286  0E04               	movlw	4
  1517  001288  6E0C               	movwf	ikey_scan@k,c
  1518  00128A                     l2571:
  1519                           
  1520                           ;ikb.c: 453: {;ikb.c: 454: if (key[k].sm0 == 0)
  1521  00128A  500C               	movf	ikey_scan@k,w,c
  1522  00128C  0D10               	mullw	16
  1523  00128E  50F3               	movf	prodl,w,c
  1524  001290  0F64               	addlw	low (_key+4)
  1525  001292  6ED9               	movwf	fsr2l,c
  1526  001294  6ADA               	clrf	fsr2h,c
  1527  001296  50DF               	movf	indf2,w,c
  1528  001298  A4D8               	btfss	status,2,c
  1529  00129A  D016               	goto	l2577
  1530                           
  1531                           ;ikb.c: 455: {;ikb.c: 456: if (key[k].keyRead() == 0)
  1532  00129C  500C               	movf	ikey_scan@k,w,c
  1533  00129E  0D10               	mullw	16
  1534  0012A0  50F3               	movf	prodl,w,c
  1535  0012A2  0F60               	addlw	low _key
  1536  0012A4  6ED9               	movwf	fsr2l,c
  1537  0012A6  6ADA               	clrf	fsr2h,c
  1538  0012A8  D801               	call	u2228
  1539  0012AA  D00A               	goto	u2229
  1540  0012AC                     u2228:
  1541  0012AC  0005               	push	
  1542  0012AE  6EFA               	movwf	pclath,c
  1543  0012B0  50DE               	movf	postinc2,w,c
  1544  0012B2  6EFD               	movwf	tosl,c
  1545  0012B4  50DE               	movf	postinc2,w,c
  1546  0012B6  6EFE               	movwf	tosh,c
  1547  0012B8  50F8               	movf	tblptru,w,c
  1548  0012BA  6EFF               	movwf	tosu,c
  1549  0012BC  50FA               	movf	pclath,w,c
  1550  0012BE  0012               	return		;indir
  1551  0012C0                     u2229:
  1552  0012C0  0900               	iorlw	0
  1553  0012C2  A4D8               	btfss	status,2,c
  1554  0012C4  D0AC               	goto	l2607
  1555  0012C6  D041               	goto	L1
  1556  0012C8                     l2577:
  1557                           
  1558                           ;ikb.c: 461: else if (key[k].sm0 == 1)
  1559  0012C8  500C               	movf	ikey_scan@k,w,c
  1560  0012CA  0D10               	mullw	16
  1561  0012CC  50F3               	movf	prodl,w,c
  1562  0012CE  0F64               	addlw	low (_key+4)
  1563  0012D0  6ED9               	movwf	fsr2l,c
  1564  0012D2  6ADA               	clrf	fsr2h,c
  1565  0012D4  04DE               	decf	postinc2,w,c
  1566  0012D6  A4D8               	btfss	status,2,c
  1567  0012D8  D040               	goto	l2589
  1568                           
  1569                           ;ikb.c: 462: {;ikb.c: 463: if (++key[k].counter0 == 4)
  1570  0012DA  500C               	movf	ikey_scan@k,w,c
  1571  0012DC  0D10               	mullw	16
  1572  0012DE  50F3               	movf	prodl,w,c
  1573  0012E0  0F65               	addlw	low (_key+5)
  1574  0012E2  6ED9               	movwf	fsr2l,c
  1575  0012E4  6ADA               	clrf	fsr2h,c
  1576  0012E6  2ADF               	incf	indf2,f,c
  1577  0012E8  0E04               	movlw	4
  1578  0012EA  18DE               	xorwf	postinc2,w,c
  1579  0012EC  A4D8               	btfss	status,2,c
  1580  0012EE  D097               	goto	l2607
  1581                           
  1582                           ;ikb.c: 464: {;ikb.c: 465: key[k].counter0 = 0x00;
  1583  0012F0  500C               	movf	ikey_scan@k,w,c
  1584  0012F2  0D10               	mullw	16
  1585  0012F4  50F3               	movf	prodl,w,c
  1586  0012F6  0F65               	addlw	low (_key+5)
  1587  0012F8  6ED9               	movwf	fsr2l,c
  1588  0012FA  6ADA               	clrf	fsr2h,c
  1589  0012FC  0E00               	movlw	0
  1590  0012FE  6EDF               	movwf	indf2,c
  1591                           
  1592                           ;ikb.c: 467: if (key[k].keyRead() != 0)
  1593  001300  500C               	movf	ikey_scan@k,w,c
  1594  001302  0D10               	mullw	16
  1595  001304  50F3               	movf	prodl,w,c
  1596  001306  0F60               	addlw	low _key
  1597  001308  6ED9               	movwf	fsr2l,c
  1598  00130A  6ADA               	clrf	fsr2h,c
  1599  00130C  D801               	call	u2268
  1600  00130E  D00A               	goto	u2269
  1601  001310                     u2268:
  1602  001310  0005               	push	
  1603  001312  6EFA               	movwf	pclath,c
  1604  001314  50DE               	movf	postinc2,w,c
  1605  001316  6EFD               	movwf	tosl,c
  1606  001318  50DE               	movf	postinc2,w,c
  1607  00131A  6EFE               	movwf	tosh,c
  1608  00131C  50F8               	movf	tblptru,w,c
  1609  00131E  6EFF               	movwf	tosu,c
  1610  001320  50FA               	movf	pclath,w,c
  1611  001322  0012               	return		;indir
  1612  001324                     u2269:
  1613  001324  0900               	iorlw	0
  1614  001326  B4D8               	btfsc	status,2,c
  1615  001328  D008               	goto	l2587
  1616  00132A                     u2270:
  1617                           
  1618                           ;ikb.c: 468: {;ikb.c: 469: key[k].sm0--;
  1619  00132A  500C               	movf	ikey_scan@k,w,c
  1620  00132C  0D10               	mullw	16
  1621  00132E  50F3               	movf	prodl,w,c
  1622  001330  0F64               	addlw	low (_key+4)
  1623  001332  6ED9               	movwf	fsr2l,c
  1624  001334  6ADA               	clrf	fsr2h,c
  1625  001336  06DF               	decf	indf2,f,c
  1626                           
  1627                           ;ikb.c: 470: }
  1628  001338  D072               	goto	l2607
  1629  00133A                     l2587:
  1630                           
  1631                           ;ikb.c: 471: else;ikb.c: 472: {;ikb.c: 473: key[k].bf.state = 1;
  1632  00133A  500C               	movf	ikey_scan@k,w,c
  1633  00133C  0D10               	mullw	16
  1634  00133E  50F3               	movf	prodl,w,c
  1635  001340  0F6A               	addlw	low (_key+10)
  1636  001342  6ED9               	movwf	fsr2l,c
  1637  001344  6ADA               	clrf	fsr2h,c
  1638  001346  0100               	movlb	0	; () banked
  1639  001348  80DF               	bsf	indf2,0,c
  1640  00134A                     L1:
  1641                           
  1642                           ;ikb.c: 474: key[k].sm0++;
  1643  00134A  500C               	movf	ikey_scan@k,w,c
  1644  00134C  0D10               	mullw	16
  1645  00134E  50F3               	movf	prodl,w,c
  1646  001350  0F64               	addlw	low (_key+4)
  1647  001352  6ED9               	movwf	fsr2l,c
  1648  001354  6ADA               	clrf	fsr2h,c
  1649  001356  2ADF               	incf	indf2,f,c
  1650  001358  D062               	goto	l2607
  1651  00135A                     l2589:
  1652                           
  1653                           ;ikb.c: 478: else if (key[k].sm0 == 2)
  1654  00135A  500C               	movf	ikey_scan@k,w,c
  1655  00135C  0D10               	mullw	16
  1656  00135E  50F3               	movf	prodl,w,c
  1657  001360  0F64               	addlw	low (_key+4)
  1658  001362  6ED9               	movwf	fsr2l,c
  1659  001364  6ADA               	clrf	fsr2h,c
  1660  001366  0E02               	movlw	2
  1661  001368  18DE               	xorwf	postinc2,w,c
  1662  00136A  A4D8               	btfss	status,2,c
  1663  00136C  D016               	goto	l2595
  1664                           
  1665                           ;ikb.c: 479: {;ikb.c: 480: if (key[k].keyRead() == 1)
  1666  00136E  500C               	movf	ikey_scan@k,w,c
  1667  001370  0D10               	mullw	16
  1668  001372  50F3               	movf	prodl,w,c
  1669  001374  0F60               	addlw	low _key
  1670  001376  6ED9               	movwf	fsr2l,c
  1671  001378  6ADA               	clrf	fsr2h,c
  1672  00137A  D801               	call	u2298
  1673  00137C  D00A               	goto	u2299
  1674  00137E                     u2298:
  1675  00137E  0005               	push	
  1676  001380  6EFA               	movwf	pclath,c
  1677  001382  50DE               	movf	postinc2,w,c
  1678  001384  6EFD               	movwf	tosl,c
  1679  001386  50DE               	movf	postinc2,w,c
  1680  001388  6EFE               	movwf	tosh,c
  1681  00138A  50F8               	movf	tblptru,w,c
  1682  00138C  6EFF               	movwf	tosu,c
  1683  00138E  50FA               	movf	pclath,w,c
  1684  001390  0012               	return		;indir
  1685  001392                     u2299:
  1686  001392  06E8               	decf	wreg,f,c
  1687  001394  B4D8               	btfsc	status,2,c
  1688  001396  D7D9               	goto	L1
  1689  001398  D042               	goto	l2607
  1690  00139A                     l2595:
  1691                           
  1692                           ;ikb.c: 483: else if (key[k].sm0 == 3)
  1693  00139A  500C               	movf	ikey_scan@k,w,c
  1694  00139C  0D10               	mullw	16
  1695  00139E  50F3               	movf	prodl,w,c
  1696  0013A0  0F64               	addlw	low (_key+4)
  1697  0013A2  6ED9               	movwf	fsr2l,c
  1698  0013A4  6ADA               	clrf	fsr2h,c
  1699  0013A6  0E03               	movlw	3
  1700  0013A8  18DE               	xorwf	postinc2,w,c
  1701  0013AA  A4D8               	btfss	status,2,c
  1702  0013AC  D038               	goto	l2607
  1703                           
  1704                           ;ikb.c: 484: {;ikb.c: 485: if (++key[k].counter0 == 4)
  1705  0013AE  500C               	movf	ikey_scan@k,w,c
  1706  0013B0  0D10               	mullw	16
  1707  0013B2  50F3               	movf	prodl,w,c
  1708  0013B4  0F65               	addlw	low (_key+5)
  1709  0013B6  6ED9               	movwf	fsr2l,c
  1710  0013B8  6ADA               	clrf	fsr2h,c
  1711  0013BA  2ADF               	incf	indf2,f,c
  1712  0013BC  0E04               	movlw	4
  1713  0013BE  18DE               	xorwf	postinc2,w,c
  1714  0013C0  A4D8               	btfss	status,2,c
  1715  0013C2  D02D               	goto	l2607
  1716                           
  1717                           ;ikb.c: 486: {;ikb.c: 487: key[k].counter0 = 0x00;
  1718  0013C4  500C               	movf	ikey_scan@k,w,c
  1719  0013C6  0D10               	mullw	16
  1720  0013C8  50F3               	movf	prodl,w,c
  1721  0013CA  0F65               	addlw	low (_key+5)
  1722  0013CC  6ED9               	movwf	fsr2l,c
  1723  0013CE  6ADA               	clrf	fsr2h,c
  1724  0013D0  0E00               	movlw	0
  1725  0013D2  6EDF               	movwf	indf2,c
  1726                           
  1727                           ;ikb.c: 489: if (key[k].keyRead() != 1)
  1728  0013D4  500C               	movf	ikey_scan@k,w,c
  1729  0013D6  0D10               	mullw	16
  1730  0013D8  50F3               	movf	prodl,w,c
  1731  0013DA  0F60               	addlw	low _key
  1732  0013DC  6ED9               	movwf	fsr2l,c
  1733  0013DE  6ADA               	clrf	fsr2h,c
  1734  0013E0  D801               	call	u2338
  1735  0013E2  D00A               	goto	u2339
  1736  0013E4                     u2338:
  1737  0013E4  0005               	push	
  1738  0013E6  6EFA               	movwf	pclath,c
  1739  0013E8  50DE               	movf	postinc2,w,c
  1740  0013EA  6EFD               	movwf	tosl,c
  1741  0013EC  50DE               	movf	postinc2,w,c
  1742  0013EE  6EFE               	movwf	tosh,c
  1743  0013F0  50F8               	movf	tblptru,w,c
  1744  0013F2  6EFF               	movwf	tosu,c
  1745  0013F4  50FA               	movf	pclath,w,c
  1746  0013F6  0012               	return		;indir
  1747  0013F8                     u2339:
  1748  0013F8  06E8               	decf	wreg,f,c
  1749  0013FA  A4D8               	btfss	status,2,c
  1750  0013FC  D796               	goto	u2270
  1751                           
  1752                           ;ikb.c: 493: else;ikb.c: 494: {;ikb.c: 495: key[k].bf.state = 0;
  1753  0013FE  500C               	movf	ikey_scan@k,w,c
  1754  001400  0D10               	mullw	16
  1755  001402  50F3               	movf	prodl,w,c
  1756  001404  0F6A               	addlw	low (_key+10)
  1757  001406  6ED9               	movwf	fsr2l,c
  1758  001408  6ADA               	clrf	fsr2h,c
  1759  00140A  0100               	movlb	0	; () banked
  1760  00140C  90DF               	bcf	indf2,0,c
  1761                           
  1762                           ;ikb.c: 496: key[k].sm0 = 0x00;
  1763  00140E  500C               	movf	ikey_scan@k,w,c
  1764  001410  0D10               	mullw	16
  1765  001412  50F3               	movf	prodl,w,c
  1766  001414  0F64               	addlw	low (_key+4)
  1767  001416  6ED9               	movwf	fsr2l,c
  1768  001418  6ADA               	clrf	fsr2h,c
  1769  00141A  0E00               	movlw	0
  1770  00141C  6EDF               	movwf	indf2,c
  1771  00141E                     l2607:
  1772                           
  1773                           ;ikb.c: 497: };ikb.c: 498: };ikb.c: 499: };ikb.c: 500: }while (--k >= 0);
  1774  00141E  060C               	decf	ikey_scan@k,f,c
  1775  001420  BE0C               	btfsc	ikey_scan@k,7,c
  1776  001422  0012               	return	
  1777  001424  D732               	goto	l2571
  1778  001426                     __end_of_ikey_scan:
  1779                           	opt callstack 0
  1780                           
  1781 ;; *************** function _keyRead_pin_key4 *****************
  1782 ;; Defined at:
  1783 ;;		line 206 in file "../../../../../../FIRWAR/eslibrary/ikb/ikb.c"
  1784 ;; Parameters:    Size  Location     Type
  1785 ;;		None
  1786 ;; Auto vars:     Size  Location     Type
  1787 ;;		None
  1788 ;; Return value:  Size  Location     Type
  1789 ;;                  1    wreg      unsigned char 
  1790 ;; Registers used:
  1791 ;;		wreg, status,2, status,0
  1792 ;; Tracked objects:
  1793 ;;		On entry : 0/0
  1794 ;;		On exit  : 0/0
  1795 ;;		Unchanged: 0/0
  1796 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1797 ;;      Params:         0       0       0       0       0       0       0       0       0
  1798 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1799 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1800 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1801 ;;Total ram usage:        0 bytes
  1802 ;; Hardware stack levels used:    1
  1803 ;; Hardware stack levels required when called:    5
  1804 ;; This function calls:
  1805 ;;		Nothing
  1806 ;; This function is called by:
  1807 ;;		_ikb_init
  1808 ;;		_ikey_scan
  1809 ;; This function uses a non-reentrant model
  1810 ;;
  1811                           
  1812                           	psect	text10
  1813  001FF8                     __ptext10:
  1814                           	opt callstack 0
  1815  001FF8                     _keyRead_pin_key4:
  1816                           	opt callstack 23
  1817                           
  1818                           ;ikb.c: 208: return ((PORTC & (1<<7))>>7);
  1819                           
  1820                           ;incstack = 0
  1821  001FF8  4482               	rlncf	3970,w,c	;volatile
  1822  001FFA  0B01               	andlw	1
  1823  001FFC  0012               	return		;funcret
  1824  001FFE                     __end_of_keyRead_pin_key4:
  1825                           	opt callstack 0
  1826                           
  1827 ;; *************** function _keyRead_pin_key3 *****************
  1828 ;; Defined at:
  1829 ;;		line 202 in file "../../../../../../FIRWAR/eslibrary/ikb/ikb.c"
  1830 ;; Parameters:    Size  Location     Type
  1831 ;;		None
  1832 ;; Auto vars:     Size  Location     Type
  1833 ;;		None
  1834 ;; Return value:  Size  Location     Type
  1835 ;;                  1    wreg      unsigned char 
  1836 ;; Registers used:
  1837 ;;		wreg, status,2, status,0
  1838 ;; Tracked objects:
  1839 ;;		On entry : 0/0
  1840 ;;		On exit  : 0/0
  1841 ;;		Unchanged: 0/0
  1842 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1843 ;;      Params:         0       0       0       0       0       0       0       0       0
  1844 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1845 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1846 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1847 ;;Total ram usage:        0 bytes
  1848 ;; Hardware stack levels used:    1
  1849 ;; Hardware stack levels required when called:    5
  1850 ;; This function calls:
  1851 ;;		Nothing
  1852 ;; This function is called by:
  1853 ;;		_ikb_init
  1854 ;;		_ikey_scan
  1855 ;; This function uses a non-reentrant model
  1856 ;;
  1857                           
  1858                           	psect	text11
  1859  001FCA                     __ptext11:
  1860                           	opt callstack 0
  1861  001FCA                     _keyRead_pin_key3:
  1862                           	opt callstack 23
  1863                           
  1864                           ;ikb.c: 204: return ((PORTC & (1<<6))>>6);
  1865                           
  1866                           ;incstack = 0
  1867  001FCA  4482               	rlncf	3970,w,c	;volatile
  1868  001FCC  46E8               	rlncf	wreg,f,c
  1869  001FCE  0B03               	andlw	3
  1870  001FD0  0B01               	andlw	1
  1871  001FD2  0012               	return		;funcret
  1872  001FD4                     __end_of_keyRead_pin_key3:
  1873                           	opt callstack 0
  1874                           
  1875 ;; *************** function _keyRead_pin_key2 *****************
  1876 ;; Defined at:
  1877 ;;		line 198 in file "../../../../../../FIRWAR/eslibrary/ikb/ikb.c"
  1878 ;; Parameters:    Size  Location     Type
  1879 ;;		None
  1880 ;; Auto vars:     Size  Location     Type
  1881 ;;		None
  1882 ;; Return value:  Size  Location     Type
  1883 ;;                  1    wreg      unsigned char 
  1884 ;; Registers used:
  1885 ;;		wreg, status,2, status,0
  1886 ;; Tracked objects:
  1887 ;;		On entry : 0/0
  1888 ;;		On exit  : 0/0
  1889 ;;		Unchanged: 0/0
  1890 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1891 ;;      Params:         0       0       0       0       0       0       0       0       0
  1892 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1893 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1894 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1895 ;;Total ram usage:        0 bytes
  1896 ;; Hardware stack levels used:    1
  1897 ;; Hardware stack levels required when called:    5
  1898 ;; This function calls:
  1899 ;;		Nothing
  1900 ;; This function is called by:
  1901 ;;		_ikb_init
  1902 ;;		_ikey_scan
  1903 ;; This function uses a non-reentrant model
  1904 ;;
  1905                           
  1906                           	psect	text12
  1907  001FD4                     __ptext12:
  1908                           	opt callstack 0
  1909  001FD4                     _keyRead_pin_key2:
  1910                           	opt callstack 23
  1911                           
  1912                           ;ikb.c: 200: return ((PORTC & (1<<5))>>5);
  1913                           
  1914                           ;incstack = 0
  1915  001FD4  3882               	swapf	3970,w,c	;volatile
  1916  001FD6  42E8               	rrncf	wreg,f,c
  1917  001FD8  0B07               	andlw	7
  1918  001FDA  0B01               	andlw	1
  1919  001FDC  0012               	return		;funcret
  1920  001FDE                     __end_of_keyRead_pin_key2:
  1921                           	opt callstack 0
  1922                           
  1923 ;; *************** function _keyRead_pin_key1 *****************
  1924 ;; Defined at:
  1925 ;;		line 194 in file "../../../../../../FIRWAR/eslibrary/ikb/ikb.c"
  1926 ;; Parameters:    Size  Location     Type
  1927 ;;		None
  1928 ;; Auto vars:     Size  Location     Type
  1929 ;;		None
  1930 ;; Return value:  Size  Location     Type
  1931 ;;                  1    wreg      unsigned char 
  1932 ;; Registers used:
  1933 ;;		wreg, status,2, status,0
  1934 ;; Tracked objects:
  1935 ;;		On entry : 0/0
  1936 ;;		On exit  : 0/0
  1937 ;;		Unchanged: 0/0
  1938 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1939 ;;      Params:         0       0       0       0       0       0       0       0       0
  1940 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1941 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1942 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1943 ;;Total ram usage:        0 bytes
  1944 ;; Hardware stack levels used:    1
  1945 ;; Hardware stack levels required when called:    5
  1946 ;; This function calls:
  1947 ;;		Nothing
  1948 ;; This function is called by:
  1949 ;;		_ikb_init
  1950 ;;		_ikey_scan
  1951 ;; This function uses a non-reentrant model
  1952 ;;
  1953                           
  1954                           	psect	text13
  1955  001FE8                     __ptext13:
  1956                           	opt callstack 0
  1957  001FE8                     _keyRead_pin_key1:
  1958                           	opt callstack 23
  1959                           
  1960                           ;ikb.c: 196: return ((PORTC & (1<<4))>>4);
  1961                           
  1962                           ;incstack = 0
  1963  001FE8  3882               	swapf	3970,w,c	;volatile
  1964  001FEA  0B0F               	andlw	15
  1965  001FEC  0B01               	andlw	1
  1966  001FEE  0012               	return		;funcret
  1967  001FF0                     __end_of_keyRead_pin_key1:
  1968                           	opt callstack 0
  1969                           
  1970 ;; *************** function _keyRead_pin_key5 *****************
  1971 ;; Defined at:
  1972 ;;		line 210 in file "../../../../../../FIRWAR/eslibrary/ikb/ikb.c"
  1973 ;; Parameters:    Size  Location     Type
  1974 ;;		None
  1975 ;; Auto vars:     Size  Location     Type
  1976 ;;		None
  1977 ;; Return value:  Size  Location     Type
  1978 ;;                  1    wreg      unsigned char 
  1979 ;; Registers used:
  1980 ;;		wreg, status,2, status,0
  1981 ;; Tracked objects:
  1982 ;;		On entry : 0/0
  1983 ;;		On exit  : 0/0
  1984 ;;		Unchanged: 0/0
  1985 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1986 ;;      Params:         0       0       0       0       0       0       0       0       0
  1987 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1988 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1989 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1990 ;;Total ram usage:        0 bytes
  1991 ;; Hardware stack levels used:    1
  1992 ;; Hardware stack levels required when called:    5
  1993 ;; This function calls:
  1994 ;;		Nothing
  1995 ;; This function is called by:
  1996 ;;		_ikb_init
  1997 ;;		_ikey_scan
  1998 ;; This function uses a non-reentrant model
  1999 ;;
  2000                           
  2001                           	psect	text14
  2002  001FF0                     __ptext14:
  2003                           	opt callstack 0
  2004  001FF0                     _keyRead_pin_key5:
  2005                           	opt callstack 23
  2006                           
  2007                           ;ikb.c: 212: return ((PORTD & (1<<4))>>4);
  2008                           
  2009                           ;incstack = 0
  2010  001FF0  3883               	swapf	3971,w,c	;volatile
  2011  001FF2  0B0F               	andlw	15
  2012  001FF4  0B01               	andlw	1
  2013  001FF6  0012               	return		;funcret
  2014  001FF8                     __end_of_keyRead_pin_key5:
  2015                           	opt callstack 0
  2016                           
  2017 ;; *************** function _ikey_parsing *****************
  2018 ;; Defined at:
  2019 ;;		line 545 in file "../../../../../../FIRWAR/eslibrary/ikb/ikb.c"
  2020 ;; Parameters:    Size  Location     Type
  2021 ;;		None
  2022 ;; Auto vars:     Size  Location     Type
  2023 ;;  k               1   34[COMRAM] unsigned char 
  2024 ;; Return value:  Size  Location     Type
  2025 ;;                  1    wreg      void 
  2026 ;; Registers used:
  2027 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2028 ;; Tracked objects:
  2029 ;;		On entry : 0/0
  2030 ;;		On exit  : 0/0
  2031 ;;		Unchanged: 0/0
  2032 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2033 ;;      Params:         0       0       0       0       0       0       0       0       0
  2034 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2035 ;;      Temps:          4       0       0       0       0       0       0       0       0
  2036 ;;      Totals:         5       0       0       0       0       0       0       0       0
  2037 ;;Total ram usage:        5 bytes
  2038 ;; Hardware stack levels used:    1
  2039 ;; Hardware stack levels required when called:    7
  2040 ;; This function calls:
  2041 ;;		___ftge
  2042 ;;		___lwtoft
  2043 ;;		_ikey_is_accessible
  2044 ;; This function is called by:
  2045 ;;		_ikb_job
  2046 ;; This function uses a non-reentrant model
  2047 ;;
  2048                           
  2049                           	psect	text15
  2050  00080E                     __ptext15:
  2051                           	opt callstack 0
  2052  00080E                     _ikey_parsing:
  2053                           	opt callstack 22
  2054                           
  2055                           ;ikb.c: 547: uint8_t k;;ikb.c: 549: for (k=0; k < 5; k++)
  2056                           
  2057                           ;incstack = 0
  2058  00080E  0E00               	movlw	0
  2059  000810  6E23               	movwf	ikey_parsing@k,c
  2060  000812                     l3473:
  2061                           
  2062                           ;ikb.c: 550: {;ikb.c: 551: if ( key[k].sm1 == (0) )
  2063  000812  5023               	movf	ikey_parsing@k,w,c
  2064  000814  0D10               	mullw	16
  2065  000816  50F3               	movf	prodl,w,c
  2066  000818  0F66               	addlw	low (_key+6)
  2067  00081A  6ED9               	movwf	fsr2l,c
  2068  00081C  6ADA               	clrf	fsr2h,c
  2069  00081E  50DF               	movf	indf2,w,c
  2070  000820  A4D8               	btfss	status,2,c
  2071  000822  D08B               	goto	l240
  2072                           
  2073                           ;ikb.c: 552: {;ikb.c: 553: if ( ikey_is_accessible(k) )
  2074  000824  5023               	movf	ikey_parsing@k,w,c
  2075  000826  ECF8  F00D         	call	_ikey_is_accessible
  2076  00082A  0900               	iorlw	0
  2077  00082C  B4D8               	btfsc	status,2,c
  2078  00082E  D085               	goto	l240
  2079                           
  2080                           ;ikb.c: 554: {;ikb.c: 555: if (key[k].bf.state == 1)
  2081  000830  5023               	movf	ikey_parsing@k,w,c
  2082  000832  0D10               	mullw	16
  2083  000834  50F3               	movf	prodl,w,c
  2084  000836  0F6A               	addlw	low (_key+10)
  2085  000838  6ED9               	movwf	fsr2l,c
  2086  00083A  6ADA               	clrf	fsr2h,c
  2087  00083C  0100               	movlb	0	; () banked
  2088  00083E  A0DF               	btfss	indf2,0,c
  2089  000840  D07C               	goto	l240
  2090                           
  2091                           ; BSR set to: 0
  2092                           ;ikb.c: 556: {;ikb.c: 558: if (key[k].bf.OnKeyPressed)
  2093  000842  5023               	movf	ikey_parsing@k,w,c
  2094  000844  0D10               	mullw	16
  2095  000846  50F3               	movf	prodl,w,c
  2096  000848  0F6A               	addlw	low (_key+10)
  2097  00084A  6ED9               	movwf	fsr2l,c
  2098  00084C  6ADA               	clrf	fsr2h,c
  2099  00084E  A2DF               	btfss	indf2,1,c
  2100  000850  D01F               	goto	l3487
  2101                           
  2102                           ; BSR set to: 0
  2103                           ;ikb.c: 559: {;ikb.c: 560: key[k].bf.ReadyToRead = 1;
  2104  000852  5023               	movf	ikey_parsing@k,w,c
  2105  000854  0D10               	mullw	16
  2106  000856  50F3               	movf	prodl,w,c
  2107  000858  0F6A               	addlw	low (_key+10)
  2108  00085A  6ED9               	movwf	fsr2l,c
  2109  00085C  6ADA               	clrf	fsr2h,c
  2110  00085E  8CDF               	bsf	indf2,6,c
  2111                           
  2112                           ;ikb.c: 562: if (key[k].bf.Reptt)
  2113  000860  5023               	movf	ikey_parsing@k,w,c
  2114  000862  0D10               	mullw	16
  2115  000864  50F3               	movf	prodl,w,c
  2116  000866  0F6A               	addlw	low (_key+10)
  2117  000868  6ED9               	movwf	fsr2l,c
  2118  00086A  6ADA               	clrf	fsr2h,c
  2119  00086C  AADF               	btfss	indf2,5,c
  2120  00086E  D008               	goto	l3485
  2121                           
  2122                           ; BSR set to: 0
  2123                           ;ikb.c: 563: {;ikb.c: 564: key[k].sm1 = (6);
  2124  000870  5023               	movf	ikey_parsing@k,w,c
  2125  000872  0D10               	mullw	16
  2126  000874  50F3               	movf	prodl,w,c
  2127  000876  0F66               	addlw	low (_key+6)
  2128  000878  6ED9               	movwf	fsr2l,c
  2129  00087A  6ADA               	clrf	fsr2h,c
  2130  00087C  0E06               	movlw	6
  2131  00087E  D037               	goto	L2
  2132  000880                     l3485:
  2133                           
  2134                           ; BSR set to: 0
  2135                           ;ikb.c: 566: else;ikb.c: 567: {;ikb.c: 568: key[k].sm1 = (1);
  2136  000880  5023               	movf	ikey_parsing@k,w,c
  2137  000882  0D10               	mullw	16
  2138  000884  50F3               	movf	prodl,w,c
  2139  000886  0F66               	addlw	low (_key+6)
  2140  000888  6ED9               	movwf	fsr2l,c
  2141  00088A  6ADA               	clrf	fsr2h,c
  2142  00088C  0E01               	movlw	1
  2143  00088E  D02F               	goto	L2
  2144  000890                     l3487:
  2145                           
  2146                           ; BSR set to: 0
  2147                           ;ikb.c: 571: else if ( key[k].bf.OnKeyPressedAndKeyRelease)
  2148  000890  5023               	movf	ikey_parsing@k,w,c
  2149  000892  0D10               	mullw	16
  2150  000894  50F3               	movf	prodl,w,c
  2151  000896  0F6A               	addlw	low (_key+10)
  2152  000898  6ED9               	movwf	fsr2l,c
  2153  00089A  6ADA               	clrf	fsr2h,c
  2154  00089C  A4DF               	btfss	indf2,2,c
  2155  00089E  D008               	goto	l3491
  2156                           
  2157                           ; BSR set to: 0
  2158                           ;ikb.c: 572: {;ikb.c: 573: key[k].sm1 = (5);
  2159  0008A0  5023               	movf	ikey_parsing@k,w,c
  2160  0008A2  0D10               	mullw	16
  2161  0008A4  50F3               	movf	prodl,w,c
  2162  0008A6  0F66               	addlw	low (_key+6)
  2163  0008A8  6ED9               	movwf	fsr2l,c
  2164  0008AA  6ADA               	clrf	fsr2h,c
  2165  0008AC  0E05               	movlw	5
  2166  0008AE  D01F               	goto	L2
  2167  0008B0                     l3491:
  2168                           
  2169                           ; BSR set to: 0
  2170                           ;ikb.c: 576: else if (key[k].bf.AtTimeExpired)
  2171  0008B0  5023               	movf	ikey_parsing@k,w,c
  2172  0008B2  0D10               	mullw	16
  2173  0008B4  50F3               	movf	prodl,w,c
  2174  0008B6  0F6A               	addlw	low (_key+10)
  2175  0008B8  6ED9               	movwf	fsr2l,c
  2176  0008BA  6ADA               	clrf	fsr2h,c
  2177  0008BC  A6DF               	btfss	indf2,3,c
  2178  0008BE  D008               	goto	l3495
  2179                           
  2180                           ; BSR set to: 0
  2181                           ;ikb.c: 577: {;ikb.c: 578: key[k].sm1 = (3);
  2182  0008C0  5023               	movf	ikey_parsing@k,w,c
  2183  0008C2  0D10               	mullw	16
  2184  0008C4  50F3               	movf	prodl,w,c
  2185  0008C6  0F66               	addlw	low (_key+6)
  2186  0008C8  6ED9               	movwf	fsr2l,c
  2187  0008CA  6ADA               	clrf	fsr2h,c
  2188  0008CC  0E03               	movlw	3
  2189  0008CE  D00F               	goto	L2
  2190  0008D0                     l3495:
  2191                           
  2192                           ; BSR set to: 0
  2193                           ;ikb.c: 580: else if (key[k].bf.AtTimeExpired2)
  2194  0008D0  5023               	movf	ikey_parsing@k,w,c
  2195  0008D2  0D10               	mullw	16
  2196  0008D4  50F3               	movf	prodl,w,c
  2197  0008D6  0F6A               	addlw	low (_key+10)
  2198  0008D8  6ED9               	movwf	fsr2l,c
  2199  0008DA  6ADA               	clrf	fsr2h,c
  2200  0008DC  A8DF               	btfss	indf2,4,c
  2201  0008DE  D008               	goto	l246
  2202                           
  2203                           ; BSR set to: 0
  2204                           ;ikb.c: 581: {;ikb.c: 582: key[k].sm1 = (4);
  2205  0008E0  5023               	movf	ikey_parsing@k,w,c
  2206  0008E2  0D10               	mullw	16
  2207  0008E4  50F3               	movf	prodl,w,c
  2208  0008E6  0F66               	addlw	low (_key+6)
  2209  0008E8  6ED9               	movwf	fsr2l,c
  2210  0008EA  6ADA               	clrf	fsr2h,c
  2211  0008EC  0E04               	movlw	4
  2212  0008EE                     L2:
  2213  0008EE  6EDF               	movwf	indf2,c
  2214  0008F0                     l246:
  2215                           
  2216                           ; BSR set to: 0
  2217                           ;ikb.c: 583: };ikb.c: 586: key[k].bf.InProcessing = 1;
  2218  0008F0  5023               	movf	ikey_parsing@k,w,c
  2219  0008F2  0D10               	mullw	16
  2220  0008F4  50F3               	movf	prodl,w,c
  2221  0008F6  0F6B               	addlw	low (_key+11)
  2222  0008F8  6ED9               	movwf	fsr2l,c
  2223  0008FA  6ADA               	clrf	fsr2h,c
  2224  0008FC  82DF               	bsf	indf2,1,c
  2225                           
  2226                           ;ikb.c: 591: if (key[k].num_group_x != 0)
  2227  0008FE  5023               	movf	ikey_parsing@k,w,c
  2228  000900  0D10               	mullw	16
  2229  000902  50F3               	movf	prodl,w,c
  2230  000904  0F69               	addlw	low (_key+9)
  2231  000906  6ED9               	movwf	fsr2l,c
  2232  000908  6ADA               	clrf	fsr2h,c
  2233  00090A  50DF               	movf	indf2,w,c
  2234  00090C  B4D8               	btfsc	status,2,c
  2235  00090E  D015               	goto	l240
  2236                           
  2237                           ; BSR set to: 0
  2238                           ;ikb.c: 592: {;ikb.c: 593: group_x[ key[k].num_group_x ] = 1;
  2239  000910  5023               	movf	ikey_parsing@k,w,c
  2240  000912  0D10               	mullw	16
  2241  000914  50F3               	movf	prodl,w,c
  2242  000916  0F69               	addlw	low (_key+9)
  2243  000918  6ED9               	movwf	fsr2l,c
  2244  00091A  6ADA               	clrf	fsr2h,c
  2245  00091C  50DF               	movf	indf2,w,c
  2246  00091E  6E1F               	movwf	??_ikey_parsing& (0+255),c
  2247  000920  501F               	movf	??_ikey_parsing,w,c
  2248  000922  0FB0               	addlw	low _group_x
  2249  000924  6ED9               	movwf	fsr2l,c
  2250  000926  6ADA               	clrf	fsr2h,c
  2251  000928  0E01               	movlw	1
  2252  00092A  6EDF               	movwf	indf2,c
  2253                           
  2254                           ;ikb.c: 594: key[k].bf.OwnerOfGroup = 1;
  2255  00092C  5023               	movf	ikey_parsing@k,w,c
  2256  00092E  0D10               	mullw	16
  2257  000930  50F3               	movf	prodl,w,c
  2258  000932  0F6B               	addlw	low (_key+11)
  2259  000934  6ED9               	movwf	fsr2l,c
  2260  000936  6ADA               	clrf	fsr2h,c
  2261  000938  80DF               	bsf	indf2,0,c
  2262  00093A                     l240:
  2263                           
  2264                           ;ikb.c: 595: };ikb.c: 597: };ikb.c: 598: };ikb.c: 599: };ikb.c: 603: if ( (key[k].sm1 >=
      +                           (6) ) && (key[k].sm1 <= (8)))
  2265  00093A  5023               	movf	ikey_parsing@k,w,c
  2266  00093C  0D10               	mullw	16
  2267  00093E  50F3               	movf	prodl,w,c
  2268  000940  0F66               	addlw	low (_key+6)
  2269  000942  6ED9               	movwf	fsr2l,c
  2270  000944  6ADA               	clrf	fsr2h,c
  2271  000946  0E05               	movlw	5
  2272  000948  64DF               	cpfsgt	indf2,c
  2273  00094A  D024               	goto	l253
  2274  00094C  5023               	movf	ikey_parsing@k,w,c
  2275  00094E  0D10               	mullw	16
  2276  000950  50F3               	movf	prodl,w,c
  2277  000952  0F66               	addlw	low (_key+6)
  2278  000954  6ED9               	movwf	fsr2l,c
  2279  000956  6ADA               	clrf	fsr2h,c
  2280  000958  0E09               	movlw	9
  2281  00095A  60DF               	cpfslt	indf2,c
  2282  00095C  D01B               	goto	l253
  2283                           
  2284                           ;ikb.c: 604: {;ikb.c: 605: if (key[k].bf.state == 0)
  2285  00095E  5023               	movf	ikey_parsing@k,w,c
  2286  000960  0D10               	mullw	16
  2287  000962  50F3               	movf	prodl,w,c
  2288  000964  0F6A               	addlw	low (_key+10)
  2289  000966  6ED9               	movwf	fsr2l,c
  2290  000968  6ADA               	clrf	fsr2h,c
  2291  00096A  0100               	movlb	0	; () banked
  2292  00096C  B0DF               	btfsc	indf2,0,c
  2293  00096E  D012               	goto	l253
  2294                           
  2295                           ; BSR set to: 0
  2296                           ;ikb.c: 606: {;ikb.c: 607: key[k].counter1 = 0;
  2297  000970  5023               	movf	ikey_parsing@k,w,c
  2298  000972  0D10               	mullw	16
  2299  000974  50F3               	movf	prodl,w,c
  2300  000976  0F67               	addlw	low (_key+7)
  2301  000978  6ED9               	movwf	fsr2l,c
  2302  00097A  6ADA               	clrf	fsr2h,c
  2303  00097C  0E00               	movlw	0
  2304  00097E  6EDE               	movwf	postinc2,c
  2305  000980  0E00               	movlw	0
  2306  000982  6EDD               	movwf	postdec2,c
  2307                           
  2308                           ;ikb.c: 608: key[k].sm1 = (2);
  2309  000984  5023               	movf	ikey_parsing@k,w,c
  2310  000986  0D10               	mullw	16
  2311  000988  50F3               	movf	prodl,w,c
  2312  00098A  0F66               	addlw	low (_key+6)
  2313  00098C  6ED9               	movwf	fsr2l,c
  2314  00098E  6ADA               	clrf	fsr2h,c
  2315  000990  0E02               	movlw	2
  2316  000992  6EDF               	movwf	indf2,c
  2317  000994                     l253:
  2318                           
  2319                           ;ikb.c: 609: };ikb.c: 610: };ikb.c: 612: if (key[k].sm1 == (6) )
  2320  000994  5023               	movf	ikey_parsing@k,w,c
  2321  000996  0D10               	mullw	16
  2322  000998  50F3               	movf	prodl,w,c
  2323  00099A  0F66               	addlw	low (_key+6)
  2324  00099C  6ED9               	movwf	fsr2l,c
  2325  00099E  6ADA               	clrf	fsr2h,c
  2326  0009A0  0E06               	movlw	6
  2327  0009A2  18DE               	xorwf	postinc2,w,c
  2328  0009A4  A4D8               	btfss	status,2,c
  2329  0009A6  D027               	goto	l255
  2330                           
  2331                           ;ikb.c: 613: {;ikb.c: 614: if ( ++key[k].counter1 >= key[k].repp.to_start)
  2332  0009A8  5023               	movf	ikey_parsing@k,w,c
  2333  0009AA  0D10               	mullw	16
  2334  0009AC  50F3               	movf	prodl,w,c
  2335  0009AE  0F6C               	addlw	low (_key+12)
  2336  0009B0  6ED9               	movwf	fsr2l,c
  2337  0009B2  6ADA               	clrf	fsr2h,c
  2338  0009B4  5023               	movf	ikey_parsing@k,w,c
  2339  0009B6  0D10               	mullw	16
  2340  0009B8  50F3               	movf	prodl,w,c
  2341  0009BA  0F67               	addlw	low (_key+7)
  2342  0009BC  6EE1               	movwf	fsr1l,c
  2343  0009BE  6AE2               	clrf	fsr1h,c
  2344  0009C0  2AE6               	incf	postinc1,f,c
  2345  0009C2  0E00               	movlw	0
  2346  0009C4  22E5               	addwfc	postdec1,f,c
  2347  0009C6  50DE               	movf	postinc2,w,c
  2348  0009C8  5CE6               	subwf	postinc1,w,c
  2349  0009CA  50DE               	movf	postinc2,w,c
  2350  0009CC  58E6               	subwfb	postinc1,w,c
  2351  0009CE  A0D8               	btfss	status,0,c
  2352  0009D0  D012               	goto	l255
  2353                           
  2354                           ;ikb.c: 615: {;ikb.c: 616: key[k].counter1 =0;
  2355  0009D2  5023               	movf	ikey_parsing@k,w,c
  2356  0009D4  0D10               	mullw	16
  2357  0009D6  50F3               	movf	prodl,w,c
  2358  0009D8  0F67               	addlw	low (_key+7)
  2359  0009DA  6ED9               	movwf	fsr2l,c
  2360  0009DC  6ADA               	clrf	fsr2h,c
  2361  0009DE  0E00               	movlw	0
  2362  0009E0  6EDE               	movwf	postinc2,c
  2363  0009E2  0E00               	movlw	0
  2364  0009E4  6EDD               	movwf	postdec2,c
  2365                           
  2366                           ;ikb.c: 617: key[k].sm1 = (7);
  2367  0009E6  5023               	movf	ikey_parsing@k,w,c
  2368  0009E8  0D10               	mullw	16
  2369  0009EA  50F3               	movf	prodl,w,c
  2370  0009EC  0F66               	addlw	low (_key+6)
  2371  0009EE  6ED9               	movwf	fsr2l,c
  2372  0009F0  6ADA               	clrf	fsr2h,c
  2373  0009F2  0E07               	movlw	7
  2374  0009F4  6EDF               	movwf	indf2,c
  2375  0009F6                     l255:
  2376                           
  2377                           ;ikb.c: 618: };ikb.c: 619: };ikb.c: 620: if (key[k].sm1 == (7))
  2378  0009F6  5023               	movf	ikey_parsing@k,w,c
  2379  0009F8  0D10               	mullw	16
  2380  0009FA  50F3               	movf	prodl,w,c
  2381  0009FC  0F66               	addlw	low (_key+6)
  2382  0009FE  6ED9               	movwf	fsr2l,c
  2383  000A00  6ADA               	clrf	fsr2h,c
  2384  000A02  0E07               	movlw	7
  2385  000A04  18DE               	xorwf	postinc2,w,c
  2386  000A06  A4D8               	btfss	status,2,c
  2387  000A08  D018               	goto	l257
  2388                           
  2389                           ;ikb.c: 621: {;ikb.c: 622: if (key[k].bf.ReadyToRead == 0)
  2390  000A0A  5023               	movf	ikey_parsing@k,w,c
  2391  000A0C  0D10               	mullw	16
  2392  000A0E  50F3               	movf	prodl,w,c
  2393  000A10  0F6A               	addlw	low (_key+10)
  2394  000A12  6ED9               	movwf	fsr2l,c
  2395  000A14  6ADA               	clrf	fsr2h,c
  2396  000A16  0100               	movlb	0	; () banked
  2397  000A18  BCDF               	btfsc	indf2,6,c
  2398  000A1A  D00F               	goto	l257
  2399                           
  2400                           ; BSR set to: 0
  2401                           ;ikb.c: 623: {;ikb.c: 624: key[k].bf.ReadyToRead = 1;
  2402  000A1C  5023               	movf	ikey_parsing@k,w,c
  2403  000A1E  0D10               	mullw	16
  2404  000A20  50F3               	movf	prodl,w,c
  2405  000A22  0F6A               	addlw	low (_key+10)
  2406  000A24  6ED9               	movwf	fsr2l,c
  2407  000A26  6ADA               	clrf	fsr2h,c
  2408  000A28  8CDF               	bsf	indf2,6,c
  2409                           
  2410                           ;ikb.c: 625: key[k].sm1 = (8);
  2411  000A2A  5023               	movf	ikey_parsing@k,w,c
  2412  000A2C  0D10               	mullw	16
  2413  000A2E  50F3               	movf	prodl,w,c
  2414  000A30  0F66               	addlw	low (_key+6)
  2415  000A32  6ED9               	movwf	fsr2l,c
  2416  000A34  6ADA               	clrf	fsr2h,c
  2417  000A36  0E08               	movlw	8
  2418  000A38  6EDF               	movwf	indf2,c
  2419  000A3A                     l257:
  2420                           
  2421                           ;ikb.c: 626: };ikb.c: 627: };ikb.c: 628: if (key[k].sm1 == (8))
  2422  000A3A  5023               	movf	ikey_parsing@k,w,c
  2423  000A3C  0D10               	mullw	16
  2424  000A3E  50F3               	movf	prodl,w,c
  2425  000A40  0F66               	addlw	low (_key+6)
  2426  000A42  6ED9               	movwf	fsr2l,c
  2427  000A44  6ADA               	clrf	fsr2h,c
  2428  000A46  0E08               	movlw	8
  2429  000A48  18DE               	xorwf	postinc2,w,c
  2430  000A4A  A4D8               	btfss	status,2,c
  2431  000A4C  D027               	goto	l259
  2432                           
  2433                           ;ikb.c: 629: {;ikb.c: 630: if ( ++key[k].counter1 >= key[k].repp.after_start)
  2434  000A4E  5023               	movf	ikey_parsing@k,w,c
  2435  000A50  0D10               	mullw	16
  2436  000A52  50F3               	movf	prodl,w,c
  2437  000A54  0F6E               	addlw	low (_key+14)
  2438  000A56  6ED9               	movwf	fsr2l,c
  2439  000A58  6ADA               	clrf	fsr2h,c
  2440  000A5A  5023               	movf	ikey_parsing@k,w,c
  2441  000A5C  0D10               	mullw	16
  2442  000A5E  50F3               	movf	prodl,w,c
  2443  000A60  0F67               	addlw	low (_key+7)
  2444  000A62  6EE1               	movwf	fsr1l,c
  2445  000A64  6AE2               	clrf	fsr1h,c
  2446  000A66  2AE6               	incf	postinc1,f,c
  2447  000A68  0E00               	movlw	0
  2448  000A6A  22E5               	addwfc	postdec1,f,c
  2449  000A6C  50DE               	movf	postinc2,w,c
  2450  000A6E  5CE6               	subwf	postinc1,w,c
  2451  000A70  50DE               	movf	postinc2,w,c
  2452  000A72  58E6               	subwfb	postinc1,w,c
  2453  000A74  A0D8               	btfss	status,0,c
  2454  000A76  D012               	goto	l259
  2455                           
  2456                           ;ikb.c: 631: {;ikb.c: 632: key[k].counter1 = 0;
  2457  000A78  5023               	movf	ikey_parsing@k,w,c
  2458  000A7A  0D10               	mullw	16
  2459  000A7C  50F3               	movf	prodl,w,c
  2460  000A7E  0F67               	addlw	low (_key+7)
  2461  000A80  6ED9               	movwf	fsr2l,c
  2462  000A82  6ADA               	clrf	fsr2h,c
  2463  000A84  0E00               	movlw	0
  2464  000A86  6EDE               	movwf	postinc2,c
  2465  000A88  0E00               	movlw	0
  2466  000A8A  6EDD               	movwf	postdec2,c
  2467                           
  2468                           ;ikb.c: 633: key[k].sm1 = (7);
  2469  000A8C  5023               	movf	ikey_parsing@k,w,c
  2470  000A8E  0D10               	mullw	16
  2471  000A90  50F3               	movf	prodl,w,c
  2472  000A92  0F66               	addlw	low (_key+6)
  2473  000A94  6ED9               	movwf	fsr2l,c
  2474  000A96  6ADA               	clrf	fsr2h,c
  2475  000A98  0E07               	movlw	7
  2476  000A9A  6EDF               	movwf	indf2,c
  2477  000A9C                     l259:
  2478                           
  2479                           ;ikb.c: 634: };ikb.c: 635: };ikb.c: 637: if (key[k].sm1 == (5) )
  2480  000A9C  5023               	movf	ikey_parsing@k,w,c
  2481  000A9E  0D10               	mullw	16
  2482  000AA0  50F3               	movf	prodl,w,c
  2483  000AA2  0F66               	addlw	low (_key+6)
  2484  000AA4  6ED9               	movwf	fsr2l,c
  2485  000AA6  6ADA               	clrf	fsr2h,c
  2486  000AA8  0E05               	movlw	5
  2487  000AAA  18DE               	xorwf	postinc2,w,c
  2488  000AAC  A4D8               	btfss	status,2,c
  2489  000AAE  D018               	goto	l261
  2490                           
  2491                           ;ikb.c: 638: {;ikb.c: 639: if (key[k].bf.state == 0)
  2492  000AB0  5023               	movf	ikey_parsing@k,w,c
  2493  000AB2  0D10               	mullw	16
  2494  000AB4  50F3               	movf	prodl,w,c
  2495  000AB6  0F6A               	addlw	low (_key+10)
  2496  000AB8  6ED9               	movwf	fsr2l,c
  2497  000ABA  6ADA               	clrf	fsr2h,c
  2498  000ABC  0100               	movlb	0	; () banked
  2499  000ABE  B0DF               	btfsc	indf2,0,c
  2500  000AC0  D00F               	goto	l261
  2501                           
  2502                           ; BSR set to: 0
  2503                           ;ikb.c: 640: {;ikb.c: 641: key[k].bf.ReadyToRead = 1;
  2504  000AC2  5023               	movf	ikey_parsing@k,w,c
  2505  000AC4  0D10               	mullw	16
  2506  000AC6  50F3               	movf	prodl,w,c
  2507  000AC8  0F6A               	addlw	low (_key+10)
  2508  000ACA  6ED9               	movwf	fsr2l,c
  2509  000ACC  6ADA               	clrf	fsr2h,c
  2510  000ACE  8CDF               	bsf	indf2,6,c
  2511                           
  2512                           ;ikb.c: 642: key[k].sm1 = (2);
  2513  000AD0  5023               	movf	ikey_parsing@k,w,c
  2514  000AD2  0D10               	mullw	16
  2515  000AD4  50F3               	movf	prodl,w,c
  2516  000AD6  0F66               	addlw	low (_key+6)
  2517  000AD8  6ED9               	movwf	fsr2l,c
  2518  000ADA  6ADA               	clrf	fsr2h,c
  2519  000ADC  0E02               	movlw	2
  2520  000ADE  6EDF               	movwf	indf2,c
  2521  000AE0                     l261:
  2522                           
  2523                           ;ikb.c: 643: };ikb.c: 644: };ikb.c: 646: if (key[k].sm1 == (3) )
  2524  000AE0  5023               	movf	ikey_parsing@k,w,c
  2525  000AE2  0D10               	mullw	16
  2526  000AE4  50F3               	movf	prodl,w,c
  2527  000AE6  0F66               	addlw	low (_key+6)
  2528  000AE8  6ED9               	movwf	fsr2l,c
  2529  000AEA  6ADA               	clrf	fsr2h,c
  2530  000AEC  0E03               	movlw	3
  2531  000AEE  18DE               	xorwf	postinc2,w,c
  2532  000AF0  A4D8               	btfss	status,2,c
  2533  000AF2  D09C               	goto	l263
  2534                           
  2535                           ;ikb.c: 647: {;ikb.c: 648: key[k].counter1++;
  2536  000AF4  5023               	movf	ikey_parsing@k,w,c
  2537  000AF6  0D10               	mullw	16
  2538  000AF8  50F3               	movf	prodl,w,c
  2539  000AFA  0F67               	addlw	low (_key+7)
  2540  000AFC  6ED9               	movwf	fsr2l,c
  2541  000AFE  6ADA               	clrf	fsr2h,c
  2542  000B00  2ADE               	incf	postinc2,f,c
  2543  000B02  0E00               	movlw	0
  2544  000B04  22DD               	addwfc	postdec2,f,c
  2545                           
  2546                           ;ikb.c: 650: if (key[k].bf.state == 0)
  2547  000B06  5023               	movf	ikey_parsing@k,w,c
  2548  000B08  0D10               	mullw	16
  2549  000B0A  50F3               	movf	prodl,w,c
  2550  000B0C  0F6A               	addlw	low (_key+10)
  2551  000B0E  6ED9               	movwf	fsr2l,c
  2552  000B10  6ADA               	clrf	fsr2h,c
  2553  000B12  0100               	movlb	0	; () banked
  2554  000B14  B0DF               	btfsc	indf2,0,c
  2555  000B16  D03D               	goto	l3529
  2556                           
  2557                           ; BSR set to: 0
  2558                           ;ikb.c: 651: {;ikb.c: 652: if (key[k].counter1 <= (1000E-3/5E-3) )
  2559  000B18  0E00               	movlw	0
  2560  000B1A  6E16               	movwf	___ftge@ff1,c
  2561  000B1C  0E48               	movlw	72
  2562  000B1E  6E17               	movwf	___ftge@ff1+1,c
  2563  000B20  0E43               	movlw	67
  2564  000B22  6E18               	movwf	___ftge@ff1+2,c
  2565  000B24  5023               	movf	ikey_parsing@k,w,c
  2566  000B26  0D10               	mullw	16
  2567  000B28  50F3               	movf	prodl,w,c
  2568  000B2A  0F67               	addlw	low (_key+7)
  2569  000B2C  6ED9               	movwf	fsr2l,c
  2570  000B2E  6ADA               	clrf	fsr2h,c
  2571  000B30  CFDE F013          	movff	postinc2,___lwtoft@c
  2572  000B34  CFDD F014          	movff	postdec2,___lwtoft@c+1
  2573  000B38  EC99  F00F         	call	___lwtoft	;wreg free
  2574  000B3C  C013  F019         	movff	?___lwtoft,___ftge@ff2
  2575  000B40  C014  F01A         	movff	?___lwtoft+1,___ftge@ff2+1
  2576  000B44  C015  F01B         	movff	?___lwtoft+2,___ftge@ff2+2
  2577  000B48  ECA2  F00C         	call	___ftge	;wreg free
  2578  000B4C  A0D8               	btfss	status,0,c
  2579  000B4E  D021               	goto	l3529
  2580                           
  2581                           ;ikb.c: 653: {;ikb.c: 654: key[k].counter1 = 0;
  2582  000B50  5023               	movf	ikey_parsing@k,w,c
  2583  000B52  0D10               	mullw	16
  2584  000B54  50F3               	movf	prodl,w,c
  2585  000B56  0F67               	addlw	low (_key+7)
  2586  000B58  6ED9               	movwf	fsr2l,c
  2587  000B5A  6ADA               	clrf	fsr2h,c
  2588  000B5C  0E00               	movlw	0
  2589  000B5E  6EDE               	movwf	postinc2,c
  2590  000B60  0E00               	movlw	0
  2591  000B62  6EDD               	movwf	postdec2,c
  2592                           
  2593                           ;ikb.c: 656: key[k].bf.ReadyToRead = 1;
  2594  000B64  5023               	movf	ikey_parsing@k,w,c
  2595  000B66  0D10               	mullw	16
  2596  000B68  50F3               	movf	prodl,w,c
  2597  000B6A  0F6A               	addlw	low (_key+10)
  2598  000B6C  6ED9               	movwf	fsr2l,c
  2599  000B6E  6ADA               	clrf	fsr2h,c
  2600  000B70  0100               	movlb	0	; () banked
  2601  000B72  8CDF               	bsf	indf2,6,c
  2602                           
  2603                           ;ikb.c: 657: key[k].bf.AtTimeExpired_BeforeOrAfter = 0;
  2604  000B74  5023               	movf	ikey_parsing@k,w,c
  2605  000B76  0D10               	mullw	16
  2606  000B78  50F3               	movf	prodl,w,c
  2607  000B7A  0F6A               	addlw	low (_key+10)
  2608  000B7C  6ED9               	movwf	fsr2l,c
  2609  000B7E  6ADA               	clrf	fsr2h,c
  2610  000B80  9EDF               	bcf	indf2,7,c
  2611                           
  2612                           ;ikb.c: 659: key[k].sm1 = (2);
  2613  000B82  5023               	movf	ikey_parsing@k,w,c
  2614  000B84  0D10               	mullw	16
  2615  000B86  50F3               	movf	prodl,w,c
  2616  000B88  0F66               	addlw	low (_key+6)
  2617  000B8A  6ED9               	movwf	fsr2l,c
  2618  000B8C  6ADA               	clrf	fsr2h,c
  2619  000B8E  0E02               	movlw	2
  2620  000B90  6EDF               	movwf	indf2,c
  2621  000B92                     l3529:
  2622                           
  2623                           ;ikb.c: 660: };ikb.c: 661: };ikb.c: 663: if (key[k].counter1 > (1000E-3/5E-3) )
  2624  000B92  0E00               	movlw	0
  2625  000B94  6E16               	movwf	___ftge@ff1,c
  2626  000B96  0E48               	movlw	72
  2627  000B98  6E17               	movwf	___ftge@ff1+1,c
  2628  000B9A  0E43               	movlw	67
  2629  000B9C  6E18               	movwf	___ftge@ff1+2,c
  2630  000B9E  5023               	movf	ikey_parsing@k,w,c
  2631  000BA0  0D10               	mullw	16
  2632  000BA2  50F3               	movf	prodl,w,c
  2633  000BA4  0F67               	addlw	low (_key+7)
  2634  000BA6  6ED9               	movwf	fsr2l,c
  2635  000BA8  6ADA               	clrf	fsr2h,c
  2636  000BAA  CFDE F013          	movff	postinc2,___lwtoft@c
  2637  000BAE  CFDD F014          	movff	postdec2,___lwtoft@c+1
  2638  000BB2  EC99  F00F         	call	___lwtoft	;wreg free
  2639  000BB6  C013  F019         	movff	?___lwtoft,___ftge@ff2
  2640  000BBA  C014  F01A         	movff	?___lwtoft+1,___ftge@ff2+1
  2641  000BBE  C015  F01B         	movff	?___lwtoft+2,___ftge@ff2+2
  2642  000BC2  ECA2  F00C         	call	___ftge	;wreg free
  2643  000BC6  B0D8               	btfsc	status,0,c
  2644  000BC8  D031               	goto	l263
  2645                           
  2646                           ;ikb.c: 664: {;ikb.c: 665: key[k].counter1 = 0x0000;
  2647  000BCA  5023               	movf	ikey_parsing@k,w,c
  2648  000BCC  0D10               	mullw	16
  2649  000BCE  50F3               	movf	prodl,w,c
  2650  000BD0  0F67               	addlw	low (_key+7)
  2651  000BD2  6ED9               	movwf	fsr2l,c
  2652  000BD4  6ADA               	clrf	fsr2h,c
  2653  000BD6  0E00               	movlw	0
  2654  000BD8  6EDE               	movwf	postinc2,c
  2655  000BDA  0E00               	movlw	0
  2656  000BDC  6EDD               	movwf	postdec2,c
  2657                           
  2658                           ;ikb.c: 667: key[k].bf.ReadyToRead = 1;
  2659  000BDE  5023               	movf	ikey_parsing@k,w,c
  2660  000BE0  0D10               	mullw	16
  2661  000BE2  50F3               	movf	prodl,w,c
  2662  000BE4  0F6A               	addlw	low (_key+10)
  2663  000BE6  6ED9               	movwf	fsr2l,c
  2664  000BE8  6ADA               	clrf	fsr2h,c
  2665  000BEA  0100               	movlb	0	; () banked
  2666  000BEC  8CDF               	bsf	indf2,6,c
  2667                           
  2668                           ;ikb.c: 668: key[k].bf.AtTimeExpired_BeforeOrAfter = 1;
  2669  000BEE  5023               	movf	ikey_parsing@k,w,c
  2670  000BF0  0D10               	mullw	16
  2671  000BF2  50F3               	movf	prodl,w,c
  2672  000BF4  0F6A               	addlw	low (_key+10)
  2673  000BF6  6ED9               	movwf	fsr2l,c
  2674  000BF8  6ADA               	clrf	fsr2h,c
  2675  000BFA  8EDF               	bsf	indf2,7,c
  2676                           
  2677                           ;ikb.c: 670: if (!key[k].bf.Reptt)
  2678  000BFC  5023               	movf	ikey_parsing@k,w,c
  2679  000BFE  0D10               	mullw	16
  2680  000C00  50F3               	movf	prodl,w,c
  2681  000C02  0F6A               	addlw	low (_key+10)
  2682  000C04  6ED9               	movwf	fsr2l,c
  2683  000C06  6ADA               	clrf	fsr2h,c
  2684  000C08  BADF               	btfsc	indf2,5,c
  2685  000C0A  D008               	goto	l3535
  2686                           
  2687                           ; BSR set to: 0
  2688                           ;ikb.c: 671: {;ikb.c: 672: key[k].sm1 = (1);
  2689  000C0C  5023               	movf	ikey_parsing@k,w,c
  2690  000C0E  0D10               	mullw	16
  2691  000C10  50F3               	movf	prodl,w,c
  2692  000C12  0F66               	addlw	low (_key+6)
  2693  000C14  6ED9               	movwf	fsr2l,c
  2694  000C16  6ADA               	clrf	fsr2h,c
  2695  000C18  0E01               	movlw	1
  2696  000C1A  D007               	goto	L3
  2697  000C1C                     l3535:
  2698                           
  2699                           ; BSR set to: 0
  2700                           ;ikb.c: 674: else;ikb.c: 675: {;ikb.c: 676: key[k].sm1 = (8);
  2701  000C1C  5023               	movf	ikey_parsing@k,w,c
  2702  000C1E  0D10               	mullw	16
  2703  000C20  50F3               	movf	prodl,w,c
  2704  000C22  0F66               	addlw	low (_key+6)
  2705  000C24  6ED9               	movwf	fsr2l,c
  2706  000C26  6ADA               	clrf	fsr2h,c
  2707  000C28  0E08               	movlw	8
  2708  000C2A                     L3:
  2709  000C2A  6EDF               	movwf	indf2,c
  2710  000C2C                     l263:
  2711                           
  2712                           ;ikb.c: 677: };ikb.c: 678: };ikb.c: 679: };ikb.c: 684: if (key[k].sm1 == (4))
  2713  000C2C  5023               	movf	ikey_parsing@k,w,c
  2714  000C2E  0D10               	mullw	16
  2715  000C30  50F3               	movf	prodl,w,c
  2716  000C32  0F66               	addlw	low (_key+6)
  2717  000C34  6ED9               	movwf	fsr2l,c
  2718  000C36  6ADA               	clrf	fsr2h,c
  2719  000C38  0E04               	movlw	4
  2720  000C3A  18DE               	xorwf	postinc2,w,c
  2721  000C3C  A4D8               	btfss	status,2,c
  2722  000C3E  D08C               	goto	l269
  2723                           
  2724                           ;ikb.c: 685: {;ikb.c: 686: key[k].counter1++;
  2725  000C40  5023               	movf	ikey_parsing@k,w,c
  2726  000C42  0D10               	mullw	16
  2727  000C44  50F3               	movf	prodl,w,c
  2728  000C46  0F67               	addlw	low (_key+7)
  2729  000C48  6ED9               	movwf	fsr2l,c
  2730  000C4A  6ADA               	clrf	fsr2h,c
  2731  000C4C  2ADE               	incf	postinc2,f,c
  2732  000C4E  0E00               	movlw	0
  2733  000C50  22DD               	addwfc	postdec2,f,c
  2734                           
  2735                           ;ikb.c: 688: if (key[k].bf.state == 0)
  2736  000C52  5023               	movf	ikey_parsing@k,w,c
  2737  000C54  0D10               	mullw	16
  2738  000C56  50F3               	movf	prodl,w,c
  2739  000C58  0F6A               	addlw	low (_key+10)
  2740  000C5A  6ED9               	movwf	fsr2l,c
  2741  000C5C  6ADA               	clrf	fsr2h,c
  2742  000C5E  0100               	movlb	0	; () banked
  2743  000C60  B0DF               	btfsc	indf2,0,c
  2744  000C62  D03D               	goto	l3543
  2745                           
  2746                           ; BSR set to: 0
  2747                           ;ikb.c: 689: {;ikb.c: 690: if (key[k].counter1 <= (1000E-3/5E-3))
  2748  000C64  0E00               	movlw	0
  2749  000C66  6E16               	movwf	___ftge@ff1,c
  2750  000C68  0E48               	movlw	72
  2751  000C6A  6E17               	movwf	___ftge@ff1+1,c
  2752  000C6C  0E43               	movlw	67
  2753  000C6E  6E18               	movwf	___ftge@ff1+2,c
  2754  000C70  5023               	movf	ikey_parsing@k,w,c
  2755  000C72  0D10               	mullw	16
  2756  000C74  50F3               	movf	prodl,w,c
  2757  000C76  0F67               	addlw	low (_key+7)
  2758  000C78  6ED9               	movwf	fsr2l,c
  2759  000C7A  6ADA               	clrf	fsr2h,c
  2760  000C7C  CFDE F013          	movff	postinc2,___lwtoft@c
  2761  000C80  CFDD F014          	movff	postdec2,___lwtoft@c+1
  2762  000C84  EC99  F00F         	call	___lwtoft	;wreg free
  2763  000C88  C013  F019         	movff	?___lwtoft,___ftge@ff2
  2764  000C8C  C014  F01A         	movff	?___lwtoft+1,___ftge@ff2+1
  2765  000C90  C015  F01B         	movff	?___lwtoft+2,___ftge@ff2+2
  2766  000C94  ECA2  F00C         	call	___ftge	;wreg free
  2767  000C98  A0D8               	btfss	status,0,c
  2768  000C9A  D021               	goto	l3543
  2769                           
  2770                           ;ikb.c: 691: {;ikb.c: 692: key[k].counter1 = 0;
  2771  000C9C  5023               	movf	ikey_parsing@k,w,c
  2772  000C9E  0D10               	mullw	16
  2773  000CA0  50F3               	movf	prodl,w,c
  2774  000CA2  0F67               	addlw	low (_key+7)
  2775  000CA4  6ED9               	movwf	fsr2l,c
  2776  000CA6  6ADA               	clrf	fsr2h,c
  2777  000CA8  0E00               	movlw	0
  2778  000CAA  6EDE               	movwf	postinc2,c
  2779  000CAC  0E00               	movlw	0
  2780  000CAE  6EDD               	movwf	postdec2,c
  2781                           
  2782                           ;ikb.c: 694: key[k].bf.ReadyToRead = 1;
  2783  000CB0  5023               	movf	ikey_parsing@k,w,c
  2784  000CB2  0D10               	mullw	16
  2785  000CB4  50F3               	movf	prodl,w,c
  2786  000CB6  0F6A               	addlw	low (_key+10)
  2787  000CB8  6ED9               	movwf	fsr2l,c
  2788  000CBA  6ADA               	clrf	fsr2h,c
  2789  000CBC  0100               	movlb	0	; () banked
  2790  000CBE  8CDF               	bsf	indf2,6,c
  2791                           
  2792                           ;ikb.c: 695: key[k].bf.AtTimeExpired_BeforeOrAfter = 0;
  2793  000CC0  5023               	movf	ikey_parsing@k,w,c
  2794  000CC2  0D10               	mullw	16
  2795  000CC4  50F3               	movf	prodl,w,c
  2796  000CC6  0F6A               	addlw	low (_key+10)
  2797  000CC8  6ED9               	movwf	fsr2l,c
  2798  000CCA  6ADA               	clrf	fsr2h,c
  2799  000CCC  9EDF               	bcf	indf2,7,c
  2800                           
  2801                           ;ikb.c: 697: key[k].sm1 = (2);
  2802  000CCE  5023               	movf	ikey_parsing@k,w,c
  2803  000CD0  0D10               	mullw	16
  2804  000CD2  50F3               	movf	prodl,w,c
  2805  000CD4  0F66               	addlw	low (_key+6)
  2806  000CD6  6ED9               	movwf	fsr2l,c
  2807  000CD8  6ADA               	clrf	fsr2h,c
  2808  000CDA  0E02               	movlw	2
  2809  000CDC  6EDF               	movwf	indf2,c
  2810  000CDE                     l3543:
  2811                           
  2812                           ;ikb.c: 698: };ikb.c: 699: };ikb.c: 702: if (key[k].counter1 >= (3000E-3/5E-3))
  2813  000CDE  5023               	movf	ikey_parsing@k,w,c
  2814  000CE0  0D10               	mullw	16
  2815  000CE2  50F3               	movf	prodl,w,c
  2816  000CE4  0F67               	addlw	low (_key+7)
  2817  000CE6  6ED9               	movwf	fsr2l,c
  2818  000CE8  6ADA               	clrf	fsr2h,c
  2819  000CEA  CFDE F013          	movff	postinc2,___lwtoft@c
  2820  000CEE  CFDD F014          	movff	postdec2,___lwtoft@c+1
  2821  000CF2  EC99  F00F         	call	___lwtoft	;wreg free
  2822  000CF6  C013  F016         	movff	?___lwtoft,___ftge@ff1
  2823  000CFA  C014  F017         	movff	?___lwtoft+1,___ftge@ff1+1
  2824  000CFE  C015  F018         	movff	?___lwtoft+2,___ftge@ff1+2
  2825  000D02  0E00               	movlw	0
  2826  000D04  6E19               	movwf	___ftge@ff2,c
  2827  000D06  0E16               	movlw	22
  2828  000D08  6E1A               	movwf	___ftge@ff2+1,c
  2829  000D0A  0E44               	movlw	68
  2830  000D0C  6E1B               	movwf	___ftge@ff2+2,c
  2831  000D0E  ECA2  F00C         	call	___ftge	;wreg free
  2832  000D12  A0D8               	btfss	status,0,c
  2833  000D14  D021               	goto	l269
  2834                           
  2835                           ;ikb.c: 703: {;ikb.c: 704: key[k].counter1 = 0x0000;
  2836  000D16  5023               	movf	ikey_parsing@k,w,c
  2837  000D18  0D10               	mullw	16
  2838  000D1A  50F3               	movf	prodl,w,c
  2839  000D1C  0F67               	addlw	low (_key+7)
  2840  000D1E  6ED9               	movwf	fsr2l,c
  2841  000D20  6ADA               	clrf	fsr2h,c
  2842  000D22  0E00               	movlw	0
  2843  000D24  6EDE               	movwf	postinc2,c
  2844  000D26  0E00               	movlw	0
  2845  000D28  6EDD               	movwf	postdec2,c
  2846                           
  2847                           ;ikb.c: 706: key[k].bf.ReadyToRead = 1;
  2848  000D2A  5023               	movf	ikey_parsing@k,w,c
  2849  000D2C  0D10               	mullw	16
  2850  000D2E  50F3               	movf	prodl,w,c
  2851  000D30  0F6A               	addlw	low (_key+10)
  2852  000D32  6ED9               	movwf	fsr2l,c
  2853  000D34  6ADA               	clrf	fsr2h,c
  2854  000D36  0100               	movlb	0	; () banked
  2855  000D38  8CDF               	bsf	indf2,6,c
  2856                           
  2857                           ;ikb.c: 707: key[k].bf.AtTimeExpired_BeforeOrAfter = 1;
  2858  000D3A  5023               	movf	ikey_parsing@k,w,c
  2859  000D3C  0D10               	mullw	16
  2860  000D3E  50F3               	movf	prodl,w,c
  2861  000D40  0F6A               	addlw	low (_key+10)
  2862  000D42  6ED9               	movwf	fsr2l,c
  2863  000D44  6ADA               	clrf	fsr2h,c
  2864  000D46  8EDF               	bsf	indf2,7,c
  2865                           
  2866                           ;ikb.c: 710: key[k].sm1 = (1);
  2867  000D48  5023               	movf	ikey_parsing@k,w,c
  2868  000D4A  0D10               	mullw	16
  2869  000D4C  50F3               	movf	prodl,w,c
  2870  000D4E  0F66               	addlw	low (_key+6)
  2871  000D50  6ED9               	movwf	fsr2l,c
  2872  000D52  6ADA               	clrf	fsr2h,c
  2873  000D54  0E01               	movlw	1
  2874  000D56  6EDF               	movwf	indf2,c
  2875  000D58                     l269:
  2876                           
  2877                           ;ikb.c: 711: };ikb.c: 712: };ikb.c: 715: if (key[k].sm1 == (1))
  2878  000D58  5023               	movf	ikey_parsing@k,w,c
  2879  000D5A  0D10               	mullw	16
  2880  000D5C  50F3               	movf	prodl,w,c
  2881  000D5E  0F66               	addlw	low (_key+6)
  2882  000D60  6ED9               	movwf	fsr2l,c
  2883  000D62  6ADA               	clrf	fsr2h,c
  2884  000D64  04DE               	decf	postinc2,w,c
  2885  000D66  A4D8               	btfss	status,2,c
  2886  000D68  D011               	goto	l273
  2887                           
  2888                           ;ikb.c: 716: {;ikb.c: 717: if (key[k].bf.state == 0)
  2889  000D6A  5023               	movf	ikey_parsing@k,w,c
  2890  000D6C  0D10               	mullw	16
  2891  000D6E  50F3               	movf	prodl,w,c
  2892  000D70  0F6A               	addlw	low (_key+10)
  2893  000D72  6ED9               	movwf	fsr2l,c
  2894  000D74  6ADA               	clrf	fsr2h,c
  2895  000D76  0100               	movlb	0	; () banked
  2896  000D78  B0DF               	btfsc	indf2,0,c
  2897  000D7A  D008               	goto	l273
  2898                           
  2899                           ; BSR set to: 0
  2900                           ;ikb.c: 718: {;ikb.c: 719: key[k].sm1 = (2);
  2901  000D7C  5023               	movf	ikey_parsing@k,w,c
  2902  000D7E  0D10               	mullw	16
  2903  000D80  50F3               	movf	prodl,w,c
  2904  000D82  0F66               	addlw	low (_key+6)
  2905  000D84  6ED9               	movwf	fsr2l,c
  2906  000D86  6ADA               	clrf	fsr2h,c
  2907  000D88  0E02               	movlw	2
  2908  000D8A  6EDF               	movwf	indf2,c
  2909  000D8C                     l273:
  2910                           
  2911                           ;ikb.c: 720: };ikb.c: 721: };ikb.c: 723: if (key[k].sm1 == (2))
  2912  000D8C  5023               	movf	ikey_parsing@k,w,c
  2913  000D8E  0D10               	mullw	16
  2914  000D90  50F3               	movf	prodl,w,c
  2915  000D92  0F66               	addlw	low (_key+6)
  2916  000D94  6ED9               	movwf	fsr2l,c
  2917  000D96  6ADA               	clrf	fsr2h,c
  2918  000D98  0E02               	movlw	2
  2919  000D9A  18DE               	xorwf	postinc2,w,c
  2920  000D9C  A4D8               	btfss	status,2,c
  2921  000D9E  D011               	goto	l275
  2922                           
  2923                           ;ikb.c: 724: {;ikb.c: 725: if (key[k].bf.ReadyToRead == 0)
  2924  000DA0  5023               	movf	ikey_parsing@k,w,c
  2925  000DA2  0D10               	mullw	16
  2926  000DA4  50F3               	movf	prodl,w,c
  2927  000DA6  0F6A               	addlw	low (_key+10)
  2928  000DA8  6ED9               	movwf	fsr2l,c
  2929  000DAA  6ADA               	clrf	fsr2h,c
  2930  000DAC  0100               	movlb	0	; () banked
  2931  000DAE  BCDF               	btfsc	indf2,6,c
  2932  000DB0  D008               	goto	l275
  2933                           
  2934                           ; BSR set to: 0
  2935                           ;ikb.c: 726: {;ikb.c: 727: key[k].sm1 = (9);
  2936  000DB2  5023               	movf	ikey_parsing@k,w,c
  2937  000DB4  0D10               	mullw	16
  2938  000DB6  50F3               	movf	prodl,w,c
  2939  000DB8  0F66               	addlw	low (_key+6)
  2940  000DBA  6ED9               	movwf	fsr2l,c
  2941  000DBC  6ADA               	clrf	fsr2h,c
  2942  000DBE  0E09               	movlw	9
  2943  000DC0  6EDF               	movwf	indf2,c
  2944  000DC2                     l275:
  2945                           
  2946                           ;ikb.c: 728: };ikb.c: 729: };ikb.c: 731: if (key[k].sm1 == (9))
  2947  000DC2  5023               	movf	ikey_parsing@k,w,c
  2948  000DC4  0D10               	mullw	16
  2949  000DC6  50F3               	movf	prodl,w,c
  2950  000DC8  0F66               	addlw	low (_key+6)
  2951  000DCA  6ED9               	movwf	fsr2l,c
  2952  000DCC  6ADA               	clrf	fsr2h,c
  2953  000DCE  0E09               	movlw	9
  2954  000DD0  18DE               	xorwf	postinc2,w,c
  2955  000DD2  A4D8               	btfss	status,2,c
  2956  000DD4  D02F               	goto	l3559
  2957                           
  2958                           ;ikb.c: 732: {;ikb.c: 733: if (key[k].num_group_x > 0)
  2959  000DD6  5023               	movf	ikey_parsing@k,w,c
  2960  000DD8  0D10               	mullw	16
  2961  000DDA  50F3               	movf	prodl,w,c
  2962  000DDC  0F69               	addlw	low (_key+9)
  2963  000DDE  6ED9               	movwf	fsr2l,c
  2964  000DE0  6ADA               	clrf	fsr2h,c
  2965  000DE2  50DF               	movf	indf2,w,c
  2966  000DE4  B4D8               	btfsc	status,2,c
  2967  000DE6  D016               	goto	l278
  2968                           
  2969                           ;ikb.c: 734: {;ikb.c: 735: group_x[key[k].num_group_x] = 0;
  2970  000DE8  5023               	movf	ikey_parsing@k,w,c
  2971  000DEA  0D10               	mullw	16
  2972  000DEC  50F3               	movf	prodl,w,c
  2973  000DEE  0F69               	addlw	low (_key+9)
  2974  000DF0  6ED9               	movwf	fsr2l,c
  2975  000DF2  6ADA               	clrf	fsr2h,c
  2976  000DF4  50DF               	movf	indf2,w,c
  2977  000DF6  6E1F               	movwf	??_ikey_parsing& (0+255),c
  2978  000DF8  501F               	movf	??_ikey_parsing,w,c
  2979  000DFA  0FB0               	addlw	low _group_x
  2980  000DFC  6ED9               	movwf	fsr2l,c
  2981  000DFE  6ADA               	clrf	fsr2h,c
  2982  000E00  0E00               	movlw	0
  2983  000E02  6EDF               	movwf	indf2,c
  2984                           
  2985                           ;ikb.c: 736: key[k].bf.OwnerOfGroup = 0;
  2986  000E04  5023               	movf	ikey_parsing@k,w,c
  2987  000E06  0D10               	mullw	16
  2988  000E08  50F3               	movf	prodl,w,c
  2989  000E0A  0F6B               	addlw	low (_key+11)
  2990  000E0C  6ED9               	movwf	fsr2l,c
  2991  000E0E  6ADA               	clrf	fsr2h,c
  2992  000E10  0100               	movlb	0	; () banked
  2993  000E12  90DF               	bcf	indf2,0,c
  2994  000E14                     l278:
  2995                           
  2996                           ;ikb.c: 737: };ikb.c: 739: key[k].sm1 = (0);
  2997  000E14  5023               	movf	ikey_parsing@k,w,c
  2998  000E16  0D10               	mullw	16
  2999  000E18  50F3               	movf	prodl,w,c
  3000  000E1A  0F66               	addlw	low (_key+6)
  3001  000E1C  6ED9               	movwf	fsr2l,c
  3002  000E1E  6ADA               	clrf	fsr2h,c
  3003  000E20  0E00               	movlw	0
  3004  000E22  6EDF               	movwf	indf2,c
  3005                           
  3006                           ;ikb.c: 742: key[k].bf.InProcessing = 0;
  3007  000E24  5023               	movf	ikey_parsing@k,w,c
  3008  000E26  0D10               	mullw	16
  3009  000E28  50F3               	movf	prodl,w,c
  3010  000E2A  0F6B               	addlw	low (_key+11)
  3011  000E2C  6ED9               	movwf	fsr2l,c
  3012  000E2E  6ADA               	clrf	fsr2h,c
  3013  000E30  0100               	movlb	0	; () banked
  3014  000E32  92DF               	bcf	indf2,1,c
  3015  000E34                     l3559:
  3016  000E34  2A23               	incf	ikey_parsing@k,f,c
  3017  000E36  0E04               	movlw	4
  3018  000E38  6423               	cpfsgt	ikey_parsing@k,c
  3019  000E3A  D4EB               	goto	l3473
  3020  000E3C  0012               	return	
  3021  000E3E                     __end_of_ikey_parsing:
  3022                           	opt callstack 0
  3023                           
  3024 ;; *************** function _ikey_is_accessible *****************
  3025 ;; Defined at:
  3026 ;;		line 510 in file "../../../../../../FIRWAR/eslibrary/ikb/ikb.c"
  3027 ;; Parameters:    Size  Location     Type
  3028 ;;  k               1    wreg     unsigned char 
  3029 ;; Auto vars:     Size  Location     Type
  3030 ;;  k               1   12[COMRAM] unsigned char 
  3031 ;; Return value:  Size  Location     Type
  3032 ;;                  1    wreg      unsigned char 
  3033 ;; Registers used:
  3034 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  3035 ;; Tracked objects:
  3036 ;;		On entry : 0/0
  3037 ;;		On exit  : 0/0
  3038 ;;		Unchanged: 0/0
  3039 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3040 ;;      Params:         0       0       0       0       0       0       0       0       0
  3041 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3042 ;;      Temps:          2       0       0       0       0       0       0       0       0
  3043 ;;      Totals:         3       0       0       0       0       0       0       0       0
  3044 ;;Total ram usage:        3 bytes
  3045 ;; Hardware stack levels used:    1
  3046 ;; Hardware stack levels required when called:    5
  3047 ;; This function calls:
  3048 ;;		Nothing
  3049 ;; This function is called by:
  3050 ;;		_ikey_parsing
  3051 ;; This function uses a non-reentrant model
  3052 ;;
  3053                           
  3054                           	psect	text16
  3055  001BF0                     __ptext16:
  3056                           	opt callstack 0
  3057  001BF0                     _ikey_is_accessible:
  3058                           	opt callstack 23
  3059                           
  3060                           ;incstack = 0
  3061                           ;ikey_is_accessible@k stored from wreg
  3062  001BF0  6E0D               	movwf	ikey_is_accessible@k,c
  3063                           
  3064                           ;ikb.c: 512: if (key[k].num_group_x != 0)
  3065  001BF2  500D               	movf	ikey_is_accessible@k,w,c
  3066  001BF4  0D10               	mullw	16
  3067  001BF6  50F3               	movf	prodl,w,c
  3068  001BF8  0F69               	addlw	low (_key+9)
  3069  001BFA  6ED9               	movwf	fsr2l,c
  3070  001BFC  6ADA               	clrf	fsr2h,c
  3071  001BFE  50DF               	movf	indf2,w,c
  3072  001C00  B4D8               	btfsc	status,2,c
  3073  001C02  D01A               	goto	l2403
  3074                           
  3075                           ;ikb.c: 513: {;ikb.c: 515: if (group_x[key[k].num_group_x] == 1)
  3076  001C04  500D               	movf	ikey_is_accessible@k,w,c
  3077  001C06  0D10               	mullw	16
  3078  001C08  50F3               	movf	prodl,w,c
  3079  001C0A  0F69               	addlw	low (_key+9)
  3080  001C0C  6ED9               	movwf	fsr2l,c
  3081  001C0E  6ADA               	clrf	fsr2h,c
  3082  001C10  50DF               	movf	indf2,w,c
  3083  001C12  6E0B               	movwf	??_ikey_is_accessible& (0+255),c
  3084  001C14  500B               	movf	??_ikey_is_accessible,w,c
  3085  001C16  0FB0               	addlw	low _group_x
  3086  001C18  6ED9               	movwf	fsr2l,c
  3087  001C1A  6ADA               	clrf	fsr2h,c
  3088  001C1C  04DE               	decf	postinc2,w,c
  3089  001C1E  A4D8               	btfss	status,2,c
  3090  001C20  D00B               	goto	l2403
  3091                           
  3092                           ;ikb.c: 516: {;ikb.c: 518: if ( !key[k].bf.OwnerOfGroup)
  3093  001C22  500D               	movf	ikey_is_accessible@k,w,c
  3094  001C24  0D10               	mullw	16
  3095  001C26  50F3               	movf	prodl,w,c
  3096  001C28  0F6B               	addlw	low (_key+11)
  3097  001C2A  6ED9               	movwf	fsr2l,c
  3098  001C2C  6ADA               	clrf	fsr2h,c
  3099  001C2E  0100               	movlb	0	; () banked
  3100  001C30  B0DF               	btfsc	indf2,0,c
  3101  001C32  D002               	goto	l2403
  3102                           
  3103                           ; BSR set to: 0
  3104                           ;ikb.c: 519: {;ikb.c: 520: return 0;
  3105  001C34  0E00               	movlw	0
  3106  001C36  0012               	return	
  3107  001C38                     l2403:
  3108                           
  3109                           ;ikb.c: 521: };ikb.c: 522: };ikb.c: 523: };ikb.c: 524: return 1;
  3110  001C38  0E01               	movlw	1
  3111  001C3A  0012               	return		;funcret
  3112  001C3C                     __end_of_ikey_is_accessible:
  3113                           	opt callstack 0
  3114                           
  3115 ;; *************** function ___lwtoft *****************
  3116 ;; Defined at:
  3117 ;;		line 28 in file "/opt/microchip/xc8/v2.05/pic/sources/c90/common/lwtoft.c"
  3118 ;; Parameters:    Size  Location     Type
  3119 ;;  c               2   18[COMRAM] unsigned int 
  3120 ;; Auto vars:     Size  Location     Type
  3121 ;;		None
  3122 ;; Return value:  Size  Location     Type
  3123 ;;                  3   18[COMRAM] float 
  3124 ;; Registers used:
  3125 ;;		wreg, status,2, status,0, cstack
  3126 ;; Tracked objects:
  3127 ;;		On entry : 0/0
  3128 ;;		On exit  : 0/0
  3129 ;;		Unchanged: 0/0
  3130 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3131 ;;      Params:         3       0       0       0       0       0       0       0       0
  3132 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3133 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3134 ;;      Totals:         3       0       0       0       0       0       0       0       0
  3135 ;;Total ram usage:        3 bytes
  3136 ;; Hardware stack levels used:    1
  3137 ;; Hardware stack levels required when called:    6
  3138 ;; This function calls:
  3139 ;;		___ftpack
  3140 ;; This function is called by:
  3141 ;;		_ikey_parsing
  3142 ;; This function uses a non-reentrant model
  3143 ;;
  3144                           
  3145                           	psect	text17
  3146  001F32                     __ptext17:
  3147                           	opt callstack 0
  3148  001F32                     ___lwtoft:
  3149                           	opt callstack 22
  3150                           
  3151                           ;incstack = 0
  3152  001F32  C013  F00B         	movff	___lwtoft@c,___ftpack@arg
  3153  001F36  C014  F00C         	movff	___lwtoft@c+1,___ftpack@arg+1
  3154  001F3A  6A0D               	clrf	___ftpack@arg+2,c
  3155  001F3C  0E8E               	movlw	142
  3156  001F3E  6E0E               	movwf	___ftpack@exp,c
  3157  001F40  0E00               	movlw	0
  3158  001F42  6E0F               	movwf	___ftpack@sign,c
  3159  001F44  ECB1  F00B         	call	___ftpack	;wreg free
  3160  001F48  C00B  F013         	movff	?___ftpack,?___lwtoft
  3161  001F4C  C00C  F014         	movff	?___ftpack+1,?___lwtoft+1
  3162  001F50  C00D  F015         	movff	?___ftpack+2,?___lwtoft+2
  3163  001F54  0012               	return		;funcret
  3164  001F56                     __end_of___lwtoft:
  3165                           	opt callstack 0
  3166                           
  3167 ;; *************** function _ikb_init *****************
  3168 ;; Defined at:
  3169 ;;		line 217 in file "../../../../../../FIRWAR/eslibrary/ikb/ikb.c"
  3170 ;; Parameters:    Size  Location     Type
  3171 ;;		None
  3172 ;; Auto vars:     Size  Location     Type
  3173 ;;  i               1   10[COMRAM] char 
  3174 ;; Return value:  Size  Location     Type
  3175 ;;                  1    wreg      void 
  3176 ;; Registers used:
  3177 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  3178 ;; Tracked objects:
  3179 ;;		On entry : 0/0
  3180 ;;		On exit  : 3F/0
  3181 ;;		Unchanged: 0/0
  3182 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3183 ;;      Params:         0       0       0       0       0       0       0       0       0
  3184 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3185 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3186 ;;      Totals:         1       0       0       0       0       0       0       0       0
  3187 ;;Total ram usage:        1 bytes
  3188 ;; Hardware stack levels used:    1
  3189 ;; Hardware stack levels required when called:    5
  3190 ;; This function calls:
  3191 ;;		Nothing
  3192 ;; This function is called by:
  3193 ;;		_main
  3194 ;; This function uses a non-reentrant model
  3195 ;;
  3196                           
  3197                           	psect	text18
  3198  0016AC                     __ptext18:
  3199                           	opt callstack 0
  3200  0016AC                     _ikb_init:
  3201                           	opt callstack 25
  3202                           
  3203                           ;incstack = 0
  3204                           ;ikb.c: 219: int8_t i;;ikb.c: 389: do{TRISC |= 1<<4;}while(0);
  3205  0016AC  8894               	bsf	3988,4,c	;volatile
  3206                           
  3207                           ;ikb.c: 390: do{TRISC |= 1<<5;}while(0);
  3208  0016AE  8A94               	bsf	3988,5,c	;volatile
  3209                           
  3210                           ;ikb.c: 391: do{TRISC |= 1<<6;}while(0);
  3211  0016B0  8C94               	bsf	3988,6,c	;volatile
  3212                           
  3213                           ;ikb.c: 392: do{TRISC |= 1<<7;}while(0);
  3214  0016B2  8E94               	bsf	3988,7,c	;volatile
  3215                           
  3216                           ;ikb.c: 393: do{TRISD |= 1<<4;}while(0);
  3217  0016B4  8895               	bsf	3989,4,c	;volatile
  3218                           
  3219                           ;ikb.c: 394: key[0].keyRead = keyRead_pin_key1;
  3220  0016B6  0EE8               	movlw	low _keyRead_pin_key1
  3221  0016B8  0100               	movlb	0	; () banked
  3222  0016BA  6F60               	movwf	_key& (0+255),b	;volatile
  3223  0016BC  0E1F               	movlw	high _keyRead_pin_key1
  3224  0016BE  6F61               	movwf	(_key+1)& (0+255),b	;volatile
  3225                           
  3226                           ; BSR set to: 0
  3227                           ;ikb.c: 395: key[1].keyRead = keyRead_pin_key2;
  3228  0016C0  0ED4               	movlw	low _keyRead_pin_key2
  3229  0016C2  6F70               	movwf	(_key+16)& (0+255),b	;volatile
  3230  0016C4  0E1F               	movlw	high _keyRead_pin_key2
  3231  0016C6  6F71               	movwf	(_key+17)& (0+255),b	;volatile
  3232                           
  3233                           ; BSR set to: 0
  3234                           ;ikb.c: 396: key[2].keyRead = keyRead_pin_key3;
  3235  0016C8  0ECA               	movlw	low _keyRead_pin_key3
  3236  0016CA  6F80               	movwf	(_key+32)& (0+255),b	;volatile
  3237  0016CC  0E1F               	movlw	high _keyRead_pin_key3
  3238  0016CE  6F81               	movwf	(_key+33)& (0+255),b	;volatile
  3239                           
  3240                           ; BSR set to: 0
  3241                           ;ikb.c: 397: key[3].keyRead = keyRead_pin_key4;
  3242  0016D0  0EF8               	movlw	low _keyRead_pin_key4
  3243  0016D2  6F90               	movwf	(_key+48)& (0+255),b	;volatile
  3244  0016D4  0E1F               	movlw	high _keyRead_pin_key4
  3245  0016D6  6F91               	movwf	(_key+49)& (0+255),b	;volatile
  3246                           
  3247                           ; BSR set to: 0
  3248                           ;ikb.c: 398: key[4].keyRead = keyRead_pin_key5;
  3249  0016D8  0EF0               	movlw	low _keyRead_pin_key5
  3250  0016DA  6FA0               	movwf	(_key+64)& (0+255),b	;volatile
  3251  0016DC  0E1F               	movlw	high _keyRead_pin_key5
  3252  0016DE  6FA1               	movwf	(_key+65)& (0+255),b	;volatile
  3253                           
  3254                           ; BSR set to: 0
  3255                           ;ikb.c: 401: for (i=0; i<5; i++)
  3256  0016E0  0E00               	movlw	0
  3257  0016E2  6E0B               	movwf	ikb_init@i,c
  3258  0016E4                     l2941:
  3259                           
  3260                           ; BSR set to: 0
  3261                           ;ikb.c: 402: {;ikb.c: 403: key[i].bf.OnKeyPressed = 1;
  3262  0016E4  500B               	movf	ikb_init@i,w,c
  3263  0016E6  0D10               	mullw	16
  3264  0016E8  50F3               	movf	prodl,w,c
  3265  0016EA  0F6A               	addlw	low (_key+10)
  3266  0016EC  6ED9               	movwf	fsr2l,c
  3267  0016EE  6ADA               	clrf	fsr2h,c
  3268  0016F0  82DF               	bsf	indf2,1,c
  3269                           
  3270                           ;ikb.c: 404: key[i].bf.OnKeyPressedAndKeyRelease = 0;
  3271  0016F2  500B               	movf	ikb_init@i,w,c
  3272  0016F4  0D10               	mullw	16
  3273  0016F6  50F3               	movf	prodl,w,c
  3274  0016F8  0F6A               	addlw	low (_key+10)
  3275  0016FA  6ED9               	movwf	fsr2l,c
  3276  0016FC  6ADA               	clrf	fsr2h,c
  3277  0016FE  94DF               	bcf	indf2,2,c
  3278                           
  3279                           ;ikb.c: 405: key[i].bf.AtTimeExpired = 0;
  3280  001700  500B               	movf	ikb_init@i,w,c
  3281  001702  0D10               	mullw	16
  3282  001704  50F3               	movf	prodl,w,c
  3283  001706  0F6A               	addlw	low (_key+10)
  3284  001708  6ED9               	movwf	fsr2l,c
  3285  00170A  6ADA               	clrf	fsr2h,c
  3286  00170C  96DF               	bcf	indf2,3,c
  3287                           
  3288                           ;ikb.c: 406: key[i].bf.Reptt = 0;
  3289  00170E  500B               	movf	ikb_init@i,w,c
  3290  001710  0D10               	mullw	16
  3291  001712  50F3               	movf	prodl,w,c
  3292  001714  0F6A               	addlw	low (_key+10)
  3293  001716  6ED9               	movwf	fsr2l,c
  3294  001718  6ADA               	clrf	fsr2h,c
  3295  00171A  9ADF               	bcf	indf2,5,c
  3296                           
  3297                           ;ikb.c: 407: key[i].num_group_x = 0;
  3298  00171C  500B               	movf	ikb_init@i,w,c
  3299  00171E  0D10               	mullw	16
  3300  001720  50F3               	movf	prodl,w,c
  3301  001722  0F69               	addlw	low (_key+9)
  3302  001724  6ED9               	movwf	fsr2l,c
  3303  001726  6ADA               	clrf	fsr2h,c
  3304  001728  0E00               	movlw	0
  3305  00172A  6EDF               	movwf	indf2,c
  3306                           
  3307                           ;ikb.c: 408: key[i].repp.to_start= (uint16_t)500.0/5;
  3308  00172C  500B               	movf	ikb_init@i,w,c
  3309  00172E  0D10               	mullw	16
  3310  001730  50F3               	movf	prodl,w,c
  3311  001732  0F6C               	addlw	low (_key+12)
  3312  001734  6ED9               	movwf	fsr2l,c
  3313  001736  6ADA               	clrf	fsr2h,c
  3314  001738  0E64               	movlw	100
  3315  00173A  6EDE               	movwf	postinc2,c
  3316  00173C  0E00               	movlw	0
  3317  00173E  6EDD               	movwf	postdec2,c
  3318                           
  3319                           ;ikb.c: 409: key[i].repp.after_start = (uint16_t)200.0/5;
  3320  001740  500B               	movf	ikb_init@i,w,c
  3321  001742  0D10               	mullw	16
  3322  001744  50F3               	movf	prodl,w,c
  3323  001746  0F6E               	addlw	low (_key+14)
  3324  001748  6ED9               	movwf	fsr2l,c
  3325  00174A  6ADA               	clrf	fsr2h,c
  3326  00174C  0E28               	movlw	40
  3327  00174E  6EDE               	movwf	postinc2,c
  3328  001750  0E00               	movlw	0
  3329  001752  6EDD               	movwf	postdec2,c
  3330                           
  3331                           ; BSR set to: 0
  3332  001754  2A0B               	incf	ikb_init@i,f,c
  3333                           
  3334                           ; BSR set to: 0
  3335  001756  500B               	movf	ikb_init@i,w,c
  3336  001758  0A80               	xorlw	128
  3337  00175A  0F7B               	addlw	-133
  3338  00175C  B0D8               	btfsc	status,0,c
  3339  00175E  0012               	return	
  3340  001760  D7C1               	goto	l2941
  3341  001762                     __end_of_ikb_init:
  3342                           	opt callstack 0
  3343                           
  3344 ;; *************** function _ikb_flush *****************
  3345 ;; Defined at:
  3346 ;;		line 419 in file "../../../../../../FIRWAR/eslibrary/ikb/ikb.c"
  3347 ;; Parameters:    Size  Location     Type
  3348 ;;		None
  3349 ;; Auto vars:     Size  Location     Type
  3350 ;;		None
  3351 ;; Return value:  Size  Location     Type
  3352 ;;                  1    wreg      void 
  3353 ;; Registers used:
  3354 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3355 ;; Tracked objects:
  3356 ;;		On entry : 0/0
  3357 ;;		On exit  : 3F/0
  3358 ;;		Unchanged: 0/0
  3359 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3360 ;;      Params:         0       0       0       0       0       0       0       0       0
  3361 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3362 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3363 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3364 ;;Total ram usage:        0 bytes
  3365 ;; Hardware stack levels used:    1
  3366 ;; Hardware stack levels required when called:    6
  3367 ;; This function calls:
  3368 ;;		_ikey_clear_all_flag
  3369 ;; This function is called by:
  3370 ;;		_main
  3371 ;; This function uses a non-reentrant model
  3372 ;;
  3373                           
  3374                           	psect	text19
  3375  001FFE                     __ptext19:
  3376                           	opt callstack 0
  3377  001FFE                     _ikb_flush:
  3378                           	opt callstack 24
  3379                           
  3380                           ;ikb.c: 421: ikey_clear_all_flag();
  3381                           
  3382                           ; BSR set to: 0
  3383                           ;incstack = 0
  3384  001FFE  ECBA  F00F         	call	_ikey_clear_all_flag	;wreg free
  3385                           
  3386                           ; BSR set to: 0
  3387  002002  0012               	return		;funcret
  3388  002004                     __end_of_ikb_flush:
  3389                           	opt callstack 0
  3390                           
  3391 ;; *************** function _ikey_clear_all_flag *****************
  3392 ;; Defined at:
  3393 ;;		line 761 in file "../../../../../../FIRWAR/eslibrary/ikb/ikb.c"
  3394 ;; Parameters:    Size  Location     Type
  3395 ;;		None
  3396 ;; Auto vars:     Size  Location     Type
  3397 ;;  i               1   10[COMRAM] unsigned char 
  3398 ;; Return value:  Size  Location     Type
  3399 ;;                  1    wreg      void 
  3400 ;; Registers used:
  3401 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  3402 ;; Tracked objects:
  3403 ;;		On entry : 0/0
  3404 ;;		On exit  : 3F/0
  3405 ;;		Unchanged: 0/0
  3406 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3407 ;;      Params:         0       0       0       0       0       0       0       0       0
  3408 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3409 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3410 ;;      Totals:         1       0       0       0       0       0       0       0       0
  3411 ;;Total ram usage:        1 bytes
  3412 ;; Hardware stack levels used:    1
  3413 ;; Hardware stack levels required when called:    5
  3414 ;; This function calls:
  3415 ;;		Nothing
  3416 ;; This function is called by:
  3417 ;;		_ikb_flush
  3418 ;; This function uses a non-reentrant model
  3419 ;;
  3420                           
  3421                           	psect	text20
  3422  001F74                     __ptext20:
  3423                           	opt callstack 0
  3424  001F74                     _ikey_clear_all_flag:
  3425                           	opt callstack 24
  3426                           
  3427                           ;ikb.c: 763: uint8_t i;;ikb.c: 764: for (i=0; i<5; i++)
  3428                           
  3429                           ; BSR set to: 0
  3430                           ;incstack = 0
  3431  001F74  0E00               	movlw	0
  3432  001F76  6E0B               	movwf	ikey_clear_all_flag@i,c
  3433  001F78                     l2711:
  3434                           
  3435                           ;ikb.c: 765: {;ikb.c: 767: key[i].bf.ReadyToRead = 0;
  3436  001F78  500B               	movf	ikey_clear_all_flag@i,w,c
  3437  001F7A  0D10               	mullw	16
  3438  001F7C  50F3               	movf	prodl,w,c
  3439  001F7E  0F6A               	addlw	low (_key+10)
  3440  001F80  6ED9               	movwf	fsr2l,c
  3441  001F82  6ADA               	clrf	fsr2h,c
  3442  001F84  0100               	movlb	0	; () banked
  3443  001F86  9CDF               	bcf	indf2,6,c
  3444                           
  3445                           ; BSR set to: 0
  3446  001F88  2A0B               	incf	ikey_clear_all_flag@i,f,c
  3447                           
  3448                           ; BSR set to: 0
  3449  001F8A  0E04               	movlw	4
  3450  001F8C  640B               	cpfsgt	ikey_clear_all_flag@i,c
  3451  001F8E  D7F4               	goto	l2711
  3452  001F90  0012               	return	
  3453  001F92                     __end_of_ikey_clear_all_flag:
  3454                           	opt callstack 0
  3455                           
  3456 ;; *************** function _display7s_job *****************
  3457 ;; Defined at:
  3458 ;;		line 178 in file "pulsonic.c"
  3459 ;; Parameters:    Size  Location     Type
  3460 ;;		None
  3461 ;; Auto vars:     Size  Location     Type
  3462 ;;		None
  3463 ;; Return value:  Size  Location     Type
  3464 ;;                  1    wreg      void 
  3465 ;; Registers used:
  3466 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
  3467 ;; Tracked objects:
  3468 ;;		On entry : 0/0
  3469 ;;		On exit  : 0/0
  3470 ;;		Unchanged: 0/0
  3471 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3472 ;;      Params:         0       0       0       0       0       0       0       0       0
  3473 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3474 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3475 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3476 ;;Total ram usage:        0 bytes
  3477 ;; Hardware stack levels used:    1
  3478 ;; Hardware stack levels required when called:    7
  3479 ;; This function calls:
  3480 ;;		_multiplexedDisp_job
  3481 ;; This function is called by:
  3482 ;;		_main
  3483 ;; This function uses a non-reentrant model
  3484 ;;
  3485                           
  3486                           	psect	text21
  3487  001F0C                     __ptext21:
  3488                           	opt callstack 0
  3489  001F0C                     _display7s_job:
  3490                           	opt callstack 23
  3491                           
  3492                           ;pulsonic.c: 180: static int8_t q;;pulsonic.c: 182: LATB = pulsonic.display7s[q];
  3493                           
  3494                           ; BSR set to: 0
  3495                           ;incstack = 0
  3496  001F0C  0E76               	movlw	low (_pulsonic+118)
  3497  001F0E  243E               	addwf	display7s_job@q,w,c
  3498  001F10  6ED9               	movwf	fsr2l,c
  3499  001F12  6ADA               	clrf	fsr2h,c
  3500  001F14  0E01               	movlw	high (_pulsonic+118)
  3501  001F16  22DA               	addwfc	fsr2h,f,c
  3502  001F18  50DF               	movf	indf2,w,c
  3503  001F1A  6E8A               	movwf	3978,c	;volatile
  3504                           
  3505                           ;pulsonic.c: 183: multiplexedDisp_job(q);
  3506  001F1C  503E               	movf	display7s_job@q,w,c
  3507  001F1E  EC08  F00C         	call	_multiplexedDisp_job
  3508                           
  3509                           ;pulsonic.c: 185: if (++q == (2 + 3))
  3510  001F22  2A3E               	incf	display7s_job@q,f,c
  3511  001F24  0E05               	movlw	5
  3512  001F26  183E               	xorwf	display7s_job@q,w,c
  3513  001F28  A4D8               	btfss	status,2,c
  3514  001F2A  0012               	return	
  3515                           
  3516                           ;pulsonic.c: 186: {q=0;}
  3517  001F2C  0E00               	movlw	0
  3518  001F2E  6E3E               	movwf	display7s_job@q,c
  3519  001F30  0012               	return		;funcret
  3520  001F32                     __end_of_display7s_job:
  3521                           	opt callstack 0
  3522                           
  3523 ;; *************** function _multiplexedDisp_job *****************
  3524 ;; Defined at:
  3525 ;;		line 149 in file "pulsonic.c"
  3526 ;; Parameters:    Size  Location     Type
  3527 ;;  q               1    wreg     char 
  3528 ;; Auto vars:     Size  Location     Type
  3529 ;;  q               1   16[COMRAM] char 
  3530 ;;  i               1   17[COMRAM] char 
  3531 ;; Return value:  Size  Location     Type
  3532 ;;                  1    wreg      void 
  3533 ;; Registers used:
  3534 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
  3535 ;; Tracked objects:
  3536 ;;		On entry : 0/0
  3537 ;;		On exit  : 0/0
  3538 ;;		Unchanged: 0/0
  3539 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3540 ;;      Params:         0       0       0       0       0       0       0       0       0
  3541 ;;      Locals:         2       0       0       0       0       0       0       0       0
  3542 ;;      Temps:          6       0       0       0       0       0       0       0       0
  3543 ;;      Totals:         8       0       0       0       0       0       0       0       0
  3544 ;;Total ram usage:        8 bytes
  3545 ;; Hardware stack levels used:    1
  3546 ;; Hardware stack levels required when called:    6
  3547 ;; This function calls:
  3548 ;;		_multiplexedDisp0_off
  3549 ;;		_multiplexedDisp0_on
  3550 ;;		_multiplexedDisp1_off
  3551 ;;		_multiplexedDisp1_on
  3552 ;;		_multiplexedDisp2_off
  3553 ;;		_multiplexedDisp2_on
  3554 ;;		_multiplexedDisp3_off
  3555 ;;		_multiplexedDisp3_on
  3556 ;;		_multiplexedDisp4_off
  3557 ;;		_multiplexedDisp4_on
  3558 ;; This function is called by:
  3559 ;;		_display7s_job
  3560 ;; This function uses a non-reentrant model
  3561 ;;
  3562                           
  3563                           	psect	text22
  3564  001810                     __ptext22:
  3565                           	opt callstack 0
  3566  001810                     _multiplexedDisp_job:
  3567                           	opt callstack 23
  3568                           
  3569                           ;incstack = 0
  3570                           ;multiplexedDisp_job@q stored from wreg
  3571  001810  6E11               	movwf	multiplexedDisp_job@q,c
  3572                           
  3573                           ;pulsonic.c: 151: int8_t i;;pulsonic.c: 152: for (i=0; i< (2 + 3); i++)
  3574  001812  0E00               	movlw	0
  3575  001814  6E12               	movwf	multiplexedDisp_job@i,c
  3576  001816                     l2737:
  3577                           
  3578                           ;pulsonic.c: 153: {;pulsonic.c: 154: if ((0x01<<i) & (0x1<<q))
  3579  001816  C011  F00B         	movff	multiplexedDisp_job@q,??_multiplexedDisp_job
  3580  00181A  0E01               	movlw	1
  3581  00181C  6E0C               	movwf	(??_multiplexedDisp_job+1)& (0+255),c
  3582  00181E  0E00               	movlw	0
  3583  001820  6E0D               	movwf	(??_multiplexedDisp_job+2)& (0+255),c
  3584  001822  2A0B               	incf	??_multiplexedDisp_job,f,c
  3585  001824  D003               	goto	u2754
  3586  001826                     u2755:
  3587  001826  90D8               	bcf	status,0,c
  3588  001828  360C               	rlcf	??_multiplexedDisp_job+1,f,c
  3589  00182A  360D               	rlcf	??_multiplexedDisp_job+2,f,c
  3590  00182C                     u2754:
  3591  00182C  2E0B               	decfsz	??_multiplexedDisp_job,f,c
  3592  00182E  D7FB               	goto	u2755
  3593  001830  C012  F00E         	movff	multiplexedDisp_job@i,??_multiplexedDisp_job+3
  3594  001834  0E01               	movlw	1
  3595  001836  6E0F               	movwf	(??_multiplexedDisp_job+4)& (0+255),c
  3596  001838  0E00               	movlw	0
  3597  00183A  6E10               	movwf	(??_multiplexedDisp_job+5)& (0+255),c
  3598  00183C  2A0E               	incf	??_multiplexedDisp_job+3,f,c
  3599  00183E  D003               	goto	u2764
  3600  001840                     u2765:
  3601  001840  90D8               	bcf	status,0,c
  3602  001842  360F               	rlcf	??_multiplexedDisp_job+4,f,c
  3603  001844  3610               	rlcf	??_multiplexedDisp_job+5,f,c
  3604  001846                     u2764:
  3605  001846  2E0E               	decfsz	??_multiplexedDisp_job+3,f,c
  3606  001848  D7FB               	goto	u2765
  3607  00184A  500C               	movf	??_multiplexedDisp_job+1,w,c
  3608  00184C  160F               	andwf	??_multiplexedDisp_job+4,f,c
  3609  00184E  500D               	movf	??_multiplexedDisp_job+2,w,c
  3610  001850  1610               	andwf	??_multiplexedDisp_job+5,f,c
  3611  001852  500F               	movf	??_multiplexedDisp_job+4,w,c
  3612  001854  1010               	iorwf	??_multiplexedDisp_job+5,w,c
  3613  001856  B4D8               	btfsc	status,2,c
  3614  001858  D012               	goto	l2741
  3615                           
  3616                           ;pulsonic.c: 155: multiplexedDisp[i].Qonoff[1]();
  3617  00185A  5012               	movf	multiplexedDisp_job@i,w,c
  3618  00185C  0D04               	mullw	4
  3619  00185E  50F3               	movf	prodl,w,c
  3620  001860  0FB7               	addlw	low (_multiplexedDisp+2)
  3621  001862  6ED9               	movwf	fsr2l,c
  3622  001864  6ADA               	clrf	fsr2h,c
  3623  001866  D801               	call	u2788
  3624  001868  D01C               	goto	u2799
  3625  00186A                     u2788:
  3626  00186A  0005               	push	
  3627  00186C  6EFA               	movwf	pclath,c
  3628  00186E  50DE               	movf	postinc2,w,c
  3629  001870  6EFD               	movwf	tosl,c
  3630  001872  50DE               	movf	postinc2,w,c
  3631  001874  6EFE               	movwf	tosh,c
  3632  001876  50F8               	movf	tblptru,w,c
  3633  001878  6EFF               	movwf	tosu,c
  3634  00187A  50FA               	movf	pclath,w,c
  3635  00187C  0012               	return		;indir
  3636  00187E                     l2741:
  3637                           
  3638                           ;pulsonic.c: 156: else;pulsonic.c: 157: multiplexedDisp[i].Qonoff[0]();
  3639  00187E  5012               	movf	multiplexedDisp_job@i,w,c
  3640  001880  0D04               	mullw	4
  3641  001882  50F3               	movf	prodl,w,c
  3642  001884  0FB5               	addlw	low _multiplexedDisp
  3643  001886  6ED9               	movwf	fsr2l,c
  3644  001888  6ADA               	clrf	fsr2h,c
  3645  00188A  D801               	call	u2798
  3646  00188C  D00A               	goto	u2799
  3647  00188E                     u2798:
  3648  00188E  0005               	push	
  3649  001890  6EFA               	movwf	pclath,c
  3650  001892  50DE               	movf	postinc2,w,c
  3651  001894  6EFD               	movwf	tosl,c
  3652  001896  50DE               	movf	postinc2,w,c
  3653  001898  6EFE               	movwf	tosh,c
  3654  00189A  50F8               	movf	tblptru,w,c
  3655  00189C  6EFF               	movwf	tosu,c
  3656  00189E  50FA               	movf	pclath,w,c
  3657  0018A0  0012               	return		;indir
  3658  0018A2                     u2799:
  3659  0018A2  2A12               	incf	multiplexedDisp_job@i,f,c
  3660  0018A4  5012               	movf	multiplexedDisp_job@i,w,c
  3661  0018A6  0A80               	xorlw	128
  3662  0018A8  0F7B               	addlw	-133
  3663  0018AA  B0D8               	btfsc	status,0,c
  3664  0018AC  0012               	return	
  3665  0018AE  D7B3               	goto	l2737
  3666  0018B0                     __end_of_multiplexedDisp_job:
  3667                           	opt callstack 0
  3668                           
  3669 ;; *************** function _display7s_init *****************
  3670 ;; Defined at:
  3671 ;;		line 165 in file "pulsonic.c"
  3672 ;; Parameters:    Size  Location     Type
  3673 ;;		None
  3674 ;; Auto vars:     Size  Location     Type
  3675 ;;		None
  3676 ;; Return value:  Size  Location     Type
  3677 ;;                  1    wreg      void 
  3678 ;; Registers used:
  3679 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3680 ;; Tracked objects:
  3681 ;;		On entry : 0/0
  3682 ;;		On exit  : 0/0
  3683 ;;		Unchanged: 0/0
  3684 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3685 ;;      Params:         0       0       0       0       0       0       0       0       0
  3686 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3687 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3688 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3689 ;;Total ram usage:        0 bytes
  3690 ;; Hardware stack levels used:    1
  3691 ;; Hardware stack levels required when called:    7
  3692 ;; This function calls:
  3693 ;;		_multiplexedDisp_init
  3694 ;; This function is called by:
  3695 ;;		_main
  3696 ;; This function uses a non-reentrant model
  3697 ;;
  3698                           
  3699                           	psect	text23
  3700  001BA0                     __ptext23:
  3701                           	opt callstack 0
  3702  001BA0                     _display7s_init:
  3703                           	opt callstack 23
  3704                           
  3705                           ;pulsonic.c: 167: pulsonic.display7s[MODE_DIG_1] = DISP7S_NUMS[2];
  3706                           
  3707                           ;incstack = 0
  3708  001BA0  0E03               	movlw	low (_DISP7S_NUMS+2)
  3709  001BA2  6EF6               	movwf	tblptrl,c
  3710  001BA4                     	if	1	;There is more than 1 active tblptr byte
  3711  001BA4  0E08               	movlw	high __smallconst
  3712  001BA6  6EF7               	movwf	tblptrh,c
  3713  001BA8                     	endif
  3714  001BA8                     	if	0	;tblptru may be non-zero
  3715  001BA8                     	endif
  3716  001BA8                     	if	0	;tblptru may be non-zero
  3717  001BA8                     	endif
  3718  001BA8  0008               	tblrd		*
  3719  001BAA  CFF5 F177          	movff	tablat,_pulsonic+119
  3720                           
  3721                           ;pulsonic.c: 168: pulsonic.display7s[MODE_DIG_0] = DISP7S_NUMS[0];
  3722  001BAE  0E01               	movlw	low _DISP7S_NUMS
  3723  001BB0  6EF6               	movwf	tblptrl,c
  3724  001BB2                     	if	1	;There is more than 1 active tblptr byte
  3725  001BB2  0E08               	movlw	high _DISP7S_NUMS
  3726  001BB4  6EF7               	movwf	tblptrh,c
  3727  001BB6                     	endif
  3728  001BB6                     	if	0	;There are less than 3 active tblptr bytes
  3729  001BB6                     	endif
  3730  001BB6  0008               	tblrd		*
  3731  001BB8  CFF5 F176          	movff	tablat,_pulsonic+118
  3732                           
  3733                           ;pulsonic.c: 170: pulsonic.display7s[QUANT_DIG_2] = DISP7S_CHARS[RAYA];
  3734  001BBC  0E0C               	movlw	low (_DISP7S_CHARS+1)
  3735  001BBE  6EF6               	movwf	tblptrl,c
  3736  001BC0                     	if	1	;There is more than 1 active tblptr byte
  3737  001BC0  0E08               	movlw	high __smallconst
  3738  001BC2  6EF7               	movwf	tblptrh,c
  3739  001BC4                     	endif
  3740  001BC4                     	if	0	;tblptru may be non-zero
  3741  001BC4                     	endif
  3742  001BC4                     	if	0	;tblptru may be non-zero
  3743  001BC4                     	endif
  3744  001BC4  0008               	tblrd		*
  3745  001BC6  CFF5 F178          	movff	tablat,_pulsonic+120
  3746                           
  3747                           ;pulsonic.c: 171: pulsonic.display7s[QUANT_DIG_1] = DISP7S_CHARS[RAYA];
  3748  001BCA  0E0C               	movlw	low (_DISP7S_CHARS+1)
  3749  001BCC  6EF6               	movwf	tblptrl,c
  3750  001BCE                     	if	1	;There is more than 1 active tblptr byte
  3751  001BCE  0E08               	movlw	high __smallconst
  3752  001BD0  6EF7               	movwf	tblptrh,c
  3753  001BD2                     	endif
  3754  001BD2                     	if	0	;tblptru may be non-zero
  3755  001BD2                     	endif
  3756  001BD2                     	if	0	;tblptru may be non-zero
  3757  001BD2                     	endif
  3758  001BD2  0008               	tblrd		*
  3759  001BD4  CFF5 F177          	movff	tablat,_pulsonic+119
  3760                           
  3761                           ;pulsonic.c: 172: pulsonic.display7s[QUANT_DIG_0] = DISP7S_CHARS[RAYA];
  3762  001BD8  0E0C               	movlw	low (_DISP7S_CHARS+1)
  3763  001BDA  6EF6               	movwf	tblptrl,c
  3764  001BDC                     	if	1	;There is more than 1 active tblptr byte
  3765  001BDC  0E08               	movlw	high __smallconst
  3766  001BDE  6EF7               	movwf	tblptrh,c
  3767  001BE0                     	endif
  3768  001BE0                     	if	0	;tblptru may be non-zero
  3769  001BE0                     	endif
  3770  001BE0                     	if	0	;tblptru may be non-zero
  3771  001BE0                     	endif
  3772  001BE0  0008               	tblrd		*
  3773  001BE2  CFF5 F176          	movff	tablat,_pulsonic+118
  3774                           
  3775                           ;pulsonic.c: 174: TRISB = 0x00;
  3776  001BE6  0E00               	movlw	0
  3777  001BE8  6E93               	movwf	3987,c	;volatile
  3778                           
  3779                           ;pulsonic.c: 175: multiplexedDisp_init();
  3780  001BEA  ECCF  F00E         	call	_multiplexedDisp_init	;wreg free
  3781  001BEE  0012               	return		;funcret
  3782  001BF0                     __end_of_display7s_init:
  3783                           	opt callstack 0
  3784                           
  3785 ;; *************** function _multiplexedDisp_init *****************
  3786 ;; Defined at:
  3787 ;;		line 134 in file "pulsonic.c"
  3788 ;; Parameters:    Size  Location     Type
  3789 ;;		None
  3790 ;; Auto vars:     Size  Location     Type
  3791 ;;  i               1   10[COMRAM] char 
  3792 ;; Return value:  Size  Location     Type
  3793 ;;                  1    wreg      void 
  3794 ;; Registers used:
  3795 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
  3796 ;; Tracked objects:
  3797 ;;		On entry : 0/0
  3798 ;;		On exit  : 0/0
  3799 ;;		Unchanged: 0/0
  3800 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3801 ;;      Params:         0       0       0       0       0       0       0       0       0
  3802 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3803 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3804 ;;      Totals:         1       0       0       0       0       0       0       0       0
  3805 ;;Total ram usage:        1 bytes
  3806 ;; Hardware stack levels used:    1
  3807 ;; Hardware stack levels required when called:    6
  3808 ;; This function calls:
  3809 ;;		_multiplexedDisp0_off
  3810 ;;		_multiplexedDisp0_on
  3811 ;;		_multiplexedDisp1_off
  3812 ;;		_multiplexedDisp1_on
  3813 ;;		_multiplexedDisp2_off
  3814 ;;		_multiplexedDisp2_on
  3815 ;;		_multiplexedDisp3_off
  3816 ;;		_multiplexedDisp3_on
  3817 ;;		_multiplexedDisp4_off
  3818 ;;		_multiplexedDisp4_on
  3819 ;; This function is called by:
  3820 ;;		_display7s_init
  3821 ;; This function uses a non-reentrant model
  3822 ;;
  3823                           
  3824                           	psect	text24
  3825  001D9E                     __ptext24:
  3826                           	opt callstack 0
  3827  001D9E                     _multiplexedDisp_init:
  3828                           	opt callstack 23
  3829                           
  3830                           ;pulsonic.c: 136: int8_t i;;pulsonic.c: 137: for (i=0; i< (2 + 3); i++)
  3831                           
  3832                           ;incstack = 0
  3833  001D9E  0E00               	movlw	0
  3834  001DA0  6E0B               	movwf	multiplexedDisp_init@i,c
  3835  001DA2                     l2723:
  3836                           
  3837                           ;pulsonic.c: 138: {;pulsonic.c: 139: multiplexedDisp[i].Qonoff[0]();
  3838  001DA2  500B               	movf	multiplexedDisp_init@i,w,c
  3839  001DA4  0D04               	mullw	4
  3840  001DA6  50F3               	movf	prodl,w,c
  3841  001DA8  0FB5               	addlw	low _multiplexedDisp
  3842  001DAA  6ED9               	movwf	fsr2l,c
  3843  001DAC  6ADA               	clrf	fsr2h,c
  3844  001DAE  D801               	call	u2738
  3845  001DB0  D00A               	goto	u2739
  3846  001DB2                     u2738:
  3847  001DB2  0005               	push	
  3848  001DB4  6EFA               	movwf	pclath,c
  3849  001DB6  50DE               	movf	postinc2,w,c
  3850  001DB8  6EFD               	movwf	tosl,c
  3851  001DBA  50DE               	movf	postinc2,w,c
  3852  001DBC  6EFE               	movwf	tosh,c
  3853  001DBE  50F8               	movf	tblptru,w,c
  3854  001DC0  6EFF               	movwf	tosu,c
  3855  001DC2  50FA               	movf	pclath,w,c
  3856  001DC4  0012               	return		;indir
  3857  001DC6                     u2739:
  3858  001DC6  2A0B               	incf	multiplexedDisp_init@i,f,c
  3859  001DC8  500B               	movf	multiplexedDisp_init@i,w,c
  3860  001DCA  0A80               	xorlw	128
  3861  001DCC  0F7B               	addlw	-133
  3862  001DCE  A0D8               	btfss	status,0,c
  3863  001DD0  D7E8               	goto	l2723
  3864  001DD2  9892               	bcf	3986,4,c	;volatile
  3865                           
  3866                           ;pulsonic.c: 143: do{TRISA &= ~(1<<3);}while(0);
  3867  001DD4  9692               	bcf	3986,3,c	;volatile
  3868                           
  3869                           ;pulsonic.c: 144: do{TRISA &= ~(1<<2);}while(0);
  3870  001DD6  9492               	bcf	3986,2,c	;volatile
  3871                           
  3872                           ;pulsonic.c: 145: do{TRISA &= ~(1<<1);}while(0);
  3873  001DD8  9292               	bcf	3986,1,c	;volatile
  3874                           
  3875                           ;pulsonic.c: 146: do{TRISA &= ~(1<<0);}while(0);
  3876  001DDA  9092               	bcf	3986,0,c	;volatile
  3877  001DDC  0012               	return		;funcret
  3878  001DDE                     __end_of_multiplexedDisp_init:
  3879                           	opt callstack 0
  3880                           
  3881 ;; *************** function _multiplexedDisp4_off *****************
  3882 ;; Defined at:
  3883 ;;		line 91 in file "pulsonic.c"
  3884 ;; Parameters:    Size  Location     Type
  3885 ;;		None
  3886 ;; Auto vars:     Size  Location     Type
  3887 ;;		None
  3888 ;; Return value:  Size  Location     Type
  3889 ;;                  1    wreg      void 
  3890 ;; Registers used:
  3891 ;;		status,2, status,0
  3892 ;; Tracked objects:
  3893 ;;		On entry : 0/0
  3894 ;;		On exit  : 0/0
  3895 ;;		Unchanged: 0/0
  3896 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3897 ;;      Params:         0       0       0       0       0       0       0       0       0
  3898 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3899 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3900 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3901 ;;Total ram usage:        0 bytes
  3902 ;; Hardware stack levels used:    1
  3903 ;; Hardware stack levels required when called:    5
  3904 ;; This function calls:
  3905 ;;		Nothing
  3906 ;; This function is called by:
  3907 ;;		_multiplexedDisp_init
  3908 ;;		_multiplexedDisp_job
  3909 ;; This function uses a non-reentrant model
  3910 ;;
  3911                           
  3912                           	psect	text25
  3913  00201C                     __ptext25:
  3914                           	opt callstack 0
  3915  00201C                     _multiplexedDisp4_off:
  3916                           	opt callstack 23
  3917                           
  3918                           ;incstack = 0
  3919                           ;pulsonic.c: 93: do{LATA |= 1<<0;}while(0);
  3920  00201C  8089               	bsf	3977,0,c	;volatile
  3921  00201E  0012               	return		;funcret
  3922  002020                     __end_of_multiplexedDisp4_off:
  3923                           	opt callstack 0
  3924                           
  3925 ;; *************** function _multiplexedDisp3_on *****************
  3926 ;; Defined at:
  3927 ;;		line 86 in file "pulsonic.c"
  3928 ;; Parameters:    Size  Location     Type
  3929 ;;		None
  3930 ;; Auto vars:     Size  Location     Type
  3931 ;;		None
  3932 ;; Return value:  Size  Location     Type
  3933 ;;                  1    wreg      void 
  3934 ;; Registers used:
  3935 ;;		status,2, status,0
  3936 ;; Tracked objects:
  3937 ;;		On entry : 0/0
  3938 ;;		On exit  : 0/0
  3939 ;;		Unchanged: 0/0
  3940 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3941 ;;      Params:         0       0       0       0       0       0       0       0       0
  3942 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3943 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3944 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3945 ;;Total ram usage:        0 bytes
  3946 ;; Hardware stack levels used:    1
  3947 ;; Hardware stack levels required when called:    5
  3948 ;; This function calls:
  3949 ;;		Nothing
  3950 ;; This function is called by:
  3951 ;;		_multiplexedDisp_init
  3952 ;;		_multiplexedDisp_job
  3953 ;; This function uses a non-reentrant model
  3954 ;;
  3955                           
  3956                           	psect	text26
  3957  002020                     __ptext26:
  3958                           	opt callstack 0
  3959  002020                     _multiplexedDisp3_on:
  3960                           	opt callstack 23
  3961                           
  3962                           ;incstack = 0
  3963                           ;pulsonic.c: 88: do{LATA &= ~(1<<1);}while(0);
  3964  002020  9289               	bcf	3977,1,c	;volatile
  3965  002022  0012               	return		;funcret
  3966  002024                     __end_of_multiplexedDisp3_on:
  3967                           	opt callstack 0
  3968                           
  3969 ;; *************** function _multiplexedDisp3_off *****************
  3970 ;; Defined at:
  3971 ;;		line 82 in file "pulsonic.c"
  3972 ;; Parameters:    Size  Location     Type
  3973 ;;		None
  3974 ;; Auto vars:     Size  Location     Type
  3975 ;;		None
  3976 ;; Return value:  Size  Location     Type
  3977 ;;                  1    wreg      void 
  3978 ;; Registers used:
  3979 ;;		status,2, status,0
  3980 ;; Tracked objects:
  3981 ;;		On entry : 0/0
  3982 ;;		On exit  : 0/0
  3983 ;;		Unchanged: 0/0
  3984 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3985 ;;      Params:         0       0       0       0       0       0       0       0       0
  3986 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3987 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3988 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3989 ;;Total ram usage:        0 bytes
  3990 ;; Hardware stack levels used:    1
  3991 ;; Hardware stack levels required when called:    5
  3992 ;; This function calls:
  3993 ;;		Nothing
  3994 ;; This function is called by:
  3995 ;;		_multiplexedDisp_init
  3996 ;;		_multiplexedDisp_job
  3997 ;; This function uses a non-reentrant model
  3998 ;;
  3999                           
  4000                           	psect	text27
  4001  002024                     __ptext27:
  4002                           	opt callstack 0
  4003  002024                     _multiplexedDisp3_off:
  4004                           	opt callstack 23
  4005                           
  4006                           ;incstack = 0
  4007                           ;pulsonic.c: 84: do{LATA |= 1<<1;}while(0);
  4008  002024  8289               	bsf	3977,1,c	;volatile
  4009  002026  0012               	return		;funcret
  4010  002028                     __end_of_multiplexedDisp3_off:
  4011                           	opt callstack 0
  4012                           
  4013 ;; *************** function _multiplexedDisp2_on *****************
  4014 ;; Defined at:
  4015 ;;		line 77 in file "pulsonic.c"
  4016 ;; Parameters:    Size  Location     Type
  4017 ;;		None
  4018 ;; Auto vars:     Size  Location     Type
  4019 ;;		None
  4020 ;; Return value:  Size  Location     Type
  4021 ;;                  1    wreg      void 
  4022 ;; Registers used:
  4023 ;;		status,2, status,0
  4024 ;; Tracked objects:
  4025 ;;		On entry : 0/0
  4026 ;;		On exit  : 0/0
  4027 ;;		Unchanged: 0/0
  4028 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4029 ;;      Params:         0       0       0       0       0       0       0       0       0
  4030 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4031 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4032 ;;      Totals:         0       0       0       0       0       0       0       0       0
  4033 ;;Total ram usage:        0 bytes
  4034 ;; Hardware stack levels used:    1
  4035 ;; Hardware stack levels required when called:    5
  4036 ;; This function calls:
  4037 ;;		Nothing
  4038 ;; This function is called by:
  4039 ;;		_multiplexedDisp_init
  4040 ;;		_multiplexedDisp_job
  4041 ;; This function uses a non-reentrant model
  4042 ;;
  4043                           
  4044                           	psect	text28
  4045  002028                     __ptext28:
  4046                           	opt callstack 0
  4047  002028                     _multiplexedDisp2_on:
  4048                           	opt callstack 23
  4049                           
  4050                           ;incstack = 0
  4051                           ;pulsonic.c: 79: do{LATA &= ~(1<<2);}while(0);
  4052  002028  9489               	bcf	3977,2,c	;volatile
  4053  00202A  0012               	return		;funcret
  4054  00202C                     __end_of_multiplexedDisp2_on:
  4055                           	opt callstack 0
  4056                           
  4057 ;; *************** function _multiplexedDisp2_off *****************
  4058 ;; Defined at:
  4059 ;;		line 73 in file "pulsonic.c"
  4060 ;; Parameters:    Size  Location     Type
  4061 ;;		None
  4062 ;; Auto vars:     Size  Location     Type
  4063 ;;		None
  4064 ;; Return value:  Size  Location     Type
  4065 ;;                  1    wreg      void 
  4066 ;; Registers used:
  4067 ;;		status,2, status,0
  4068 ;; Tracked objects:
  4069 ;;		On entry : 0/0
  4070 ;;		On exit  : 0/0
  4071 ;;		Unchanged: 0/0
  4072 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4073 ;;      Params:         0       0       0       0       0       0       0       0       0
  4074 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4075 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4076 ;;      Totals:         0       0       0       0       0       0       0       0       0
  4077 ;;Total ram usage:        0 bytes
  4078 ;; Hardware stack levels used:    1
  4079 ;; Hardware stack levels required when called:    5
  4080 ;; This function calls:
  4081 ;;		Nothing
  4082 ;; This function is called by:
  4083 ;;		_multiplexedDisp_init
  4084 ;;		_multiplexedDisp_job
  4085 ;; This function uses a non-reentrant model
  4086 ;;
  4087                           
  4088                           	psect	text29
  4089  00202C                     __ptext29:
  4090                           	opt callstack 0
  4091  00202C                     _multiplexedDisp2_off:
  4092                           	opt callstack 23
  4093                           
  4094                           ;incstack = 0
  4095                           ;pulsonic.c: 75: do{LATA |= 1<<2;}while(0);
  4096  00202C  8489               	bsf	3977,2,c	;volatile
  4097  00202E  0012               	return		;funcret
  4098  002030                     __end_of_multiplexedDisp2_off:
  4099                           	opt callstack 0
  4100                           
  4101 ;; *************** function _multiplexedDisp1_on *****************
  4102 ;; Defined at:
  4103 ;;		line 68 in file "pulsonic.c"
  4104 ;; Parameters:    Size  Location     Type
  4105 ;;		None
  4106 ;; Auto vars:     Size  Location     Type
  4107 ;;		None
  4108 ;; Return value:  Size  Location     Type
  4109 ;;                  1    wreg      void 
  4110 ;; Registers used:
  4111 ;;		status,2, status,0
  4112 ;; Tracked objects:
  4113 ;;		On entry : 0/0
  4114 ;;		On exit  : 0/0
  4115 ;;		Unchanged: 0/0
  4116 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4117 ;;      Params:         0       0       0       0       0       0       0       0       0
  4118 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4119 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4120 ;;      Totals:         0       0       0       0       0       0       0       0       0
  4121 ;;Total ram usage:        0 bytes
  4122 ;; Hardware stack levels used:    1
  4123 ;; Hardware stack levels required when called:    5
  4124 ;; This function calls:
  4125 ;;		Nothing
  4126 ;; This function is called by:
  4127 ;;		_multiplexedDisp_init
  4128 ;;		_multiplexedDisp_job
  4129 ;; This function uses a non-reentrant model
  4130 ;;
  4131                           
  4132                           	psect	text30
  4133  002030                     __ptext30:
  4134                           	opt callstack 0
  4135  002030                     _multiplexedDisp1_on:
  4136                           	opt callstack 23
  4137                           
  4138                           ;incstack = 0
  4139                           ;pulsonic.c: 70: do{LATA &= ~(1<<3);}while(0);
  4140  002030  9689               	bcf	3977,3,c	;volatile
  4141  002032  0012               	return		;funcret
  4142  002034                     __end_of_multiplexedDisp1_on:
  4143                           	opt callstack 0
  4144                           
  4145 ;; *************** function _multiplexedDisp1_off *****************
  4146 ;; Defined at:
  4147 ;;		line 64 in file "pulsonic.c"
  4148 ;; Parameters:    Size  Location     Type
  4149 ;;		None
  4150 ;; Auto vars:     Size  Location     Type
  4151 ;;		None
  4152 ;; Return value:  Size  Location     Type
  4153 ;;                  1    wreg      void 
  4154 ;; Registers used:
  4155 ;;		status,2, status,0
  4156 ;; Tracked objects:
  4157 ;;		On entry : 0/0
  4158 ;;		On exit  : 0/0
  4159 ;;		Unchanged: 0/0
  4160 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4161 ;;      Params:         0       0       0       0       0       0       0       0       0
  4162 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4163 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4164 ;;      Totals:         0       0       0       0       0       0       0       0       0
  4165 ;;Total ram usage:        0 bytes
  4166 ;; Hardware stack levels used:    1
  4167 ;; Hardware stack levels required when called:    5
  4168 ;; This function calls:
  4169 ;;		Nothing
  4170 ;; This function is called by:
  4171 ;;		_multiplexedDisp_init
  4172 ;;		_multiplexedDisp_job
  4173 ;; This function uses a non-reentrant model
  4174 ;;
  4175                           
  4176                           	psect	text31
  4177  002034                     __ptext31:
  4178                           	opt callstack 0
  4179  002034                     _multiplexedDisp1_off:
  4180                           	opt callstack 23
  4181                           
  4182                           ;incstack = 0
  4183                           ;pulsonic.c: 66: do{LATA |= 1<<3;}while(0);
  4184  002034  8689               	bsf	3977,3,c	;volatile
  4185  002036  0012               	return		;funcret
  4186  002038                     __end_of_multiplexedDisp1_off:
  4187                           	opt callstack 0
  4188                           
  4189 ;; *************** function _multiplexedDisp0_on *****************
  4190 ;; Defined at:
  4191 ;;		line 59 in file "pulsonic.c"
  4192 ;; Parameters:    Size  Location     Type
  4193 ;;		None
  4194 ;; Auto vars:     Size  Location     Type
  4195 ;;		None
  4196 ;; Return value:  Size  Location     Type
  4197 ;;                  1    wreg      void 
  4198 ;; Registers used:
  4199 ;;		status,2, status,0
  4200 ;; Tracked objects:
  4201 ;;		On entry : 0/0
  4202 ;;		On exit  : 0/0
  4203 ;;		Unchanged: 0/0
  4204 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4205 ;;      Params:         0       0       0       0       0       0       0       0       0
  4206 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4207 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4208 ;;      Totals:         0       0       0       0       0       0       0       0       0
  4209 ;;Total ram usage:        0 bytes
  4210 ;; Hardware stack levels used:    1
  4211 ;; Hardware stack levels required when called:    5
  4212 ;; This function calls:
  4213 ;;		Nothing
  4214 ;; This function is called by:
  4215 ;;		_multiplexedDisp_init
  4216 ;;		_multiplexedDisp_job
  4217 ;; This function uses a non-reentrant model
  4218 ;;
  4219                           
  4220                           	psect	text32
  4221  002038                     __ptext32:
  4222                           	opt callstack 0
  4223  002038                     _multiplexedDisp0_on:
  4224                           	opt callstack 23
  4225                           
  4226                           ;incstack = 0
  4227                           ;pulsonic.c: 61: do{LATA &= ~(1<<4);}while(0);
  4228  002038  9889               	bcf	3977,4,c	;volatile
  4229  00203A  0012               	return		;funcret
  4230  00203C                     __end_of_multiplexedDisp0_on:
  4231                           	opt callstack 0
  4232                           
  4233 ;; *************** function _multiplexedDisp0_off *****************
  4234 ;; Defined at:
  4235 ;;		line 55 in file "pulsonic.c"
  4236 ;; Parameters:    Size  Location     Type
  4237 ;;		None
  4238 ;; Auto vars:     Size  Location     Type
  4239 ;;		None
  4240 ;; Return value:  Size  Location     Type
  4241 ;;                  1    wreg      void 
  4242 ;; Registers used:
  4243 ;;		status,2, status,0
  4244 ;; Tracked objects:
  4245 ;;		On entry : 0/0
  4246 ;;		On exit  : 0/0
  4247 ;;		Unchanged: 0/0
  4248 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4249 ;;      Params:         0       0       0       0       0       0       0       0       0
  4250 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4251 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4252 ;;      Totals:         0       0       0       0       0       0       0       0       0
  4253 ;;Total ram usage:        0 bytes
  4254 ;; Hardware stack levels used:    1
  4255 ;; Hardware stack levels required when called:    5
  4256 ;; This function calls:
  4257 ;;		Nothing
  4258 ;; This function is called by:
  4259 ;;		_multiplexedDisp_init
  4260 ;;		_multiplexedDisp_job
  4261 ;; This function uses a non-reentrant model
  4262 ;;
  4263                           
  4264                           	psect	text33
  4265  00203C                     __ptext33:
  4266                           	opt callstack 0
  4267  00203C                     _multiplexedDisp0_off:
  4268                           	opt callstack 23
  4269                           
  4270                           ;incstack = 0
  4271                           ;pulsonic.c: 57: do{LATA |= 1<<4;}while(0);
  4272  00203C  8889               	bsf	3977,4,c	;volatile
  4273  00203E  0012               	return		;funcret
  4274  002040                     __end_of_multiplexedDisp0_off:
  4275                           	opt callstack 0
  4276                           
  4277 ;; *************** function _multiplexedDisp4_on *****************
  4278 ;; Defined at:
  4279 ;;		line 95 in file "pulsonic.c"
  4280 ;; Parameters:    Size  Location     Type
  4281 ;;		None
  4282 ;; Auto vars:     Size  Location     Type
  4283 ;;		None
  4284 ;; Return value:  Size  Location     Type
  4285 ;;                  1    wreg      void 
  4286 ;; Registers used:
  4287 ;;		status,2, status,0
  4288 ;; Tracked objects:
  4289 ;;		On entry : 0/0
  4290 ;;		On exit  : 0/0
  4291 ;;		Unchanged: 0/0
  4292 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4293 ;;      Params:         0       0       0       0       0       0       0       0       0
  4294 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4295 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4296 ;;      Totals:         0       0       0       0       0       0       0       0       0
  4297 ;;Total ram usage:        0 bytes
  4298 ;; Hardware stack levels used:    1
  4299 ;; Hardware stack levels required when called:    5
  4300 ;; This function calls:
  4301 ;;		Nothing
  4302 ;; This function is called by:
  4303 ;;		_multiplexedDisp_init
  4304 ;;		_multiplexedDisp_job
  4305 ;; This function uses a non-reentrant model
  4306 ;;
  4307                           
  4308                           	psect	text34
  4309  002040                     __ptext34:
  4310                           	opt callstack 0
  4311  002040                     _multiplexedDisp4_on:
  4312                           	opt callstack 23
  4313                           
  4314                           ;incstack = 0
  4315                           ;pulsonic.c: 97: do{LATA &= ~(1<<0);}while(0);
  4316  002040  9089               	bcf	3977,0,c	;volatile
  4317  002042  0012               	return		;funcret
  4318  002044                     __end_of_multiplexedDisp4_on:
  4319                           	opt callstack 0
  4320                           
  4321 ;; *************** function _disp_show_quantity *****************
  4322 ;; Defined at:
  4323 ;;		line 190 in file "pulsonic.c"
  4324 ;; Parameters:    Size  Location     Type
  4325 ;;  f               3   48[COMRAM] void 
  4326 ;; Auto vars:     Size  Location     Type
  4327 ;;  buff           10    0[BANK0 ] unsigned char [10]
  4328 ;;  real            3   10[BANK0 ] unsigned char [10]
  4329 ;;  I               2   16[BANK0 ] int 
  4330 ;;  i               1   18[BANK0 ] char 
  4331 ;;  last_pos        1   15[BANK0 ] char 
  4332 ;;  q               1   14[BANK0 ] char 
  4333 ;;  num             1   13[BANK0 ] unsigned char 
  4334 ;; Return value:  Size  Location     Type
  4335 ;;                  1    wreg      void 
  4336 ;; Registers used:
  4337 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  4338 ;; Tracked objects:
  4339 ;;		On entry : 3F/0
  4340 ;;		On exit  : 3E/0
  4341 ;;		Unchanged: 0/0
  4342 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4343 ;;      Params:         3       0       0       0       0       0       0       0       0
  4344 ;;      Locals:         0      19       0       0       0       0       0       0       0
  4345 ;;      Temps:          1       0       0       0       0       0       0       0       0
  4346 ;;      Totals:         4      19       0       0       0       0       0       0       0
  4347 ;;Total ram usage:       23 bytes
  4348 ;; Hardware stack levels used:    1
  4349 ;; Hardware stack levels required when called:    8
  4350 ;; This function calls:
  4351 ;;		___awtoft
  4352 ;;		___ftge
  4353 ;;		___ftmul
  4354 ;;		___ftsub
  4355 ;;		___fttol
  4356 ;;		_itoa
  4357 ;; This function is called by:
  4358 ;;		_main
  4359 ;; This function uses a non-reentrant model
  4360 ;;
  4361                           
  4362                           	psect	text35
  4363  000E3E                     __ptext35:
  4364                           	opt callstack 0
  4365  000E3E                     _disp_show_quantity:
  4366                           	opt callstack 22
  4367                           
  4368                           ; BSR set to: 0
  4369                           ;pulsonic.c: 192: int16_t I;;pulsonic.c: 193: char buff[10];;pulsonic.c: 194: uint8_t nu
      +                          m;;pulsonic.c: 195: int8_t i;;pulsonic.c: 196: int8_t last_pos;;pulsonic.c: 197: int8_t 
      +                          q;;pulsonic.c: 198: double real;;pulsonic.c: 200: if (f>= 1000.0f)
  4370                           
  4371                           ;incstack = 0
  4372  000E3E  C031  F016         	movff	disp_show_quantity@f,___ftge@ff1
  4373  000E42  C032  F017         	movff	disp_show_quantity@f+1,___ftge@ff1+1
  4374  000E46  C033  F018         	movff	disp_show_quantity@f+2,___ftge@ff1+2
  4375  000E4A  0E00               	movlw	0
  4376  000E4C  6E19               	movwf	___ftge@ff2,c
  4377  000E4E  0E7A               	movlw	122
  4378  000E50  6E1A               	movwf	___ftge@ff2+1,c
  4379  000E52  0E44               	movlw	68
  4380  000E54  6E1B               	movwf	___ftge@ff2+2,c
  4381  000E56  ECA2  F00C         	call	___ftge	;wreg free
  4382  000E5A  A0D8               	btfss	status,0,c
  4383  000E5C  D006               	goto	l3693
  4384                           
  4385                           ;pulsonic.c: 201: f=999.0f;
  4386  000E5E  0EC0               	movlw	192
  4387  000E60  6E31               	movwf	disp_show_quantity@f,c
  4388  000E62  0E79               	movlw	121
  4389  000E64  6E32               	movwf	disp_show_quantity@f+1,c
  4390  000E66  0E44               	movlw	68
  4391  000E68  6E33               	movwf	disp_show_quantity@f+2,c
  4392  000E6A                     l3693:
  4393                           
  4394                           ;pulsonic.c: 203: I = (int16_t)f;
  4395  000E6A  C031  F022         	movff	disp_show_quantity@f,___fttol@f1
  4396  000E6E  C032  F023         	movff	disp_show_quantity@f+1,___fttol@f1+1
  4397  000E72  C033  F024         	movff	disp_show_quantity@f+2,___fttol@f1+2
  4398  000E76  EC8D  F00A         	call	___fttol	;wreg free
  4399  000E7A  C022  F0E3         	movff	?___fttol,disp_show_quantity@I
  4400  000E7E  C023  F0E4         	movff	?___fttol+1,disp_show_quantity@I+1
  4401                           
  4402                           ;pulsonic.c: 204: real = f-I;
  4403  000E82  C031  F01F         	movff	disp_show_quantity@f,___ftsub@f1
  4404  000E86  C032  F020         	movff	disp_show_quantity@f+1,___ftsub@f1+1
  4405  000E8A  C033  F021         	movff	disp_show_quantity@f+2,___ftsub@f1+2
  4406  000E8E  C0E3  F013         	movff	disp_show_quantity@I,___awtoft@c
  4407  000E92  C0E4  F014         	movff	disp_show_quantity@I+1,___awtoft@c+1
  4408  000E96  EC0F  F00F         	call	___awtoft	;wreg free
  4409  000E9A  C013  F022         	movff	?___awtoft,___ftsub@f2
  4410  000E9E  C014  F023         	movff	?___awtoft+1,___ftsub@f2+1
  4411  000EA2  C015  F024         	movff	?___awtoft+2,___ftsub@f2+2
  4412  000EA6  ECEF  F00E         	call	___ftsub	;wreg free
  4413  000EAA  C01F  F0DD         	movff	?___ftsub,disp_show_quantity@real
  4414  000EAE  C020  F0DE         	movff	?___ftsub+1,disp_show_quantity@real+1
  4415  000EB2  C021  F0DF         	movff	?___ftsub+2,disp_show_quantity@real+2
  4416                           
  4417                           ;pulsonic.c: 205: if (real > 0.0f)
  4418  000EB6  0E00               	movlw	0
  4419  000EB8  6E16               	movwf	___ftge@ff1,c
  4420  000EBA  0E00               	movlw	0
  4421  000EBC  6E17               	movwf	___ftge@ff1+1,c
  4422  000EBE  0E00               	movlw	0
  4423  000EC0  6E18               	movwf	___ftge@ff1+2,c
  4424  000EC2  C0DD  F019         	movff	disp_show_quantity@real,___ftge@ff2
  4425  000EC6  C0DE  F01A         	movff	disp_show_quantity@real+1,___ftge@ff2+1
  4426  000ECA  C0DF  F01B         	movff	disp_show_quantity@real+2,___ftge@ff2+2
  4427  000ECE  ECA2  F00C         	call	___ftge	;wreg free
  4428  000ED2  B0D8               	btfsc	status,0,c
  4429  000ED4  D02A               	goto	l3703
  4430                           
  4431                           ;pulsonic.c: 206: {;pulsonic.c: 207: if (f<100.0f)
  4432  000ED6  C031  F016         	movff	disp_show_quantity@f,___ftge@ff1
  4433  000EDA  C032  F017         	movff	disp_show_quantity@f+1,___ftge@ff1+1
  4434  000EDE  C033  F018         	movff	disp_show_quantity@f+2,___ftge@ff1+2
  4435  000EE2  0E00               	movlw	0
  4436  000EE4  6E19               	movwf	___ftge@ff2,c
  4437  000EE6  0EC8               	movlw	200
  4438  000EE8  6E1A               	movwf	___ftge@ff2+1,c
  4439  000EEA  0E42               	movlw	66
  4440  000EEC  6E1B               	movwf	___ftge@ff2+2,c
  4441  000EEE  ECA2  F00C         	call	___ftge	;wreg free
  4442  000EF2  B0D8               	btfsc	status,0,c
  4443  000EF4  D01A               	goto	l3703
  4444                           
  4445                           ;pulsonic.c: 208: {;pulsonic.c: 209: I = (int)(f*10);
  4446  000EF6  0E00               	movlw	0
  4447  000EF8  6E16               	movwf	___ftmul@f2,c
  4448  000EFA  0E20               	movlw	32
  4449  000EFC  6E17               	movwf	___ftmul@f2+1,c
  4450  000EFE  0E41               	movlw	65
  4451  000F00  6E18               	movwf	___ftmul@f2+2,c
  4452  000F02  C031  F013         	movff	disp_show_quantity@f,___ftmul@f1
  4453  000F06  C032  F014         	movff	disp_show_quantity@f+1,___ftmul@f1+1
  4454  000F0A  C033  F015         	movff	disp_show_quantity@f+2,___ftmul@f1+2
  4455  000F0E  EC13  F00A         	call	___ftmul	;wreg free
  4456  000F12  C013  F022         	movff	?___ftmul,___fttol@f1
  4457  000F16  C014  F023         	movff	?___ftmul+1,___fttol@f1+1
  4458  000F1A  C015  F024         	movff	?___ftmul+2,___fttol@f1+2
  4459  000F1E  EC8D  F00A         	call	___fttol	;wreg free
  4460  000F22  C022  F0E3         	movff	?___fttol,disp_show_quantity@I
  4461  000F26  C023  F0E4         	movff	?___fttol+1,disp_show_quantity@I+1
  4462  000F2A                     l3703:
  4463                           
  4464                           ;pulsonic.c: 210: };pulsonic.c: 212: };pulsonic.c: 213: itoa(buff, I, 10);
  4465  000F2A  0ED3               	movlw	low disp_show_quantity@buff
  4466  000F2C  6E1A               	movwf	itoa@buf,c
  4467  000F2E  C0E3  F01B         	movff	disp_show_quantity@I,itoa@val
  4468  000F32  C0E4  F01C         	movff	disp_show_quantity@I+1,itoa@val+1
  4469  000F36  0E00               	movlw	0
  4470  000F38  6E1E               	movwf	itoa@base+1,c
  4471  000F3A  0E0A               	movlw	10
  4472  000F3C  6E1D               	movwf	itoa@base,c
  4473  000F3E  EC2B  F00F         	call	_itoa	;wreg free
  4474                           
  4475                           ;pulsonic.c: 215: pulsonic.display7s[QUANT_DIG_2] = DISP7S_CHARS[OFF];
  4476  000F42  0E0B               	movlw	low _DISP7S_CHARS
  4477  000F44  6EF6               	movwf	tblptrl,c
  4478  000F46                     	if	1	;There is more than 1 active tblptr byte
  4479  000F46  0E08               	movlw	high _DISP7S_CHARS
  4480  000F48  6EF7               	movwf	tblptrh,c
  4481  000F4A                     	endif
  4482  000F4A                     	if	0	;There are less than 3 active tblptr bytes
  4483  000F4A                     	endif
  4484  000F4A  0008               	tblrd		*
  4485  000F4C  CFF5 F178          	movff	tablat,_pulsonic+120
  4486                           
  4487                           ;pulsonic.c: 216: pulsonic.display7s[QUANT_DIG_1] = DISP7S_CHARS[OFF];
  4488  000F50  0E0B               	movlw	low _DISP7S_CHARS
  4489  000F52  6EF6               	movwf	tblptrl,c
  4490  000F54                     	if	1	;There is more than 1 active tblptr byte
  4491  000F54  0E08               	movlw	high _DISP7S_CHARS
  4492  000F56  6EF7               	movwf	tblptrh,c
  4493  000F58                     	endif
  4494  000F58                     	if	0	;There are less than 3 active tblptr bytes
  4495  000F58                     	endif
  4496  000F58  0008               	tblrd		*
  4497  000F5A  CFF5 F177          	movff	tablat,_pulsonic+119
  4498                           
  4499                           ;pulsonic.c: 217: pulsonic.display7s[QUANT_DIG_0] = DISP7S_CHARS[OFF];
  4500  000F5E  0E0B               	movlw	low _DISP7S_CHARS
  4501  000F60  6EF6               	movwf	tblptrl,c
  4502  000F62                     	if	1	;There is more than 1 active tblptr byte
  4503  000F62  0E08               	movlw	high _DISP7S_CHARS
  4504  000F64  6EF7               	movwf	tblptrh,c
  4505  000F66                     	endif
  4506  000F66                     	if	0	;There are less than 3 active tblptr bytes
  4507  000F66                     	endif
  4508  000F66  0008               	tblrd		*
  4509  000F68  CFF5 F176          	movff	tablat,_pulsonic+118
  4510                           
  4511                           ;pulsonic.c: 219: if (real<0.01)
  4512  000F6C  C0DD  F016         	movff	disp_show_quantity@real,___ftge@ff1
  4513  000F70  C0DE  F017         	movff	disp_show_quantity@real+1,___ftge@ff1+1
  4514  000F74  C0DF  F018         	movff	disp_show_quantity@real+2,___ftge@ff1+2
  4515  000F78  0ED7               	movlw	215
  4516  000F7A  6E19               	movwf	___ftge@ff2,c
  4517  000F7C  0E23               	movlw	35
  4518  000F7E  6E1A               	movwf	___ftge@ff2+1,c
  4519  000F80  0E3C               	movlw	60
  4520  000F82  6E1B               	movwf	___ftge@ff2+2,c
  4521  000F84  ECA2  F00C         	call	___ftge	;wreg free
  4522  000F88  B0D8               	btfsc	status,0,c
  4523  000F8A  D037               	goto	l3739
  4524                           
  4525                           ;pulsonic.c: 220: {;pulsonic.c: 221: if (I>99)
  4526  000F8C  0100               	movlb	0	; () banked
  4527  000F8E  BFE4               	btfsc	(disp_show_quantity@I+1)& (0+255),7,b
  4528  000F90  D008               	goto	l3717
  4529  000F92  51E4               	movf	(disp_show_quantity@I+1)& (0+255),w,b
  4530  000F94  E104               	bnz	u4410
  4531  000F96  0E64               	movlw	100
  4532  000F98  5DE3               	subwf	disp_show_quantity@I& (0+255),w,b
  4533  000F9A  A0D8               	btfss	status,0,c
  4534  000F9C  D002               	goto	l3717
  4535  000F9E                     u4410:
  4536                           
  4537                           ; BSR set to: 0
  4538                           ;pulsonic.c: 222: last_pos = 2;
  4539  000F9E  0E02               	movlw	2
  4540  000FA0  D00B               	goto	L4
  4541  000FA2                     l3717:
  4542                           
  4543                           ; BSR set to: 0
  4544                           ;pulsonic.c: 223: else if (I>9)
  4545  000FA2  BFE4               	btfsc	(disp_show_quantity@I+1)& (0+255),7,b
  4546  000FA4  D008               	goto	l3721
  4547  000FA6  51E4               	movf	(disp_show_quantity@I+1)& (0+255),w,b
  4548  000FA8  E104               	bnz	u4420
  4549  000FAA  0E0A               	movlw	10
  4550  000FAC  5DE3               	subwf	disp_show_quantity@I& (0+255),w,b
  4551  000FAE  A0D8               	btfss	status,0,c
  4552  000FB0  D002               	goto	l3721
  4553  000FB2                     u4420:
  4554                           
  4555                           ; BSR set to: 0
  4556                           ;pulsonic.c: 224: last_pos = 1;
  4557  000FB2  0E01               	movlw	1
  4558  000FB4  D001               	goto	L4
  4559  000FB6                     l3721:
  4560                           
  4561                           ; BSR set to: 0
  4562                           ;pulsonic.c: 225: else;pulsonic.c: 226: last_pos = 0;
  4563  000FB6  0E00               	movlw	0
  4564  000FB8                     L4:
  4565  000FB8  6FE2               	movwf	disp_show_quantity@last_pos& (0+255),b
  4566                           
  4567                           ; BSR set to: 0
  4568                           ;pulsonic.c: 228: q = 0;
  4569  000FBA  0E00               	movlw	0
  4570  000FBC  6FE1               	movwf	disp_show_quantity@q& (0+255),b
  4571                           
  4572                           ; BSR set to: 0
  4573                           ;pulsonic.c: 229: for (i=last_pos; i>=0; i--)
  4574  000FBE  C0E2  F0E5         	movff	disp_show_quantity@last_pos,disp_show_quantity@i
  4575  000FC2                     l3725:
  4576                           
  4577                           ; BSR set to: 0
  4578  000FC2  BFE5               	btfsc	disp_show_quantity@i& (0+255),7,b
  4579  000FC4  0012               	return	
  4580                           
  4581                           ; BSR set to: 0
  4582                           ;pulsonic.c: 230: {;pulsonic.c: 231: num = buff[i] - 0x30;
  4583  000FC6  51E5               	movf	disp_show_quantity@i& (0+255),w,b
  4584  000FC8  0FD3               	addlw	low disp_show_quantity@buff
  4585  000FCA  6ED9               	movwf	fsr2l,c
  4586  000FCC  6ADA               	clrf	fsr2h,c
  4587  000FCE  50DF               	movf	indf2,w,c
  4588  000FD0  0FD0               	addlw	208
  4589  000FD2  6FE0               	movwf	disp_show_quantity@num& (0+255),b
  4590                           
  4591                           ; BSR set to: 0
  4592                           ;pulsonic.c: 232: pulsonic.display7s[q++] = DISP7S_NUMS[num];
  4593  000FD4  51E0               	movf	disp_show_quantity@num& (0+255),w,b
  4594  000FD6  0F01               	addlw	low _DISP7S_NUMS
  4595  000FD8  6E34               	movwf	??_disp_show_quantity& (0+255),c
  4596  000FDA  C034  FFF6         	movff	??_disp_show_quantity,tblptrl
  4597  000FDE                     	if	1	;There is more than 1 active tblptr byte
  4598  000FDE  0E08               	movlw	high __smallconst
  4599  000FE0  6EF7               	movwf	tblptrh,c
  4600  000FE2                     	endif
  4601  000FE2                     	if	0	;tblptru may be non-zero
  4602  000FE2                     	endif
  4603  000FE2                     	if	0	;tblptru may be non-zero
  4604  000FE2                     	endif
  4605  000FE2  0E76               	movlw	low (_pulsonic+118)
  4606  000FE4  25E1               	addwf	disp_show_quantity@q& (0+255),w,b
  4607  000FE6  6ED9               	movwf	fsr2l,c
  4608  000FE8  6ADA               	clrf	fsr2h,c
  4609  000FEA  0E01               	movlw	high (_pulsonic+118)
  4610  000FEC  22DA               	addwfc	fsr2h,f,c
  4611  000FEE  0008               	tblrd		*
  4612  000FF0  CFF5 FFDF          	movff	tablat,indf2
  4613                           
  4614                           ; BSR set to: 0
  4615  000FF4  2BE1               	incf	disp_show_quantity@q& (0+255),f,b
  4616                           
  4617                           ; BSR set to: 0
  4618  000FF6  07E5               	decf	disp_show_quantity@i& (0+255),f,b
  4619  000FF8  D7E4               	goto	l3725
  4620  000FFA                     l3739:
  4621                           
  4622                           ;pulsonic.c: 235: else;pulsonic.c: 236: {;pulsonic.c: 237: if (f<100.0)
  4623  000FFA  C031  F016         	movff	disp_show_quantity@f,___ftge@ff1
  4624  000FFE  C032  F017         	movff	disp_show_quantity@f+1,___ftge@ff1+1
  4625  001002  C033  F018         	movff	disp_show_quantity@f+2,___ftge@ff1+2
  4626  001006  0E00               	movlw	0
  4627  001008  6E19               	movwf	___ftge@ff2,c
  4628  00100A  0EC8               	movlw	200
  4629  00100C  6E1A               	movwf	___ftge@ff2+1,c
  4630  00100E  0E42               	movlw	66
  4631  001010  6E1B               	movwf	___ftge@ff2+2,c
  4632  001012  ECA2  F00C         	call	___ftge	;wreg free
  4633  001016  B0D8               	btfsc	status,0,c
  4634  001018  D041               	goto	l3773
  4635                           
  4636                           ;pulsonic.c: 238: {;pulsonic.c: 242: if (I>99)
  4637  00101A  0100               	movlb	0	; () banked
  4638  00101C  BFE4               	btfsc	(disp_show_quantity@I+1)& (0+255),7,b
  4639  00101E  D008               	goto	l3745
  4640  001020  51E4               	movf	(disp_show_quantity@I+1)& (0+255),w,b
  4641  001022  E104               	bnz	u4450
  4642  001024  0E64               	movlw	100
  4643  001026  5DE3               	subwf	disp_show_quantity@I& (0+255),w,b
  4644  001028  A0D8               	btfss	status,0,c
  4645  00102A  D002               	goto	l3745
  4646  00102C                     u4450:
  4647                           
  4648                           ; BSR set to: 0
  4649                           ;pulsonic.c: 243: {last_pos = 2;}
  4650  00102C  0E02               	movlw	2
  4651  00102E  D012               	goto	L5
  4652  001030                     l3745:
  4653                           
  4654                           ; BSR set to: 0
  4655                           ;pulsonic.c: 244: else if (I>9)
  4656  001030  BFE4               	btfsc	(disp_show_quantity@I+1)& (0+255),7,b
  4657  001032  D008               	goto	l3749
  4658  001034  51E4               	movf	(disp_show_quantity@I+1)& (0+255),w,b
  4659  001036  E104               	bnz	u4460
  4660  001038  0E0A               	movlw	10
  4661  00103A  5DE3               	subwf	disp_show_quantity@I& (0+255),w,b
  4662  00103C  A0D8               	btfss	status,0,c
  4663  00103E  D002               	goto	l3749
  4664  001040                     u4460:
  4665                           
  4666                           ; BSR set to: 0
  4667                           ;pulsonic.c: 245: {last_pos = 1;}
  4668  001040  0E01               	movlw	1
  4669  001042  D008               	goto	L5
  4670  001044                     l3749:
  4671                           
  4672                           ; BSR set to: 0
  4673                           ;pulsonic.c: 246: else;pulsonic.c: 247: {;pulsonic.c: 248: pulsonic.display7s[QUANT_DIG_
      +                          1] = DISP7S_NUMS[0];
  4674  001044  0E01               	movlw	low _DISP7S_NUMS
  4675  001046  6EF6               	movwf	tblptrl,c
  4676  001048                     	if	1	;There is more than 1 active tblptr byte
  4677  001048  0E08               	movlw	high _DISP7S_NUMS
  4678  00104A  6EF7               	movwf	tblptrh,c
  4679  00104C                     	endif
  4680  00104C                     	if	0	;There are less than 3 active tblptr bytes
  4681  00104C                     	endif
  4682  00104C  0008               	tblrd		*
  4683  00104E  CFF5 F177          	movff	tablat,_pulsonic+119
  4684                           
  4685                           ; BSR set to: 0
  4686                           ;pulsonic.c: 249: last_pos = 0;
  4687  001052  0E00               	movlw	0
  4688  001054                     L5:
  4689  001054  6FE2               	movwf	disp_show_quantity@last_pos& (0+255),b
  4690                           
  4691                           ; BSR set to: 0
  4692                           ;pulsonic.c: 250: };pulsonic.c: 252: q = 0;
  4693  001056  0E00               	movlw	0
  4694  001058  6FE1               	movwf	disp_show_quantity@q& (0+255),b
  4695                           
  4696                           ; BSR set to: 0
  4697                           ;pulsonic.c: 253: for (i=last_pos; i>=0; i--)
  4698  00105A  C0E2  F0E5         	movff	disp_show_quantity@last_pos,disp_show_quantity@i
  4699  00105E                     l3757:
  4700                           
  4701                           ; BSR set to: 0
  4702  00105E  BFE5               	btfsc	disp_show_quantity@i& (0+255),7,b
  4703  001060  D01A               	goto	l3771
  4704                           
  4705                           ; BSR set to: 0
  4706                           ;pulsonic.c: 254: {;pulsonic.c: 255: num = buff[i] - 0x30;
  4707  001062  51E5               	movf	disp_show_quantity@i& (0+255),w,b
  4708  001064  0FD3               	addlw	low disp_show_quantity@buff
  4709  001066  6ED9               	movwf	fsr2l,c
  4710  001068  6ADA               	clrf	fsr2h,c
  4711  00106A  50DF               	movf	indf2,w,c
  4712  00106C  0FD0               	addlw	208
  4713  00106E  6FE0               	movwf	disp_show_quantity@num& (0+255),b
  4714                           
  4715                           ; BSR set to: 0
  4716                           ;pulsonic.c: 256: pulsonic.display7s[q++] = DISP7S_NUMS[num];
  4717  001070  51E0               	movf	disp_show_quantity@num& (0+255),w,b
  4718  001072  0F01               	addlw	low _DISP7S_NUMS
  4719  001074  6E34               	movwf	??_disp_show_quantity& (0+255),c
  4720  001076  C034  FFF6         	movff	??_disp_show_quantity,tblptrl
  4721  00107A                     	if	1	;There is more than 1 active tblptr byte
  4722  00107A  0E08               	movlw	high __smallconst
  4723  00107C  6EF7               	movwf	tblptrh,c
  4724  00107E                     	endif
  4725  00107E                     	if	0	;tblptru may be non-zero
  4726  00107E                     	endif
  4727  00107E                     	if	0	;tblptru may be non-zero
  4728  00107E                     	endif
  4729  00107E  0E76               	movlw	low (_pulsonic+118)
  4730  001080  25E1               	addwf	disp_show_quantity@q& (0+255),w,b
  4731  001082  6ED9               	movwf	fsr2l,c
  4732  001084  6ADA               	clrf	fsr2h,c
  4733  001086  0E01               	movlw	high (_pulsonic+118)
  4734  001088  22DA               	addwfc	fsr2h,f,c
  4735  00108A  0008               	tblrd		*
  4736  00108C  CFF5 FFDF          	movff	tablat,indf2
  4737                           
  4738                           ; BSR set to: 0
  4739  001090  2BE1               	incf	disp_show_quantity@q& (0+255),f,b
  4740                           
  4741                           ; BSR set to: 0
  4742  001092  07E5               	decf	disp_show_quantity@i& (0+255),f,b
  4743  001094  D7E4               	goto	l3757
  4744  001096                     l3771:
  4745                           
  4746                           ; BSR set to: 0
  4747                           ;pulsonic.c: 257: };pulsonic.c: 258: pulsonic.display7s[QUANT_DIG_1] |= 0x80;
  4748  001096  0101               	movlb	1	; () banked
  4749  001098  8F77               	bsf	(_pulsonic+119)& (0+255),7,b
  4750                           
  4751                           ;pulsonic.c: 259: }
  4752  00109A  0012               	return	
  4753  00109C                     l3773:
  4754                           
  4755                           ;pulsonic.c: 260: else;pulsonic.c: 261: {;pulsonic.c: 262: q = 0;
  4756  00109C  0E00               	movlw	0
  4757  00109E  0100               	movlb	0	; () banked
  4758  0010A0  6FE1               	movwf	disp_show_quantity@q& (0+255),b
  4759                           
  4760                           ; BSR set to: 0
  4761                           ;pulsonic.c: 264: for (i=last_pos; i>=0; i--)
  4762  0010A2  0E02               	movlw	2
  4763  0010A4  6FE5               	movwf	disp_show_quantity@i& (0+255),b
  4764  0010A6                     l3781:
  4765                           
  4766                           ; BSR set to: 0
  4767                           ;pulsonic.c: 265: {;pulsonic.c: 266: num = buff[i] - 0x30;
  4768  0010A6  51E5               	movf	disp_show_quantity@i& (0+255),w,b
  4769  0010A8  0FD3               	addlw	low disp_show_quantity@buff
  4770  0010AA  6ED9               	movwf	fsr2l,c
  4771  0010AC  6ADA               	clrf	fsr2h,c
  4772  0010AE  50DF               	movf	indf2,w,c
  4773  0010B0  0FD0               	addlw	208
  4774  0010B2  6FE0               	movwf	disp_show_quantity@num& (0+255),b
  4775                           
  4776                           ; BSR set to: 0
  4777                           ;pulsonic.c: 267: pulsonic.display7s[q++] = DISP7S_NUMS[num];
  4778  0010B4  51E0               	movf	disp_show_quantity@num& (0+255),w,b
  4779  0010B6  0F01               	addlw	low _DISP7S_NUMS
  4780  0010B8  6E34               	movwf	??_disp_show_quantity& (0+255),c
  4781  0010BA  C034  FFF6         	movff	??_disp_show_quantity,tblptrl
  4782  0010BE                     	if	1	;There is more than 1 active tblptr byte
  4783  0010BE  0E08               	movlw	high __smallconst
  4784  0010C0  6EF7               	movwf	tblptrh,c
  4785  0010C2                     	endif
  4786  0010C2                     	if	0	;tblptru may be non-zero
  4787  0010C2                     	endif
  4788  0010C2                     	if	0	;tblptru may be non-zero
  4789  0010C2                     	endif
  4790  0010C2  0E76               	movlw	low (_pulsonic+118)
  4791  0010C4  25E1               	addwf	disp_show_quantity@q& (0+255),w,b
  4792  0010C6  6ED9               	movwf	fsr2l,c
  4793  0010C8  6ADA               	clrf	fsr2h,c
  4794  0010CA  0E01               	movlw	high (_pulsonic+118)
  4795  0010CC  22DA               	addwfc	fsr2h,f,c
  4796  0010CE  0008               	tblrd		*
  4797  0010D0  CFF5 FFDF          	movff	tablat,indf2
  4798                           
  4799                           ; BSR set to: 0
  4800  0010D4  2BE1               	incf	disp_show_quantity@q& (0+255),f,b
  4801                           
  4802                           ; BSR set to: 0
  4803  0010D6  07E5               	decf	disp_show_quantity@i& (0+255),f,b
  4804                           
  4805                           ; BSR set to: 0
  4806  0010D8  BFE5               	btfsc	disp_show_quantity@i& (0+255),7,b
  4807  0010DA  0012               	return	
  4808  0010DC  D7E4               	goto	l3781
  4809  0010DE                     __end_of_disp_show_quantity:
  4810                           	opt callstack 0
  4811                           
  4812 ;; *************** function _itoa *****************
  4813 ;; Defined at:
  4814 ;;		line 4 in file "/opt/microchip/xc8/v2.05/pic/sources/c90/common/itoa.c"
  4815 ;; Parameters:    Size  Location     Type
  4816 ;;  buf             1   25[COMRAM] PTR unsigned char 
  4817 ;;		 -> disp_show_quantity@buff(10), 
  4818 ;;  val             2   26[COMRAM] int 
  4819 ;;  base            2   28[COMRAM] int 
  4820 ;; Auto vars:     Size  Location     Type
  4821 ;;  cp              1    0        PTR unsigned char 
  4822 ;;		 -> disp_show_quantity@buff(10), 
  4823 ;; Return value:  Size  Location     Type
  4824 ;;                  1    wreg      PTR unsigned char 
  4825 ;; Registers used:
  4826 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4827 ;; Tracked objects:
  4828 ;;		On entry : 0/0
  4829 ;;		On exit  : 0/0
  4830 ;;		Unchanged: 0/0
  4831 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4832 ;;      Params:         5       0       0       0       0       0       0       0       0
  4833 ;;      Locals:         1       0       0       0       0       0       0       0       0
  4834 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4835 ;;      Totals:         6       0       0       0       0       0       0       0       0
  4836 ;;Total ram usage:        6 bytes
  4837 ;; Hardware stack levels used:    1
  4838 ;; Hardware stack levels required when called:    7
  4839 ;; This function calls:
  4840 ;;		_utoa
  4841 ;; This function is called by:
  4842 ;;		_disp_show_quantity
  4843 ;; This function uses a non-reentrant model
  4844 ;;
  4845                           
  4846                           	psect	text36
  4847  001E56                     __ptext36:
  4848                           	opt callstack 0
  4849  001E56                     _itoa:
  4850                           	opt callstack 22
  4851                           
  4852                           ;incstack = 0
  4853  001E56  AE1C               	btfss	itoa@val+1,7,c
  4854  001E58  D00A               	goto	l3571
  4855  001E5A  501A               	movf	itoa@buf,w,c
  4856  001E5C  6ED9               	movwf	fsr2l,c
  4857  001E5E  6ADA               	clrf	fsr2h,c
  4858  001E60  0E2D               	movlw	45
  4859  001E62  6EDF               	movwf	indf2,c
  4860  001E64  2A1A               	incf	itoa@buf,f,c
  4861  001E66  6C1B               	negf	itoa@val,c
  4862  001E68  1E1C               	comf	itoa@val+1,f,c
  4863  001E6A  B0D8               	btfsc	status,0,c
  4864  001E6C  2A1C               	incf	itoa@val+1,f,c
  4865  001E6E                     l3571:
  4866  001E6E  C01A  F012         	movff	itoa@buf,utoa@buf
  4867  001E72  C01B  F013         	movff	itoa@val,utoa@val
  4868  001E76  C01C  F014         	movff	itoa@val+1,utoa@val+1
  4869  001E7A  C01D  F015         	movff	itoa@base,utoa@base
  4870  001E7E  C01E  F016         	movff	itoa@base+1,utoa@base+1
  4871  001E82  EC58  F00C         	call	_utoa	;wreg free
  4872  001E86  0012               	return		;funcret
  4873  001E88                     __end_of_itoa:
  4874                           	opt callstack 0
  4875                           
  4876 ;; *************** function _utoa *****************
  4877 ;; Defined at:
  4878 ;;		line 17 in file "/opt/microchip/xc8/v2.05/pic/sources/c90/common/itoa.c"
  4879 ;; Parameters:    Size  Location     Type
  4880 ;;  buf             1   17[COMRAM] PTR unsigned char 
  4881 ;;		 -> disp_show_quantity@buff(10), 
  4882 ;;  val             2   18[COMRAM] unsigned int 
  4883 ;;  base            2   20[COMRAM] int 
  4884 ;; Auto vars:     Size  Location     Type
  4885 ;;  v               2   22[COMRAM] unsigned int 
  4886 ;;  c               1   24[COMRAM] unsigned char 
  4887 ;; Return value:  Size  Location     Type
  4888 ;;                  1    wreg      PTR unsigned char 
  4889 ;; Registers used:
  4890 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4891 ;; Tracked objects:
  4892 ;;		On entry : 0/0
  4893 ;;		On exit  : 0/0
  4894 ;;		Unchanged: 0/0
  4895 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4896 ;;      Params:         5       0       0       0       0       0       0       0       0
  4897 ;;      Locals:         3       0       0       0       0       0       0       0       0
  4898 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4899 ;;      Totals:         8       0       0       0       0       0       0       0       0
  4900 ;;Total ram usage:        8 bytes
  4901 ;; Hardware stack levels used:    1
  4902 ;; Hardware stack levels required when called:    6
  4903 ;; This function calls:
  4904 ;;		___lwdiv
  4905 ;;		___lwmod
  4906 ;; This function is called by:
  4907 ;;		_itoa
  4908 ;; This function uses a non-reentrant model
  4909 ;;
  4910                           
  4911                           	psect	text37
  4912  0018B0                     __ptext37:
  4913                           	opt callstack 0
  4914  0018B0                     _utoa:
  4915                           	opt callstack 22
  4916                           
  4917                           ;incstack = 0
  4918  0018B0  C013  F017         	movff	utoa@val,utoa@v
  4919  0018B4  C014  F018         	movff	utoa@val+1,utoa@v+1
  4920  0018B8                     l3439:
  4921  0018B8  C017  F00B         	movff	utoa@v,___lwdiv@dividend
  4922  0018BC  C018  F00C         	movff	utoa@v+1,___lwdiv@dividend+1
  4923  0018C0  C015  F00D         	movff	utoa@base,___lwdiv@divisor
  4924  0018C4  C016  F00E         	movff	utoa@base+1,___lwdiv@divisor+1
  4925  0018C8  ECA7  F00D         	call	___lwdiv	;wreg free
  4926  0018CC  C00B  F017         	movff	?___lwdiv,utoa@v
  4927  0018D0  C00C  F018         	movff	?___lwdiv+1,utoa@v+1
  4928  0018D4  2A12               	incf	utoa@buf,f,c
  4929  0018D6  5017               	movf	utoa@v,w,c
  4930  0018D8  1018               	iorwf	utoa@v+1,w,c
  4931  0018DA  A4D8               	btfss	status,2,c
  4932  0018DC  D7ED               	goto	l3439
  4933  0018DE  5012               	movf	utoa@buf,w,c
  4934  0018E0  6ED9               	movwf	fsr2l,c
  4935  0018E2  6ADA               	clrf	fsr2h,c
  4936  0018E4  0E00               	movlw	0
  4937  0018E6  6EDF               	movwf	indf2,c
  4938  0018E8  0612               	decf	utoa@buf,f,c
  4939  0018EA                     l3449:
  4940  0018EA  C013  F00B         	movff	utoa@val,___lwmod@dividend
  4941  0018EE  C014  F00C         	movff	utoa@val+1,___lwmod@dividend+1
  4942  0018F2  C015  F00D         	movff	utoa@base,___lwmod@divisor
  4943  0018F6  C016  F00E         	movff	utoa@base+1,___lwmod@divisor+1
  4944  0018FA  EC8D  F00E         	call	___lwmod	;wreg free
  4945  0018FE  500B               	movf	?___lwmod,w,c
  4946  001900  6E19               	movwf	utoa@c,c
  4947  001902  C013  F00B         	movff	utoa@val,___lwdiv@dividend
  4948  001906  C014  F00C         	movff	utoa@val+1,___lwdiv@dividend+1
  4949  00190A  C015  F00D         	movff	utoa@base,___lwdiv@divisor
  4950  00190E  C016  F00E         	movff	utoa@base+1,___lwdiv@divisor+1
  4951  001912  ECA7  F00D         	call	___lwdiv	;wreg free
  4952  001916  C00B  F013         	movff	?___lwdiv,utoa@val
  4953  00191A  C00C  F014         	movff	?___lwdiv+1,utoa@val+1
  4954  00191E  0E09               	movlw	9
  4955  001920  6419               	cpfsgt	utoa@c,c
  4956  001922  D002               	goto	l1211
  4957  001924  0E07               	movlw	7
  4958  001926  2619               	addwf	utoa@c,f,c
  4959  001928                     l1211:
  4960  001928  0E30               	movlw	48
  4961  00192A  2619               	addwf	utoa@c,f,c
  4962  00192C  5012               	movf	utoa@buf,w,c
  4963  00192E  6ED9               	movwf	fsr2l,c
  4964  001930  6ADA               	clrf	fsr2h,c
  4965  001932  C019  FFDF         	movff	utoa@c,indf2
  4966  001936  0612               	decf	utoa@buf,f,c
  4967  001938  5013               	movf	utoa@val,w,c
  4968  00193A  1014               	iorwf	utoa@val+1,w,c
  4969  00193C  A4D8               	btfss	status,2,c
  4970  00193E  D7D5               	goto	l3449
  4971                           
  4972                           ;	Return value of _utoa is never used
  4973  001940  2A12               	incf	utoa@buf,f,c
  4974  001942  0012               	return		;funcret
  4975  001944                     __end_of_utoa:
  4976                           	opt callstack 0
  4977                           
  4978 ;; *************** function ___lwmod *****************
  4979 ;; Defined at:
  4980 ;;		line 7 in file "/opt/microchip/xc8/v2.05/pic/sources/c90/common/lwmod.c"
  4981 ;; Parameters:    Size  Location     Type
  4982 ;;  dividend        2   10[COMRAM] unsigned int 
  4983 ;;  divisor         2   12[COMRAM] unsigned int 
  4984 ;; Auto vars:     Size  Location     Type
  4985 ;;  counter         1   14[COMRAM] unsigned char 
  4986 ;; Return value:  Size  Location     Type
  4987 ;;                  2   10[COMRAM] unsigned int 
  4988 ;; Registers used:
  4989 ;;		wreg, status,2, status,0
  4990 ;; Tracked objects:
  4991 ;;		On entry : 0/0
  4992 ;;		On exit  : 0/0
  4993 ;;		Unchanged: 0/0
  4994 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4995 ;;      Params:         4       0       0       0       0       0       0       0       0
  4996 ;;      Locals:         1       0       0       0       0       0       0       0       0
  4997 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4998 ;;      Totals:         5       0       0       0       0       0       0       0       0
  4999 ;;Total ram usage:        5 bytes
  5000 ;; Hardware stack levels used:    1
  5001 ;; Hardware stack levels required when called:    5
  5002 ;; This function calls:
  5003 ;;		Nothing
  5004 ;; This function is called by:
  5005 ;;		_utoa
  5006 ;; This function uses a non-reentrant model
  5007 ;;
  5008                           
  5009                           	psect	text38
  5010  001D1A                     __ptext38:
  5011                           	opt callstack 0
  5012  001D1A                     ___lwmod:
  5013                           	opt callstack 22
  5014                           
  5015                           ;incstack = 0
  5016  001D1A  500D               	movf	___lwmod@divisor,w,c
  5017  001D1C  100E               	iorwf	___lwmod@divisor+1,w,c
  5018  001D1E  B4D8               	btfsc	status,2,c
  5019  001D20  D018               	goto	l1029
  5020  001D22  0E01               	movlw	1
  5021  001D24  6E0F               	movwf	___lwmod@counter,c
  5022  001D26  D004               	goto	l3335
  5023  001D28                     l3333:
  5024  001D28  90D8               	bcf	status,0,c
  5025  001D2A  360D               	rlcf	___lwmod@divisor,f,c
  5026  001D2C  360E               	rlcf	___lwmod@divisor+1,f,c
  5027  001D2E  2A0F               	incf	___lwmod@counter,f,c
  5028  001D30                     l3335:
  5029  001D30  AE0E               	btfss	___lwmod@divisor+1,7,c
  5030  001D32  D7FA               	goto	l3333
  5031  001D34                     u3550:
  5032  001D34  500D               	movf	___lwmod@divisor,w,c
  5033  001D36  5C0B               	subwf	___lwmod@dividend,w,c
  5034  001D38  500E               	movf	___lwmod@divisor+1,w,c
  5035  001D3A  580C               	subwfb	___lwmod@dividend+1,w,c
  5036  001D3C  A0D8               	btfss	status,0,c
  5037  001D3E  D004               	goto	l3341
  5038  001D40  500D               	movf	___lwmod@divisor,w,c
  5039  001D42  5E0B               	subwf	___lwmod@dividend,f,c
  5040  001D44  500E               	movf	___lwmod@divisor+1,w,c
  5041  001D46  5A0C               	subwfb	___lwmod@dividend+1,f,c
  5042  001D48                     l3341:
  5043  001D48  90D8               	bcf	status,0,c
  5044  001D4A  320E               	rrcf	___lwmod@divisor+1,f,c
  5045  001D4C  320D               	rrcf	___lwmod@divisor,f,c
  5046  001D4E  2E0F               	decfsz	___lwmod@counter,f,c
  5047  001D50  D7F1               	goto	u3550
  5048  001D52                     l1029:
  5049  001D52  C00B  F00B         	movff	___lwmod@dividend,?___lwmod
  5050  001D56  C00C  F00C         	movff	___lwmod@dividend+1,?___lwmod+1
  5051  001D5A  0012               	return		;funcret
  5052  001D5C                     __end_of___lwmod:
  5053                           	opt callstack 0
  5054                           
  5055 ;; *************** function ___lwdiv *****************
  5056 ;; Defined at:
  5057 ;;		line 7 in file "/opt/microchip/xc8/v2.05/pic/sources/c90/common/lwdiv.c"
  5058 ;; Parameters:    Size  Location     Type
  5059 ;;  dividend        2   10[COMRAM] unsigned int 
  5060 ;;  divisor         2   12[COMRAM] unsigned int 
  5061 ;; Auto vars:     Size  Location     Type
  5062 ;;  quotient        2   15[COMRAM] unsigned int 
  5063 ;;  counter         1   14[COMRAM] unsigned char 
  5064 ;; Return value:  Size  Location     Type
  5065 ;;                  2   10[COMRAM] unsigned int 
  5066 ;; Registers used:
  5067 ;;		wreg, status,2, status,0
  5068 ;; Tracked objects:
  5069 ;;		On entry : 0/0
  5070 ;;		On exit  : 0/0
  5071 ;;		Unchanged: 0/0
  5072 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5073 ;;      Params:         4       0       0       0       0       0       0       0       0
  5074 ;;      Locals:         3       0       0       0       0       0       0       0       0
  5075 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5076 ;;      Totals:         7       0       0       0       0       0       0       0       0
  5077 ;;Total ram usage:        7 bytes
  5078 ;; Hardware stack levels used:    1
  5079 ;; Hardware stack levels required when called:    5
  5080 ;; This function calls:
  5081 ;;		Nothing
  5082 ;; This function is called by:
  5083 ;;		_utoa
  5084 ;; This function uses a non-reentrant model
  5085 ;;
  5086                           
  5087                           	psect	text39
  5088  001B4E                     __ptext39:
  5089                           	opt callstack 0
  5090  001B4E                     ___lwdiv:
  5091                           	opt callstack 22
  5092                           
  5093                           ;incstack = 0
  5094  001B4E  0E00               	movlw	0
  5095  001B50  6E11               	movwf	___lwdiv@quotient+1,c
  5096  001B52  0E00               	movlw	0
  5097  001B54  6E10               	movwf	___lwdiv@quotient,c
  5098  001B56  500D               	movf	___lwdiv@divisor,w,c
  5099  001B58  100E               	iorwf	___lwdiv@divisor+1,w,c
  5100  001B5A  B4D8               	btfsc	status,2,c
  5101  001B5C  D01C               	goto	l1019
  5102  001B5E  0E01               	movlw	1
  5103  001B60  6E0F               	movwf	___lwdiv@counter,c
  5104  001B62  D004               	goto	l3315
  5105  001B64                     l3313:
  5106  001B64  90D8               	bcf	status,0,c
  5107  001B66  360D               	rlcf	___lwdiv@divisor,f,c
  5108  001B68  360E               	rlcf	___lwdiv@divisor+1,f,c
  5109  001B6A  2A0F               	incf	___lwdiv@counter,f,c
  5110  001B6C                     l3315:
  5111  001B6C  AE0E               	btfss	___lwdiv@divisor+1,7,c
  5112  001B6E  D7FA               	goto	l3313
  5113  001B70                     u3520:
  5114  001B70  90D8               	bcf	status,0,c
  5115  001B72  3610               	rlcf	___lwdiv@quotient,f,c
  5116  001B74  3611               	rlcf	___lwdiv@quotient+1,f,c
  5117  001B76  500D               	movf	___lwdiv@divisor,w,c
  5118  001B78  5C0B               	subwf	___lwdiv@dividend,w,c
  5119  001B7A  500E               	movf	___lwdiv@divisor+1,w,c
  5120  001B7C  580C               	subwfb	___lwdiv@dividend+1,w,c
  5121  001B7E  A0D8               	btfss	status,0,c
  5122  001B80  D005               	goto	l3325
  5123  001B82  500D               	movf	___lwdiv@divisor,w,c
  5124  001B84  5E0B               	subwf	___lwdiv@dividend,f,c
  5125  001B86  500E               	movf	___lwdiv@divisor+1,w,c
  5126  001B88  5A0C               	subwfb	___lwdiv@dividend+1,f,c
  5127  001B8A  8010               	bsf	___lwdiv@quotient,0,c
  5128  001B8C                     l3325:
  5129  001B8C  90D8               	bcf	status,0,c
  5130  001B8E  320E               	rrcf	___lwdiv@divisor+1,f,c
  5131  001B90  320D               	rrcf	___lwdiv@divisor,f,c
  5132  001B92  2E0F               	decfsz	___lwdiv@counter,f,c
  5133  001B94  D7ED               	goto	u3520
  5134  001B96                     l1019:
  5135  001B96  C010  F00B         	movff	___lwdiv@quotient,?___lwdiv
  5136  001B9A  C011  F00C         	movff	___lwdiv@quotient+1,?___lwdiv+1
  5137  001B9E  0012               	return		;funcret
  5138  001BA0                     __end_of___lwdiv:
  5139                           	opt callstack 0
  5140                           
  5141 ;; *************** function ___fttol *****************
  5142 ;; Defined at:
  5143 ;;		line 44 in file "/opt/microchip/xc8/v2.05/pic/sources/c90/common/fttol.c"
  5144 ;; Parameters:    Size  Location     Type
  5145 ;;  f1              3   33[COMRAM] float 
  5146 ;; Auto vars:     Size  Location     Type
  5147 ;;  lval            4   43[COMRAM] unsigned long 
  5148 ;;  exp1            1   47[COMRAM] unsigned char 
  5149 ;;  sign1           1   42[COMRAM] unsigned char 
  5150 ;; Return value:  Size  Location     Type
  5151 ;;                  4   33[COMRAM] long 
  5152 ;; Registers used:
  5153 ;;		wreg, status,2, status,0
  5154 ;; Tracked objects:
  5155 ;;		On entry : 0/0
  5156 ;;		On exit  : 0/0
  5157 ;;		Unchanged: 0/0
  5158 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5159 ;;      Params:         4       0       0       0       0       0       0       0       0
  5160 ;;      Locals:         6       0       0       0       0       0       0       0       0
  5161 ;;      Temps:          5       0       0       0       0       0       0       0       0
  5162 ;;      Totals:        15       0       0       0       0       0       0       0       0
  5163 ;;Total ram usage:       15 bytes
  5164 ;; Hardware stack levels used:    1
  5165 ;; Hardware stack levels required when called:    5
  5166 ;; This function calls:
  5167 ;;		Nothing
  5168 ;; This function is called by:
  5169 ;;		_disp_show_quantity
  5170 ;; This function uses a non-reentrant model
  5171 ;;
  5172                           
  5173                           	psect	text40
  5174  00151A                     __ptext40:
  5175                           	opt callstack 0
  5176  00151A                     ___fttol:
  5177                           	opt callstack 24
  5178                           
  5179                           ;incstack = 0
  5180  00151A  C024  F026         	movff	___fttol@f1+2,??___fttol
  5181  00151E  6A27               	clrf	(??___fttol+1)& (0+255),c
  5182  001520  6A28               	clrf	(??___fttol+2)& (0+255),c
  5183  001522  3423               	rlcf	___fttol@f1+1,w,c
  5184  001524  3626               	rlcf	??___fttol& (0+255),f,c
  5185  001526  E301               	bnc	u4291
  5186  001528  8027               	bsf	(??___fttol+1)& (0+255),0,c
  5187  00152A                     u4291:
  5188  00152A  5026               	movf	??___fttol,w,c
  5189  00152C  6E30               	movwf	___fttol@exp1,c
  5190  00152E  5030               	movf	___fttol@exp1,w,c
  5191  001530  A4D8               	btfss	status,2,c
  5192  001532  D009               	goto	l3649
  5193  001534                     u4300:
  5194  001534  0E00               	movlw	0
  5195  001536  6E22               	movwf	?___fttol,c
  5196  001538  0E00               	movlw	0
  5197  00153A  6E23               	movwf	?___fttol+1,c
  5198  00153C  0E00               	movlw	0
  5199  00153E  6E24               	movwf	?___fttol+2,c
  5200  001540  0E00               	movlw	0
  5201  001542  6E25               	movwf	?___fttol+3,c
  5202  001544  0012               	return	
  5203  001546                     l3649:
  5204  001546  0E17               	movlw	23
  5205  001548  6E26               	movwf	??___fttol& (0+255),c
  5206  00154A  C022  F027         	movff	___fttol@f1,??___fttol+1
  5207  00154E  C023  F028         	movff	___fttol@f1+1,??___fttol+2
  5208  001552  C024  F029         	movff	___fttol@f1+2,??___fttol+3
  5209  001556  2826               	incf	??___fttol,w,c
  5210  001558  6E2A               	movwf	(??___fttol+4)& (0+255),c
  5211  00155A  D004               	goto	u4310
  5212  00155C                     u4315:
  5213  00155C  90D8               	bcf	status,0,c
  5214  00155E  3229               	rrcf	??___fttol+3,f,c
  5215  001560  3228               	rrcf	??___fttol+2,f,c
  5216  001562  3227               	rrcf	??___fttol+1,f,c
  5217  001564                     u4310:
  5218  001564  2E2A               	decfsz	(??___fttol+4)& (0+255),f,c
  5219  001566  D7FA               	goto	u4315
  5220  001568  5027               	movf	??___fttol+1,w,c
  5221  00156A  6E2B               	movwf	___fttol@sign1,c
  5222  00156C  8E23               	bsf	___fttol@f1+1,7,c
  5223  00156E  0EFF               	movlw	255
  5224  001570  1622               	andwf	___fttol@f1,f,c
  5225  001572  0EFF               	movlw	255
  5226  001574  1623               	andwf	___fttol@f1+1,f,c
  5227  001576  0E00               	movlw	0
  5228  001578  1624               	andwf	___fttol@f1+2,f,c
  5229  00157A  5022               	movf	___fttol@f1,w,c
  5230  00157C  6E2C               	movwf	___fttol@lval,c
  5231  00157E  5023               	movf	___fttol@f1+1,w,c
  5232  001580  6E2D               	movwf	___fttol@lval+1,c
  5233  001582  5024               	movf	___fttol@f1+2,w,c
  5234  001584  6E2E               	movwf	___fttol@lval+2,c
  5235  001586  6A2F               	clrf	___fttol@lval+3,c
  5236  001588  0E8E               	movlw	142
  5237  00158A  5E30               	subwf	___fttol@exp1,f,c
  5238  00158C  AE30               	btfss	___fttol@exp1,7,c
  5239  00158E  D00D               	goto	l3671
  5240  001590  5030               	movf	___fttol@exp1,w,c
  5241  001592  0A80               	xorlw	128
  5242  001594  0F8F               	addlw	143
  5243  001596  A0D8               	btfss	status,0,c
  5244  001598  D7CD               	goto	u4300
  5245  00159A                     l3667:
  5246  00159A  90D8               	bcf	status,0,c
  5247  00159C  322F               	rrcf	___fttol@lval+3,f,c
  5248  00159E  322E               	rrcf	___fttol@lval+2,f,c
  5249  0015A0  322D               	rrcf	___fttol@lval+1,f,c
  5250  0015A2  322C               	rrcf	___fttol@lval,f,c
  5251  0015A4  3E30               	incfsz	___fttol@exp1,f,c
  5252  0015A6  D7F9               	goto	l3667
  5253  0015A8  D00D               	goto	u4350
  5254  0015AA                     l3671:
  5255  0015AA  0E17               	movlw	23
  5256  0015AC  6430               	cpfsgt	___fttol@exp1,c
  5257  0015AE  D007               	goto	l3679
  5258  0015B0  D7C1               	goto	u4300
  5259  0015B2                     l3677:
  5260  0015B2  90D8               	bcf	status,0,c
  5261  0015B4  362C               	rlcf	___fttol@lval,f,c
  5262  0015B6  362D               	rlcf	___fttol@lval+1,f,c
  5263  0015B8  362E               	rlcf	___fttol@lval+2,f,c
  5264  0015BA  362F               	rlcf	___fttol@lval+3,f,c
  5265  0015BC  0630               	decf	___fttol@exp1,f,c
  5266  0015BE                     l3679:
  5267  0015BE  5030               	movf	___fttol@exp1,w,c
  5268  0015C0  A4D8               	btfss	status,2,c
  5269  0015C2  D7F7               	goto	l3677
  5270  0015C4                     u4350:
  5271  0015C4  502B               	movf	___fttol@sign1,w,c
  5272  0015C6  B4D8               	btfsc	status,2,c
  5273  0015C8  D008               	goto	l3685
  5274  0015CA  1E2F               	comf	___fttol@lval+3,f,c
  5275  0015CC  1E2E               	comf	___fttol@lval+2,f,c
  5276  0015CE  1E2D               	comf	___fttol@lval+1,f,c
  5277  0015D0  6C2C               	negf	___fttol@lval,c
  5278  0015D2  0E00               	movlw	0
  5279  0015D4  222D               	addwfc	___fttol@lval+1,f,c
  5280  0015D6  222E               	addwfc	___fttol@lval+2,f,c
  5281  0015D8  222F               	addwfc	___fttol@lval+3,f,c
  5282  0015DA                     l3685:
  5283  0015DA  C02C  F022         	movff	___fttol@lval,?___fttol
  5284  0015DE  C02D  F023         	movff	___fttol@lval+1,?___fttol+1
  5285  0015E2  C02E  F024         	movff	___fttol@lval+2,?___fttol+2
  5286  0015E6  C02F  F025         	movff	___fttol@lval+3,?___fttol+3
  5287  0015EA  0012               	return		;funcret
  5288  0015EC                     __end_of___fttol:
  5289                           	opt callstack 0
  5290                           
  5291 ;; *************** function ___ftsub *****************
  5292 ;; Defined at:
  5293 ;;		line 19 in file "/opt/microchip/xc8/v2.05/pic/sources/c90/common/ftsub.c"
  5294 ;; Parameters:    Size  Location     Type
  5295 ;;  f1              3   30[COMRAM] float 
  5296 ;;  f2              3   33[COMRAM] float 
  5297 ;; Auto vars:     Size  Location     Type
  5298 ;;		None
  5299 ;; Return value:  Size  Location     Type
  5300 ;;                  3   30[COMRAM] float 
  5301 ;; Registers used:
  5302 ;;		wreg, status,2, status,0, cstack
  5303 ;; Tracked objects:
  5304 ;;		On entry : 0/0
  5305 ;;		On exit  : 0/0
  5306 ;;		Unchanged: 0/0
  5307 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5308 ;;      Params:         6       0       0       0       0       0       0       0       0
  5309 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5310 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5311 ;;      Totals:         6       0       0       0       0       0       0       0       0
  5312 ;;Total ram usage:        6 bytes
  5313 ;; Hardware stack levels used:    1
  5314 ;; Hardware stack levels required when called:    7
  5315 ;; This function calls:
  5316 ;;		___ftadd
  5317 ;; This function is called by:
  5318 ;;		_disp_show_quantity
  5319 ;; This function uses a non-reentrant model
  5320 ;;
  5321                           
  5322                           	psect	text41
  5323  001DDE                     __ptext41:
  5324                           	opt callstack 0
  5325  001DDE                     ___ftsub:
  5326                           	opt callstack 22
  5327                           
  5328                           ;incstack = 0
  5329  001DDE  5022               	movf	___ftsub@f2,w,c
  5330  001DE0  1023               	iorwf	___ftsub@f2+1,w,c
  5331  001DE2  1024               	iorwf	___ftsub@f2+2,w,c
  5332  001DE4  B4D8               	btfsc	status,2,c
  5333  001DE6  D006               	goto	l3627
  5334  001DE8  0E00               	movlw	0
  5335  001DEA  1A22               	xorwf	___ftsub@f2,f,c
  5336  001DEC  0E00               	movlw	0
  5337  001DEE  1A23               	xorwf	___ftsub@f2+1,f,c
  5338  001DF0  0E80               	movlw	128
  5339  001DF2  1A24               	xorwf	___ftsub@f2+2,f,c
  5340  001DF4                     l3627:
  5341  001DF4  C01F  F013         	movff	___ftsub@f1,___ftadd@f1
  5342  001DF8  C020  F014         	movff	___ftsub@f1+1,___ftadd@f1+1
  5343  001DFC  C021  F015         	movff	___ftsub@f1+2,___ftadd@f1+2
  5344  001E00  C022  F016         	movff	___ftsub@f2,___ftadd@f2
  5345  001E04  C023  F017         	movff	___ftsub@f2+1,___ftadd@f2+1
  5346  001E08  C024  F018         	movff	___ftsub@f2+2,___ftadd@f2+2
  5347  001E0C  EC6F  F008         	call	___ftadd	;wreg free
  5348  001E10  C013  F01F         	movff	?___ftadd,?___ftsub
  5349  001E14  C014  F020         	movff	?___ftadd+1,?___ftsub+1
  5350  001E18  C015  F021         	movff	?___ftadd+2,?___ftsub+2
  5351  001E1C  0012               	return		;funcret
  5352  001E1E                     __end_of___ftsub:
  5353                           	opt callstack 0
  5354                           
  5355 ;; *************** function ___ftadd *****************
  5356 ;; Defined at:
  5357 ;;		line 86 in file "/opt/microchip/xc8/v2.05/pic/sources/c90/common/ftadd.c"
  5358 ;; Parameters:    Size  Location     Type
  5359 ;;  f1              3   18[COMRAM] float 
  5360 ;;  f2              3   21[COMRAM] float 
  5361 ;; Auto vars:     Size  Location     Type
  5362 ;;  exp1            1   29[COMRAM] unsigned char 
  5363 ;;  exp2            1   28[COMRAM] unsigned char 
  5364 ;;  sign            1   27[COMRAM] unsigned char 
  5365 ;; Return value:  Size  Location     Type
  5366 ;;                  3   18[COMRAM] float 
  5367 ;; Registers used:
  5368 ;;		wreg, status,2, status,0, cstack
  5369 ;; Tracked objects:
  5370 ;;		On entry : 0/0
  5371 ;;		On exit  : 0/0
  5372 ;;		Unchanged: 0/0
  5373 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5374 ;;      Params:         6       0       0       0       0       0       0       0       0
  5375 ;;      Locals:         3       0       0       0       0       0       0       0       0
  5376 ;;      Temps:          3       0       0       0       0       0       0       0       0
  5377 ;;      Totals:        12       0       0       0       0       0       0       0       0
  5378 ;;Total ram usage:       12 bytes
  5379 ;; Hardware stack levels used:    1
  5380 ;; Hardware stack levels required when called:    6
  5381 ;; This function calls:
  5382 ;;		___ftpack
  5383 ;; This function is called by:
  5384 ;;		___ftsub
  5385 ;; This function uses a non-reentrant model
  5386 ;;
  5387                           
  5388                           	psect	text42
  5389  0010DE                     __ptext42:
  5390                           	opt callstack 0
  5391  0010DE                     ___ftadd:
  5392                           	opt callstack 22
  5393                           
  5394                           ;incstack = 0
  5395  0010DE  C015  F019         	movff	___ftadd@f1+2,??___ftadd
  5396  0010E2  6A1A               	clrf	(??___ftadd+1)& (0+255),c
  5397  0010E4  6A1B               	clrf	(??___ftadd+2)& (0+255),c
  5398  0010E6  3414               	rlcf	___ftadd@f1+1,w,c
  5399  0010E8  3619               	rlcf	??___ftadd& (0+255),f,c
  5400  0010EA  E301               	bnc	u3571
  5401  0010EC  801A               	bsf	(??___ftadd+1)& (0+255),0,c
  5402  0010EE                     u3571:
  5403  0010EE  5019               	movf	??___ftadd,w,c
  5404  0010F0  6E1E               	movwf	___ftadd@exp1,c
  5405  0010F2  C018  F019         	movff	___ftadd@f2+2,??___ftadd
  5406  0010F6  6A1A               	clrf	(??___ftadd+1)& (0+255),c
  5407  0010F8  6A1B               	clrf	(??___ftadd+2)& (0+255),c
  5408  0010FA  3417               	rlcf	___ftadd@f2+1,w,c
  5409  0010FC  3619               	rlcf	??___ftadd& (0+255),f,c
  5410  0010FE  E301               	bnc	u3581
  5411  001100  801A               	bsf	(??___ftadd+1)& (0+255),0,c
  5412  001102                     u3581:
  5413  001102  5019               	movf	??___ftadd,w,c
  5414  001104  6E1D               	movwf	___ftadd@exp2,c
  5415  001106  501E               	movf	___ftadd@exp1,w,c
  5416  001108  B4D8               	btfsc	status,2,c
  5417  00110A  D00A               	goto	u3610
  5418  00110C  501D               	movf	___ftadd@exp2,w,c
  5419  00110E  5C1E               	subwf	___ftadd@exp1,w,c
  5420  001110  B0D8               	btfsc	status,0,c
  5421  001112  D00D               	goto	l3353
  5422  001114  501E               	movf	___ftadd@exp1,w,c
  5423  001116  5C1D               	subwf	___ftadd@exp2,w,c
  5424  001118  6E19               	movwf	??___ftadd& (0+255),c
  5425  00111A  0E18               	movlw	24
  5426  00111C  6419               	cpfsgt	??___ftadd,c
  5427  00111E  D007               	goto	l3353
  5428  001120                     u3610:
  5429  001120  C016  F013         	movff	___ftadd@f2,?___ftadd
  5430  001124  C017  F014         	movff	___ftadd@f2+1,?___ftadd+1
  5431  001128  C018  F015         	movff	___ftadd@f2+2,?___ftadd+2
  5432  00112C  0012               	return	
  5433  00112E                     l3353:
  5434  00112E  501D               	movf	___ftadd@exp2,w,c
  5435  001130  B4D8               	btfsc	status,2,c
  5436  001132  D00A               	goto	u3640
  5437  001134  501E               	movf	___ftadd@exp1,w,c
  5438  001136  5C1D               	subwf	___ftadd@exp2,w,c
  5439  001138  B0D8               	btfsc	status,0,c
  5440  00113A  D00D               	goto	l3359
  5441  00113C  501D               	movf	___ftadd@exp2,w,c
  5442  00113E  5C1E               	subwf	___ftadd@exp1,w,c
  5443  001140  6E19               	movwf	??___ftadd& (0+255),c
  5444  001142  0E18               	movlw	24
  5445  001144  6419               	cpfsgt	??___ftadd,c
  5446  001146  D007               	goto	l3359
  5447  001148                     u3640:
  5448  001148  C013  F013         	movff	___ftadd@f1,?___ftadd
  5449  00114C  C014  F014         	movff	___ftadd@f1+1,?___ftadd+1
  5450  001150  C015  F015         	movff	___ftadd@f1+2,?___ftadd+2
  5451  001154  0012               	return	
  5452  001156                     l3359:
  5453  001156  0E06               	movlw	6
  5454  001158  6E1C               	movwf	___ftadd@sign,c
  5455  00115A  BE15               	btfsc	___ftadd@f1+2,7,c
  5456  00115C  8E1C               	bsf	___ftadd@sign,7,c
  5457  00115E  BE18               	btfsc	___ftadd@f2+2,7,c
  5458  001160  8C1C               	bsf	___ftadd@sign,6,c
  5459  001162  8E14               	bsf	___ftadd@f1+1,7,c
  5460  001164  0EFF               	movlw	255
  5461  001166  1613               	andwf	___ftadd@f1,f,c
  5462  001168  0EFF               	movlw	255
  5463  00116A  1614               	andwf	___ftadd@f1+1,f,c
  5464  00116C  0E00               	movlw	0
  5465  00116E  1615               	andwf	___ftadd@f1+2,f,c
  5466  001170  8E17               	bsf	___ftadd@f2+1,7,c
  5467  001172  0EFF               	movlw	255
  5468  001174  1616               	andwf	___ftadd@f2,f,c
  5469  001176  0EFF               	movlw	255
  5470  001178  1617               	andwf	___ftadd@f2+1,f,c
  5471  00117A  0E00               	movlw	0
  5472  00117C  1618               	andwf	___ftadd@f2+2,f,c
  5473  00117E  501D               	movf	___ftadd@exp2,w,c
  5474  001180  5C1E               	subwf	___ftadd@exp1,w,c
  5475  001182  B0D8               	btfsc	status,0,c
  5476  001184  D01B               	goto	l3385
  5477  001186                     u3670:
  5478  001186  90D8               	bcf	status,0,c
  5479  001188  3616               	rlcf	___ftadd@f2,f,c
  5480  00118A  3617               	rlcf	___ftadd@f2+1,f,c
  5481  00118C  3618               	rlcf	___ftadd@f2+2,f,c
  5482  00118E  061D               	decf	___ftadd@exp2,f,c
  5483  001190  501E               	movf	___ftadd@exp1,w,c
  5484  001192  181D               	xorwf	___ftadd@exp2,w,c
  5485  001194  B4D8               	btfsc	status,2,c
  5486  001196  D00D               	goto	l3383
  5487  001198  061C               	decf	___ftadd@sign,f,c
  5488  00119A  C01C  F019         	movff	___ftadd@sign,??___ftadd
  5489  00119E  0E07               	movlw	7
  5490  0011A0  1619               	andwf	??___ftadd,f,c
  5491  0011A2  B4D8               	btfsc	status,2,c
  5492  0011A4  D006               	goto	l3383
  5493  0011A6  D7EF               	goto	u3670
  5494  0011A8                     l3381:
  5495  0011A8  90D8               	bcf	status,0,c
  5496  0011AA  3215               	rrcf	___ftadd@f1+2,f,c
  5497  0011AC  3214               	rrcf	___ftadd@f1+1,f,c
  5498  0011AE  3213               	rrcf	___ftadd@f1,f,c
  5499  0011B0  2A1E               	incf	___ftadd@exp1,f,c
  5500  0011B2                     l3383:
  5501  0011B2  501D               	movf	___ftadd@exp2,w,c
  5502  0011B4  181E               	xorwf	___ftadd@exp1,w,c
  5503  0011B6  B4D8               	btfsc	status,2,c
  5504  0011B8  D01F               	goto	u3740
  5505  0011BA  D7F6               	goto	l3381
  5506  0011BC                     l3385:
  5507  0011BC  501E               	movf	___ftadd@exp1,w,c
  5508  0011BE  5C1D               	subwf	___ftadd@exp2,w,c
  5509  0011C0  B0D8               	btfsc	status,0,c
  5510  0011C2  D01A               	goto	u3740
  5511  0011C4                     u3710:
  5512  0011C4  90D8               	bcf	status,0,c
  5513  0011C6  3613               	rlcf	___ftadd@f1,f,c
  5514  0011C8  3614               	rlcf	___ftadd@f1+1,f,c
  5515  0011CA  3615               	rlcf	___ftadd@f1+2,f,c
  5516  0011CC  061E               	decf	___ftadd@exp1,f,c
  5517  0011CE  501E               	movf	___ftadd@exp1,w,c
  5518  0011D0  181D               	xorwf	___ftadd@exp2,w,c
  5519  0011D2  B4D8               	btfsc	status,2,c
  5520  0011D4  D00D               	goto	l3395
  5521  0011D6  061C               	decf	___ftadd@sign,f,c
  5522  0011D8  C01C  F019         	movff	___ftadd@sign,??___ftadd
  5523  0011DC  0E07               	movlw	7
  5524  0011DE  1619               	andwf	??___ftadd,f,c
  5525  0011E0  B4D8               	btfsc	status,2,c
  5526  0011E2  D006               	goto	l3395
  5527  0011E4  D7EF               	goto	u3710
  5528  0011E6                     l3393:
  5529  0011E6  90D8               	bcf	status,0,c
  5530  0011E8  3218               	rrcf	___ftadd@f2+2,f,c
  5531  0011EA  3217               	rrcf	___ftadd@f2+1,f,c
  5532  0011EC  3216               	rrcf	___ftadd@f2,f,c
  5533  0011EE  2A1D               	incf	___ftadd@exp2,f,c
  5534  0011F0                     l3395:
  5535  0011F0  501D               	movf	___ftadd@exp2,w,c
  5536  0011F2  181E               	xorwf	___ftadd@exp1,w,c
  5537  0011F4  A4D8               	btfss	status,2,c
  5538  0011F6  D7F7               	goto	l3393
  5539  0011F8                     u3740:
  5540  0011F8  AE1C               	btfss	___ftadd@sign,7,c
  5541  0011FA  D00C               	goto	l870
  5542  0011FC  0EFF               	movlw	255
  5543  0011FE  1A13               	xorwf	___ftadd@f1,f,c
  5544  001200  0EFF               	movlw	255
  5545  001202  1A14               	xorwf	___ftadd@f1+1,f,c
  5546  001204  0EFF               	movlw	255
  5547  001206  1A15               	xorwf	___ftadd@f1+2,f,c
  5548  001208  0E01               	movlw	1
  5549  00120A  2613               	addwf	___ftadd@f1,f,c
  5550  00120C  0E00               	movlw	0
  5551  00120E  2214               	addwfc	___ftadd@f1+1,f,c
  5552  001210  0E00               	movlw	0
  5553  001212  2215               	addwfc	___ftadd@f1+2,f,c
  5554  001214                     l870:
  5555  001214  AC1C               	btfss	___ftadd@sign,6,c
  5556  001216  D00C               	goto	l3401
  5557  001218  0EFF               	movlw	255
  5558  00121A  1A16               	xorwf	___ftadd@f2,f,c
  5559  00121C  0EFF               	movlw	255
  5560  00121E  1A17               	xorwf	___ftadd@f2+1,f,c
  5561  001220  0EFF               	movlw	255
  5562  001222  1A18               	xorwf	___ftadd@f2+2,f,c
  5563  001224  0E01               	movlw	1
  5564  001226  2616               	addwf	___ftadd@f2,f,c
  5565  001228  0E00               	movlw	0
  5566  00122A  2217               	addwfc	___ftadd@f2+1,f,c
  5567  00122C  0E00               	movlw	0
  5568  00122E  2218               	addwfc	___ftadd@f2+2,f,c
  5569  001230                     l3401:
  5570  001230  0E00               	movlw	0
  5571  001232  6E1C               	movwf	___ftadd@sign,c
  5572  001234  5013               	movf	___ftadd@f1,w,c
  5573  001236  2616               	addwf	___ftadd@f2,f,c
  5574  001238  5014               	movf	___ftadd@f1+1,w,c
  5575  00123A  2217               	addwfc	___ftadd@f2+1,f,c
  5576  00123C  5015               	movf	___ftadd@f1+2,w,c
  5577  00123E  2218               	addwfc	___ftadd@f2+2,f,c
  5578  001240  AE18               	btfss	___ftadd@f2+2,7,c
  5579  001242  D00E               	goto	l3411
  5580  001244  0EFF               	movlw	255
  5581  001246  1A16               	xorwf	___ftadd@f2,f,c
  5582  001248  0EFF               	movlw	255
  5583  00124A  1A17               	xorwf	___ftadd@f2+1,f,c
  5584  00124C  0EFF               	movlw	255
  5585  00124E  1A18               	xorwf	___ftadd@f2+2,f,c
  5586  001250  0E01               	movlw	1
  5587  001252  2616               	addwf	___ftadd@f2,f,c
  5588  001254  0E00               	movlw	0
  5589  001256  2217               	addwfc	___ftadd@f2+1,f,c
  5590  001258  0E00               	movlw	0
  5591  00125A  2218               	addwfc	___ftadd@f2+2,f,c
  5592  00125C  0E01               	movlw	1
  5593  00125E  6E1C               	movwf	___ftadd@sign,c
  5594  001260                     l3411:
  5595  001260  C016  F00B         	movff	___ftadd@f2,___ftpack@arg
  5596  001264  C017  F00C         	movff	___ftadd@f2+1,___ftpack@arg+1
  5597  001268  C018  F00D         	movff	___ftadd@f2+2,___ftpack@arg+2
  5598  00126C  C01E  F00E         	movff	___ftadd@exp1,___ftpack@exp
  5599  001270  C01C  F00F         	movff	___ftadd@sign,___ftpack@sign
  5600  001274  ECB1  F00B         	call	___ftpack	;wreg free
  5601  001278  C00B  F013         	movff	?___ftpack,?___ftadd
  5602  00127C  C00C  F014         	movff	?___ftpack+1,?___ftadd+1
  5603  001280  C00D  F015         	movff	?___ftpack+2,?___ftadd+2
  5604  001284  0012               	return		;funcret
  5605  001286                     __end_of___ftadd:
  5606                           	opt callstack 0
  5607                           
  5608 ;; *************** function ___ftmul *****************
  5609 ;; Defined at:
  5610 ;;		line 62 in file "/opt/microchip/xc8/v2.05/pic/sources/c90/common/ftmul.c"
  5611 ;; Parameters:    Size  Location     Type
  5612 ;;  f1              3   18[COMRAM] float 
  5613 ;;  f2              3   21[COMRAM] float 
  5614 ;; Auto vars:     Size  Location     Type
  5615 ;;  f3_as_produc    3   28[COMRAM] unsigned um
  5616 ;;  sign            1   32[COMRAM] unsigned char 
  5617 ;;  cntr            1   31[COMRAM] unsigned char 
  5618 ;;  exp             1   27[COMRAM] unsigned char 
  5619 ;; Return value:  Size  Location     Type
  5620 ;;                  3   18[COMRAM] float 
  5621 ;; Registers used:
  5622 ;;		wreg, status,2, status,0, cstack
  5623 ;; Tracked objects:
  5624 ;;		On entry : 0/0
  5625 ;;		On exit  : 0/0
  5626 ;;		Unchanged: 0/0
  5627 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5628 ;;      Params:         6       0       0       0       0       0       0       0       0
  5629 ;;      Locals:         6       0       0       0       0       0       0       0       0
  5630 ;;      Temps:          3       0       0       0       0       0       0       0       0
  5631 ;;      Totals:        15       0       0       0       0       0       0       0       0
  5632 ;;Total ram usage:       15 bytes
  5633 ;; Hardware stack levels used:    1
  5634 ;; Hardware stack levels required when called:    6
  5635 ;; This function calls:
  5636 ;;		___ftpack
  5637 ;; This function is called by:
  5638 ;;		_disp_show_quantity
  5639 ;; This function uses a non-reentrant model
  5640 ;;
  5641                           
  5642                           	psect	text43
  5643  001426                     __ptext43:
  5644                           	opt callstack 0
  5645  001426                     ___ftmul:
  5646                           	opt callstack 23
  5647                           
  5648                           ;incstack = 0
  5649  001426  C015  F019         	movff	___ftmul@f1+2,??___ftmul
  5650  00142A  6A1A               	clrf	(??___ftmul+1)& (0+255),c
  5651  00142C  6A1B               	clrf	(??___ftmul+2)& (0+255),c
  5652  00142E  3414               	rlcf	___ftmul@f1+1,w,c
  5653  001430  3619               	rlcf	??___ftmul& (0+255),f,c
  5654  001432  E301               	bnc	u4211
  5655  001434  801A               	bsf	(??___ftmul+1)& (0+255),0,c
  5656  001436                     u4211:
  5657  001436  5019               	movf	??___ftmul,w,c
  5658  001438  6E1C               	movwf	___ftmul@exp,c
  5659  00143A  501C               	movf	___ftmul@exp,w,c
  5660  00143C  A4D8               	btfss	status,2,c
  5661  00143E  D007               	goto	l3581
  5662  001440  0E00               	movlw	0
  5663  001442  6E13               	movwf	?___ftmul,c
  5664  001444  0E00               	movlw	0
  5665  001446  6E14               	movwf	?___ftmul+1,c
  5666  001448  0E00               	movlw	0
  5667  00144A  6E15               	movwf	?___ftmul+2,c
  5668  00144C  0012               	return	
  5669  00144E                     l3581:
  5670  00144E  C018  F019         	movff	___ftmul@f2+2,??___ftmul
  5671  001452  6A1A               	clrf	(??___ftmul+1)& (0+255),c
  5672  001454  6A1B               	clrf	(??___ftmul+2)& (0+255),c
  5673  001456  3417               	rlcf	___ftmul@f2+1,w,c
  5674  001458  3619               	rlcf	??___ftmul& (0+255),f,c
  5675  00145A  E301               	bnc	u4231
  5676  00145C  801A               	bsf	(??___ftmul+1)& (0+255),0,c
  5677  00145E                     u4231:
  5678  00145E  5019               	movf	??___ftmul,w,c
  5679  001460  6E21               	movwf	___ftmul@sign,c
  5680  001462  5021               	movf	___ftmul@sign,w,c
  5681  001464  A4D8               	btfss	status,2,c
  5682  001466  D007               	goto	l3587
  5683  001468  0E00               	movlw	0
  5684  00146A  6E13               	movwf	?___ftmul,c
  5685  00146C  0E00               	movlw	0
  5686  00146E  6E14               	movwf	?___ftmul+1,c
  5687  001470  0E00               	movlw	0
  5688  001472  6E15               	movwf	?___ftmul+2,c
  5689  001474  0012               	return	
  5690  001476                     l3587:
  5691  001476  5021               	movf	___ftmul@sign,w,c
  5692  001478  0F7B               	addlw	123
  5693  00147A  261C               	addwf	___ftmul@exp,f,c
  5694  00147C  C015  F021         	movff	___ftmul@f1+2,___ftmul@sign
  5695  001480  5018               	movf	___ftmul@f2+2,w,c
  5696  001482  1A21               	xorwf	___ftmul@sign,f,c
  5697  001484  0E80               	movlw	128
  5698  001486  1621               	andwf	___ftmul@sign,f,c
  5699  001488  8E14               	bsf	___ftmul@f1+1,7,c
  5700  00148A  8E17               	bsf	___ftmul@f2+1,7,c
  5701  00148C  0EFF               	movlw	255
  5702  00148E  1616               	andwf	___ftmul@f2,f,c
  5703  001490  0EFF               	movlw	255
  5704  001492  1617               	andwf	___ftmul@f2+1,f,c
  5705  001494  0E00               	movlw	0
  5706  001496  1618               	andwf	___ftmul@f2+2,f,c
  5707  001498  0E00               	movlw	0
  5708  00149A  6E1D               	movwf	___ftmul@f3_as_product,c
  5709  00149C  0E00               	movlw	0
  5710  00149E  6E1E               	movwf	___ftmul@f3_as_product+1,c
  5711  0014A0  0E00               	movlw	0
  5712  0014A2  6E1F               	movwf	___ftmul@f3_as_product+2,c
  5713  0014A4  0E07               	movlw	7
  5714  0014A6  6E20               	movwf	___ftmul@cntr,c
  5715  0014A8                     l3601:
  5716  0014A8  A013               	btfss	___ftmul@f1,0,c
  5717  0014AA  D006               	goto	l3605
  5718  0014AC  5016               	movf	___ftmul@f2,w,c
  5719  0014AE  261D               	addwf	___ftmul@f3_as_product,f,c
  5720  0014B0  5017               	movf	___ftmul@f2+1,w,c
  5721  0014B2  221E               	addwfc	___ftmul@f3_as_product+1,f,c
  5722  0014B4  5018               	movf	___ftmul@f2+2,w,c
  5723  0014B6  221F               	addwfc	___ftmul@f3_as_product+2,f,c
  5724  0014B8                     l3605:
  5725  0014B8  90D8               	bcf	status,0,c
  5726  0014BA  3215               	rrcf	___ftmul@f1+2,f,c
  5727  0014BC  3214               	rrcf	___ftmul@f1+1,f,c
  5728  0014BE  3213               	rrcf	___ftmul@f1,f,c
  5729  0014C0  90D8               	bcf	status,0,c
  5730  0014C2  3616               	rlcf	___ftmul@f2,f,c
  5731  0014C4  3617               	rlcf	___ftmul@f2+1,f,c
  5732  0014C6  3618               	rlcf	___ftmul@f2+2,f,c
  5733  0014C8  2E20               	decfsz	___ftmul@cntr,f,c
  5734  0014CA  D7EE               	goto	l3601
  5735  0014CC  0E09               	movlw	9
  5736  0014CE  6E20               	movwf	___ftmul@cntr,c
  5737  0014D0                     l3611:
  5738  0014D0  A013               	btfss	___ftmul@f1,0,c
  5739  0014D2  D006               	goto	l3615
  5740  0014D4  5016               	movf	___ftmul@f2,w,c
  5741  0014D6  261D               	addwf	___ftmul@f3_as_product,f,c
  5742  0014D8  5017               	movf	___ftmul@f2+1,w,c
  5743  0014DA  221E               	addwfc	___ftmul@f3_as_product+1,f,c
  5744  0014DC  5018               	movf	___ftmul@f2+2,w,c
  5745  0014DE  221F               	addwfc	___ftmul@f3_as_product+2,f,c
  5746  0014E0                     l3615:
  5747  0014E0  90D8               	bcf	status,0,c
  5748  0014E2  3215               	rrcf	___ftmul@f1+2,f,c
  5749  0014E4  3214               	rrcf	___ftmul@f1+1,f,c
  5750  0014E6  3213               	rrcf	___ftmul@f1,f,c
  5751  0014E8  90D8               	bcf	status,0,c
  5752  0014EA  321F               	rrcf	___ftmul@f3_as_product+2,f,c
  5753  0014EC  321E               	rrcf	___ftmul@f3_as_product+1,f,c
  5754  0014EE  321D               	rrcf	___ftmul@f3_as_product,f,c
  5755  0014F0  2E20               	decfsz	___ftmul@cntr,f,c
  5756  0014F2  D7EE               	goto	l3611
  5757  0014F4  C01D  F00B         	movff	___ftmul@f3_as_product,___ftpack@arg
  5758  0014F8  C01E  F00C         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  5759  0014FC  C01F  F00D         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  5760  001500  C01C  F00E         	movff	___ftmul@exp,___ftpack@exp
  5761  001504  C021  F00F         	movff	___ftmul@sign,___ftpack@sign
  5762  001508  ECB1  F00B         	call	___ftpack	;wreg free
  5763  00150C  C00B  F013         	movff	?___ftpack,?___ftmul
  5764  001510  C00C  F014         	movff	?___ftpack+1,?___ftmul+1
  5765  001514  C00D  F015         	movff	?___ftpack+2,?___ftmul+2
  5766  001518  0012               	return		;funcret
  5767  00151A                     __end_of___ftmul:
  5768                           	opt callstack 0
  5769                           
  5770 ;; *************** function ___ftge *****************
  5771 ;; Defined at:
  5772 ;;		line 4 in file "/opt/microchip/xc8/v2.05/pic/sources/c90/common/ftge.c"
  5773 ;; Parameters:    Size  Location     Type
  5774 ;;  ff1             3   21[COMRAM] float 
  5775 ;;  ff2             3   24[COMRAM] float 
  5776 ;; Auto vars:     Size  Location     Type
  5777 ;;		None
  5778 ;; Return value:  Size  Location     Type
  5779 ;;		None               void
  5780 ;; Registers used:
  5781 ;;		wreg, status,2, status,0
  5782 ;; Tracked objects:
  5783 ;;		On entry : 0/0
  5784 ;;		On exit  : 0/0
  5785 ;;		Unchanged: 0/0
  5786 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5787 ;;      Params:         6       0       0       0       0       0       0       0       0
  5788 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5789 ;;      Temps:          3       0       0       0       0       0       0       0       0
  5790 ;;      Totals:         9       0       0       0       0       0       0       0       0
  5791 ;;Total ram usage:        9 bytes
  5792 ;; Hardware stack levels used:    1
  5793 ;; Hardware stack levels required when called:    5
  5794 ;; This function calls:
  5795 ;;		Nothing
  5796 ;; This function is called by:
  5797 ;;		_ikey_parsing
  5798 ;;		_disp_show_quantity
  5799 ;; This function uses a non-reentrant model
  5800 ;;
  5801                           
  5802                           	psect	text44
  5803  001944                     __ptext44:
  5804                           	opt callstack 0
  5805  001944                     ___ftge:
  5806                           	opt callstack 23
  5807                           
  5808                           ;incstack = 0
  5809  001944  AE18               	btfss	___ftge@ff1+2,7,c
  5810  001946  D00F               	goto	l3419
  5811  001948  0E00               	movlw	0
  5812  00194A  6E1C               	movwf	??___ftge& (0+255),c
  5813  00194C  0E00               	movlw	0
  5814  00194E  6E1D               	movwf	(??___ftge+1)& (0+255),c
  5815  001950  0E80               	movlw	128
  5816  001952  6E1E               	movwf	(??___ftge+2)& (0+255),c
  5817  001954  5016               	movf	___ftge@ff1,w,c
  5818  001956  5C1C               	subwf	??___ftge,w,c
  5819  001958  6E16               	movwf	___ftge@ff1,c
  5820  00195A  5017               	movf	___ftge@ff1+1,w,c
  5821  00195C  581D               	subwfb	??___ftge+1,w,c
  5822  00195E  6E17               	movwf	___ftge@ff1+1,c
  5823  001960  5018               	movf	___ftge@ff1+2,w,c
  5824  001962  581E               	subwfb	??___ftge+2,w,c
  5825  001964  6E18               	movwf	___ftge@ff1+2,c
  5826  001966                     l3419:
  5827  001966  AE1B               	btfss	___ftge@ff2+2,7,c
  5828  001968  D00F               	goto	l3423
  5829  00196A  0E00               	movlw	0
  5830  00196C  6E1C               	movwf	??___ftge& (0+255),c
  5831  00196E  0E00               	movlw	0
  5832  001970  6E1D               	movwf	(??___ftge+1)& (0+255),c
  5833  001972  0E80               	movlw	128
  5834  001974  6E1E               	movwf	(??___ftge+2)& (0+255),c
  5835  001976  5019               	movf	___ftge@ff2,w,c
  5836  001978  5C1C               	subwf	??___ftge,w,c
  5837  00197A  6E19               	movwf	___ftge@ff2,c
  5838  00197C  501A               	movf	___ftge@ff2+1,w,c
  5839  00197E  581D               	subwfb	??___ftge+1,w,c
  5840  001980  6E1A               	movwf	___ftge@ff2+1,c
  5841  001982  501B               	movf	___ftge@ff2+2,w,c
  5842  001984  581E               	subwfb	??___ftge+2,w,c
  5843  001986  6E1B               	movwf	___ftge@ff2+2,c
  5844  001988                     l3423:
  5845  001988  0E00               	movlw	0
  5846  00198A  1A16               	xorwf	___ftge@ff1,f,c
  5847  00198C  0E00               	movlw	0
  5848  00198E  1A17               	xorwf	___ftge@ff1+1,f,c
  5849  001990  0E80               	movlw	128
  5850  001992  1A18               	xorwf	___ftge@ff1+2,f,c
  5851  001994  0E00               	movlw	0
  5852  001996  1A19               	xorwf	___ftge@ff2,f,c
  5853  001998  0E00               	movlw	0
  5854  00199A  1A1A               	xorwf	___ftge@ff2+1,f,c
  5855  00199C  0E80               	movlw	128
  5856  00199E  1A1B               	xorwf	___ftge@ff2+2,f,c
  5857  0019A0  5019               	movf	___ftge@ff2,w,c
  5858  0019A2  5C16               	subwf	___ftge@ff1,w,c
  5859  0019A4  501A               	movf	___ftge@ff2+1,w,c
  5860  0019A6  5817               	subwfb	___ftge@ff1+1,w,c
  5861  0019A8  501B               	movf	___ftge@ff2+2,w,c
  5862  0019AA  5818               	subwfb	___ftge@ff1+2,w,c
  5863  0019AC  B0D8               	btfsc	status,0,c
  5864  0019AE  D002               	goto	l3429
  5865  0019B0  90D8               	bcf	status,0,c
  5866  0019B2  0012               	return	
  5867  0019B4                     l3429:
  5868  0019B4  80D8               	bsf	status,0,c
  5869  0019B6  0012               	return		;funcret
  5870  0019B8                     __end_of___ftge:
  5871                           	opt callstack 0
  5872                           
  5873 ;; *************** function ___awtoft *****************
  5874 ;; Defined at:
  5875 ;;		line 32 in file "/opt/microchip/xc8/v2.05/pic/sources/c90/common/awtoft.c"
  5876 ;; Parameters:    Size  Location     Type
  5877 ;;  c               2   18[COMRAM] int 
  5878 ;; Auto vars:     Size  Location     Type
  5879 ;;  sign            1   21[COMRAM] unsigned char 
  5880 ;; Return value:  Size  Location     Type
  5881 ;;                  3   18[COMRAM] float 
  5882 ;; Registers used:
  5883 ;;		wreg, status,2, status,0, cstack
  5884 ;; Tracked objects:
  5885 ;;		On entry : 0/0
  5886 ;;		On exit  : 0/0
  5887 ;;		Unchanged: 0/0
  5888 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5889 ;;      Params:         3       0       0       0       0       0       0       0       0
  5890 ;;      Locals:         1       0       0       0       0       0       0       0       0
  5891 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5892 ;;      Totals:         4       0       0       0       0       0       0       0       0
  5893 ;;Total ram usage:        4 bytes
  5894 ;; Hardware stack levels used:    1
  5895 ;; Hardware stack levels required when called:    6
  5896 ;; This function calls:
  5897 ;;		___ftpack
  5898 ;; This function is called by:
  5899 ;;		_disp_show_quantity
  5900 ;; This function uses a non-reentrant model
  5901 ;;
  5902                           
  5903                           	psect	text45
  5904  001E1E                     __ptext45:
  5905                           	opt callstack 0
  5906  001E1E                     ___awtoft:
  5907                           	opt callstack 23
  5908                           
  5909                           ;incstack = 0
  5910  001E1E  0E00               	movlw	0
  5911  001E20  6E16               	movwf	___awtoft@sign,c
  5912  001E22  AE14               	btfss	___awtoft@c+1,7,c
  5913  001E24  D006               	goto	l3639
  5914  001E26  6C13               	negf	___awtoft@c,c
  5915  001E28  1E14               	comf	___awtoft@c+1,f,c
  5916  001E2A  B0D8               	btfsc	status,0,c
  5917  001E2C  2A14               	incf	___awtoft@c+1,f,c
  5918  001E2E  0E01               	movlw	1
  5919  001E30  6E16               	movwf	___awtoft@sign,c
  5920  001E32                     l3639:
  5921  001E32  C013  F00B         	movff	___awtoft@c,___ftpack@arg
  5922  001E36  C014  F00C         	movff	___awtoft@c+1,___ftpack@arg+1
  5923  001E3A  6A0D               	clrf	___ftpack@arg+2,c
  5924  001E3C  0E8E               	movlw	142
  5925  001E3E  6E0E               	movwf	___ftpack@exp,c
  5926  001E40  C016  F00F         	movff	___awtoft@sign,___ftpack@sign
  5927  001E44  ECB1  F00B         	call	___ftpack	;wreg free
  5928  001E48  C00B  F013         	movff	?___ftpack,?___awtoft
  5929  001E4C  C00C  F014         	movff	?___ftpack+1,?___awtoft+1
  5930  001E50  C00D  F015         	movff	?___ftpack+2,?___awtoft+2
  5931  001E54  0012               	return		;funcret
  5932  001E56                     __end_of___awtoft:
  5933                           	opt callstack 0
  5934                           
  5935 ;; *************** function ___ftpack *****************
  5936 ;; Defined at:
  5937 ;;		line 62 in file "/opt/microchip/xc8/v2.05/pic/sources/c90/common/float.c"
  5938 ;; Parameters:    Size  Location     Type
  5939 ;;  arg             3   10[COMRAM] unsigned um
  5940 ;;  exp             1   13[COMRAM] unsigned char 
  5941 ;;  sign            1   14[COMRAM] unsigned char 
  5942 ;; Auto vars:     Size  Location     Type
  5943 ;;		None
  5944 ;; Return value:  Size  Location     Type
  5945 ;;                  3   10[COMRAM] float 
  5946 ;; Registers used:
  5947 ;;		wreg, status,2, status,0
  5948 ;; Tracked objects:
  5949 ;;		On entry : 0/0
  5950 ;;		On exit  : 0/0
  5951 ;;		Unchanged: 0/0
  5952 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5953 ;;      Params:         5       0       0       0       0       0       0       0       0
  5954 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5955 ;;      Temps:          3       0       0       0       0       0       0       0       0
  5956 ;;      Totals:         8       0       0       0       0       0       0       0       0
  5957 ;;Total ram usage:        8 bytes
  5958 ;; Hardware stack levels used:    1
  5959 ;; Hardware stack levels required when called:    5
  5960 ;; This function calls:
  5961 ;;		Nothing
  5962 ;; This function is called by:
  5963 ;;		___awtoft
  5964 ;;		___ftadd
  5965 ;;		___ftmul
  5966 ;;		___lwtoft
  5967 ;; This function uses a non-reentrant model
  5968 ;;
  5969                           
  5970                           	psect	text46
  5971  001762                     __ptext46:
  5972                           	opt callstack 0
  5973  001762                     ___ftpack:
  5974                           	opt callstack 22
  5975                           
  5976                           ;incstack = 0
  5977  001762  500E               	movf	___ftpack@exp,w,c
  5978  001764  B4D8               	btfsc	status,2,c
  5979  001766  D005               	goto	u3440
  5980  001768  500B               	movf	___ftpack@arg,w,c
  5981  00176A  100C               	iorwf	___ftpack@arg+1,w,c
  5982  00176C  100D               	iorwf	___ftpack@arg+2,w,c
  5983  00176E  A4D8               	btfss	status,2,c
  5984  001770  D00C               	goto	l3281
  5985  001772                     u3440:
  5986  001772  0E00               	movlw	0
  5987  001774  6E0B               	movwf	?___ftpack,c
  5988  001776  0E00               	movlw	0
  5989  001778  6E0C               	movwf	?___ftpack+1,c
  5990  00177A  0E00               	movlw	0
  5991  00177C  6E0D               	movwf	?___ftpack+2,c
  5992  00177E  0012               	return	
  5993  001780                     l3279:
  5994  001780  2A0E               	incf	___ftpack@exp,f,c
  5995  001782  90D8               	bcf	status,0,c
  5996  001784  320D               	rrcf	___ftpack@arg+2,f,c
  5997  001786  320C               	rrcf	___ftpack@arg+1,f,c
  5998  001788  320B               	rrcf	___ftpack@arg,f,c
  5999  00178A                     l3281:
  6000  00178A  0E00               	movlw	0
  6001  00178C  140B               	andwf	___ftpack@arg,w,c
  6002  00178E  6E10               	movwf	??___ftpack& (0+255),c
  6003  001790  0E00               	movlw	0
  6004  001792  140C               	andwf	___ftpack@arg+1,w,c
  6005  001794  6E11               	movwf	(??___ftpack+1)& (0+255),c
  6006  001796  0EFE               	movlw	254
  6007  001798  140D               	andwf	___ftpack@arg+2,w,c
  6008  00179A  6E12               	movwf	(??___ftpack+2)& (0+255),c
  6009  00179C  5010               	movf	??___ftpack,w,c
  6010  00179E  1011               	iorwf	??___ftpack+1,w,c
  6011  0017A0  1012               	iorwf	??___ftpack+2,w,c
  6012  0017A2  B4D8               	btfsc	status,2,c
  6013  0017A4  D00C               	goto	l3287
  6014  0017A6  D7EC               	goto	l3279
  6015  0017A8                     l3283:
  6016  0017A8  2A0E               	incf	___ftpack@exp,f,c
  6017  0017AA  0E01               	movlw	1
  6018  0017AC  260B               	addwf	___ftpack@arg,f,c
  6019  0017AE  0E00               	movlw	0
  6020  0017B0  220C               	addwfc	___ftpack@arg+1,f,c
  6021  0017B2  0E00               	movlw	0
  6022  0017B4  220D               	addwfc	___ftpack@arg+2,f,c
  6023  0017B6  90D8               	bcf	status,0,c
  6024  0017B8  320D               	rrcf	___ftpack@arg+2,f,c
  6025  0017BA  320C               	rrcf	___ftpack@arg+1,f,c
  6026  0017BC  320B               	rrcf	___ftpack@arg,f,c
  6027  0017BE                     l3287:
  6028  0017BE  0E00               	movlw	0
  6029  0017C0  140B               	andwf	___ftpack@arg,w,c
  6030  0017C2  6E10               	movwf	??___ftpack& (0+255),c
  6031  0017C4  0E00               	movlw	0
  6032  0017C6  140C               	andwf	___ftpack@arg+1,w,c
  6033  0017C8  6E11               	movwf	(??___ftpack+1)& (0+255),c
  6034  0017CA  0EFF               	movlw	255
  6035  0017CC  140D               	andwf	___ftpack@arg+2,w,c
  6036  0017CE  6E12               	movwf	(??___ftpack+2)& (0+255),c
  6037  0017D0  5010               	movf	??___ftpack,w,c
  6038  0017D2  1011               	iorwf	??___ftpack+1,w,c
  6039  0017D4  1012               	iorwf	??___ftpack+2,w,c
  6040  0017D6  B4D8               	btfsc	status,2,c
  6041  0017D8  D006               	goto	l3291
  6042  0017DA  D7E6               	goto	l3283
  6043  0017DC                     l3289:
  6044  0017DC  060E               	decf	___ftpack@exp,f,c
  6045  0017DE  90D8               	bcf	status,0,c
  6046  0017E0  360B               	rlcf	___ftpack@arg,f,c
  6047  0017E2  360C               	rlcf	___ftpack@arg+1,f,c
  6048  0017E4  360D               	rlcf	___ftpack@arg+2,f,c
  6049  0017E6                     l3291:
  6050  0017E6  BE0C               	btfsc	___ftpack@arg+1,7,c
  6051  0017E8  D003               	goto	u3480
  6052  0017EA  0E02               	movlw	2
  6053  0017EC  600E               	cpfslt	___ftpack@exp,c
  6054  0017EE  D7F6               	goto	l3289
  6055  0017F0                     u3480:
  6056  0017F0  A00E               	btfss	___ftpack@exp,0,c
  6057  0017F2  9E0C               	bcf	___ftpack@arg+1,7,c
  6058  0017F4  90D8               	bcf	status,0,c
  6059  0017F6  320E               	rrcf	___ftpack@exp,f,c
  6060  0017F8  500E               	movf	___ftpack@exp,w,c
  6061  0017FA  120D               	iorwf	___ftpack@arg+2,f,c
  6062  0017FC  500F               	movf	___ftpack@sign,w,c
  6063  0017FE  A4D8               	btfss	status,2,c
  6064  001800  8E0D               	bsf	___ftpack@arg+2,7,c
  6065  001802  C00B  F00B         	movff	___ftpack@arg,?___ftpack
  6066  001806  C00C  F00C         	movff	___ftpack@arg+1,?___ftpack+1
  6067  00180A  C00D  F00D         	movff	___ftpack@arg+2,?___ftpack+2
  6068  00180E  0012               	return		;funcret
  6069  001810                     __end_of___ftpack:
  6070                           	opt callstack 0
  6071                           
  6072 ;; *************** function _INTERRUPCION *****************
  6073 ;; Defined at:
  6074 ;;		line 219 in file "main.c"
  6075 ;; Parameters:    Size  Location     Type
  6076 ;;		None
  6077 ;; Auto vars:     Size  Location     Type
  6078 ;;		None
  6079 ;; Return value:  Size  Location     Type
  6080 ;;                  1    wreg      void 
  6081 ;; Registers used:
  6082 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
  6083 ;; Tracked objects:
  6084 ;;		On entry : 0/0
  6085 ;;		On exit  : 0/0
  6086 ;;		Unchanged: 0/0
  6087 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6088 ;;      Params:         0       0       0       0       0       0       0       0       0
  6089 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6090 ;;      Temps:          6       0       0       0       0       0       0       0       0
  6091 ;;      Totals:         6       0       0       0       0       0       0       0       0
  6092 ;;Total ram usage:        6 bytes
  6093 ;; Hardware stack levels used:    1
  6094 ;; Hardware stack levels required when called:    4
  6095 ;; This function calls:
  6096 ;;		_mpap_job
  6097 ;; This function is called by:
  6098 ;;		Interrupt level 2
  6099 ;; This function uses a non-reentrant model
  6100 ;;
  6101                           
  6102                           	psect	intcode
  6103  000008                     __pintcode:
  6104                           	opt callstack 0
  6105  000008                     _INTERRUPCION:
  6106                           	opt callstack 22
  6107                           
  6108                           ;incstack = 0
  6109  000008  8245               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  6110  00000A  ED1E  F00E         	call	int_func,f	;refresh shadow registers
  6111                           
  6112                           	psect	intcode_body
  6113  001C3C                     __pintcode_body:
  6114                           	opt callstack 22
  6115  001C3C                     int_func:
  6116                           	opt callstack 22
  6117  001C3C  0006               	pop		; remove dummy address from shadow register refresh
  6118  001C3E  CFFA F005          	movff	pclath,??_INTERRUPCION
  6119  001C42  CFFB F006          	movff	pclatu,??_INTERRUPCION+1
  6120  001C46  CFD9 F007          	movff	fsr2l,??_INTERRUPCION+2
  6121  001C4A  CFDA F008          	movff	fsr2h,??_INTERRUPCION+3
  6122  001C4E  CFF3 F009          	movff	prodl,??_INTERRUPCION+4
  6123  001C52  CFF4 F00A          	movff	prodh,??_INTERRUPCION+5
  6124                           
  6125                           ;main.c: 221: static uint8_t cm = 0;;main.c: 222: if (TMR0IF)
  6126  001C56  A4F2               	btfss	4082,2,c	;volatile
  6127  001C58  D009               	goto	i2l140
  6128                           
  6129                           ;main.c: 223: {;main.c: 224: isr_flag.f1ms = 1;
  6130  001C5A  8042               	bsf	_isr_flag,0,c	;volatile
  6131                           
  6132                           ;main.c: 228: cm = 0;
  6133  001C5C  0E00               	movlw	0
  6134  001C5E  6E3F               	movwf	INTERRUPCION@cm,c
  6135                           
  6136                           ;main.c: 229: mpap_job();
  6137  001C60  EC44  F00E         	call	_mpap_job	;wreg free
  6138                           
  6139                           ;main.c: 231: TMR0IF = 0;
  6140  001C64  94F2               	bcf	4082,2,c	;volatile
  6141                           
  6142                           ;main.c: 232: TMR0H = (uint8_t)((uint16_t)((1UL<<16) - ( 1.0E-3 *48000000UL / (256*4)) )
      +                           >> 8);
  6143  001C66  68D7               	setf	4055,c	;volatile
  6144                           
  6145                           ;main.c: 233: TMR0L = (uint8_t)((uint16_t)((1UL<<16) - ( 1.0E-3 *48000000UL / (256*4)) )
      +                          );
  6146  001C68  0ED1               	movlw	209
  6147  001C6A  6ED6               	movwf	4054,c	;volatile
  6148  001C6C                     i2l140:
  6149  001C6C  C00A  FFF4         	movff	??_INTERRUPCION+5,prodh
  6150  001C70  C009  FFF3         	movff	??_INTERRUPCION+4,prodl
  6151  001C74  C008  FFDA         	movff	??_INTERRUPCION+3,fsr2h
  6152  001C78  C007  FFD9         	movff	??_INTERRUPCION+2,fsr2l
  6153  001C7C  C006  FFFB         	movff	??_INTERRUPCION+1,pclatu
  6154  001C80  C005  FFFA         	movff	??_INTERRUPCION,pclath
  6155  001C84  9245               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  6156  001C86  0011               	retfie		f
  6157  001C88                     __end_of_INTERRUPCION:
  6158                           	opt callstack 0
  6159                           
  6160 ;; *************** function _mpap_job *****************
  6161 ;; Defined at:
  6162 ;;		line 194 in file "mpap.c"
  6163 ;; Parameters:    Size  Location     Type
  6164 ;;		None
  6165 ;; Auto vars:     Size  Location     Type
  6166 ;;  cod_ret         1    0        char 
  6167 ;; Return value:  Size  Location     Type
  6168 ;;                  1    wreg      char 
  6169 ;; Registers used:
  6170 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
  6171 ;; Tracked objects:
  6172 ;;		On entry : 0/0
  6173 ;;		On exit  : 0/0
  6174 ;;		Unchanged: 0/0
  6175 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6176 ;;      Params:         0       0       0       0       0       0       0       0       0
  6177 ;;      Locals:         1       0       0       0       0       0       0       0       0
  6178 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6179 ;;      Totals:         1       0       0       0       0       0       0       0       0
  6180 ;;Total ram usage:        1 bytes
  6181 ;; Hardware stack levels used:    1
  6182 ;; Hardware stack levels required when called:    3
  6183 ;; This function calls:
  6184 ;;		__mpap_off
  6185 ;;		_mpap_homming
  6186 ;;		_mpap_normal_mode
  6187 ;; This function is called by:
  6188 ;;		_INTERRUPCION
  6189 ;; This function uses a non-reentrant model
  6190 ;;
  6191                           
  6192                           	psect	text48
  6193  001C88                     __ptext48:
  6194                           	opt callstack 0
  6195  001C88                     _mpap_job:
  6196                           	opt callstack 22
  6197                           
  6198                           ;mpap.c: 196: int8_t cod_ret;;mpap.c: 198: if (mpap.mode == HOMMING_MODE)
  6199                           
  6200                           ;incstack = 0
  6201  001C88  0E02               	movlw	2
  6202  001C8A  183C               	xorwf	_mpap+7,w,c	;volatile
  6203  001C8C  A4D8               	btfss	status,2,c
  6204  001C8E  D003               	goto	i2l3157
  6205  001C90  EC7B  F00D         	call	_mpap_homming	;wreg free
  6206  001C94  0012               	return	
  6207  001C96                     i2l3157:
  6208                           
  6209                           ;mpap.c: 201: else if (mpap.mode == NORMAL_MODE)
  6210  001C96  0E03               	movlw	3
  6211  001C98  183C               	xorwf	_mpap+7,w,c	;volatile
  6212  001C9A  A4D8               	btfss	status,2,c
  6213  001C9C  D003               	goto	i2l3161
  6214  001C9E  EC69  F00E         	call	_mpap_normal_mode	;wreg free
  6215  001CA2  0012               	return	
  6216  001CA4                     i2l3161:
  6217                           
  6218                           ;mpap.c: 204: else if (mpap.mode == STALL_MODE)
  6219  001CA4  043C               	decf	_mpap+7,w,c	;volatile
  6220  001CA6  A4D8               	btfss	status,2,c
  6221  001CA8  0012               	return	
  6222                           
  6223                           ;mpap.c: 205: {;mpap.c: 206: mpap.numSteps_tomove = 0x00;
  6224  001CAA  0E00               	movlw	0
  6225  001CAC  6E3A               	movwf	_mpap+5,c	;volatile
  6226  001CAE  0E00               	movlw	0
  6227  001CB0  6E39               	movwf	_mpap+4,c	;volatile
  6228                           
  6229                           ;mpap.c: 207: mpap_off();
  6230  001CB2  D801               	call	i2u341_48
  6231  001CB4  D00B               	goto	i2u341_49
  6232  001CB6                     i2u341_48:
  6233  001CB6  0005               	push	
  6234  001CB8  0100               	movlb	0	; () banked
  6235  001CBA  6EFA               	movwf	pclath,c
  6236  001CBC  51D1               	movf	_mpap_off& (0+255),w,b
  6237  001CBE  6EFD               	movwf	tosl,c
  6238  001CC0  51D2               	movf	(_mpap_off+1)& (0+255),w,b
  6239  001CC2  6EFE               	movwf	tosh,c
  6240  001CC4  50F8               	movf	tblptru,w,c
  6241  001CC6  6EFF               	movwf	tosu,c
  6242  001CC8  50FA               	movf	pclath,w,c
  6243  001CCA  0012               	return		;indir
  6244  001CCC                     i2u341_49:
  6245                           
  6246                           ; BSR set to: 0
  6247                           ;mpap.c: 209: mpap.mode = IDLE_MODE;
  6248  001CCC  0E00               	movlw	0
  6249  001CCE  6E3C               	movwf	_mpap+7,c	;volatile
  6250  001CD0  0012               	return	
  6251  001CD2                     __end_of_mpap_job:
  6252                           	opt callstack 0
  6253                           
  6254 ;; *************** function _mpap_normal_mode *****************
  6255 ;; Defined at:
  6256 ;;		line 174 in file "mpap.c"
  6257 ;; Parameters:    Size  Location     Type
  6258 ;;		None
  6259 ;; Auto vars:     Size  Location     Type
  6260 ;;  cod_ret         1    1[COMRAM] char 
  6261 ;; Return value:  Size  Location     Type
  6262 ;;                  1    wreg      char 
  6263 ;; Registers used:
  6264 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
  6265 ;; Tracked objects:
  6266 ;;		On entry : 0/0
  6267 ;;		On exit  : 0/0
  6268 ;;		Unchanged: 0/0
  6269 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6270 ;;      Params:         0       0       0       0       0       0       0       0       0
  6271 ;;      Locals:         1       0       0       0       0       0       0       0       0
  6272 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6273 ;;      Totals:         1       0       0       0       0       0       0       0       0
  6274 ;;Total ram usage:        1 bytes
  6275 ;; Hardware stack levels used:    1
  6276 ;; Hardware stack levels required when called:    2
  6277 ;; This function calls:
  6278 ;;		_mpap_do1step
  6279 ;; This function is called by:
  6280 ;;		_mpap_job
  6281 ;; This function uses a non-reentrant model
  6282 ;;
  6283                           
  6284                           	psect	text49
  6285  001CD2                     __ptext49:
  6286                           	opt callstack 0
  6287  001CD2                     _mpap_normal_mode:
  6288                           	opt callstack 22
  6289                           
  6290                           ;mpap.c: 176: int8_t cod_ret = 0;
  6291                           
  6292                           ;incstack = 0
  6293  001CD2  0E00               	movlw	0
  6294  001CD4  6E02               	movwf	mpap_normal_mode@cod_ret,c
  6295                           
  6296                           ;mpap.c: 177: if (mpap.numSteps_tomove!=0)
  6297  001CD6  5039               	movf	_mpap+4,w,c	;volatile
  6298  001CD8  103A               	iorwf	_mpap+5,w,c	;volatile
  6299  001CDA  B4D8               	btfsc	status,2,c
  6300  001CDC  D01C               	goto	i2l494
  6301                           
  6302                           ;mpap.c: 178: {;mpap.c: 179: mpap_do1step(mpap.KI);
  6303  001CDE  503B               	movf	_mpap+6,w,c	;volatile
  6304  001CE0  ECAE  F00E         	call	_mpap_do1step
  6305                           
  6306                           ;mpap.c: 181: mpap.counter_steps+= mpap.KI;
  6307  001CE4  503B               	movf	_mpap+6,w,c	;volatile
  6308  001CE6  2637               	addwf	_mpap+2,f,c	;volatile
  6309  001CE8  0E00               	movlw	0
  6310  001CEA  BE3B               	btfsc	_mpap+6,7,c	;volatile
  6311  001CEC  0EFF               	movlw	255
  6312  001CEE  2238               	addwfc	_mpap+3,f,c	;volatile
  6313                           
  6314                           ;mpap.c: 183: mpap.numSteps_current+= mpap.KI;
  6315  001CF0  503B               	movf	_mpap+6,w,c	;volatile
  6316  001CF2  2635               	addwf	_mpap,f,c	;volatile
  6317  001CF4  0E00               	movlw	0
  6318  001CF6  BE3B               	btfsc	_mpap+6,7,c	;volatile
  6319  001CF8  0EFF               	movlw	255
  6320  001CFA  2236               	addwfc	_mpap+1,f,c	;volatile
  6321                           
  6322                           ;mpap.c: 185: if ( mpap.counter_steps== mpap.numSteps_tomove)
  6323  001CFC  5039               	movf	_mpap+4,w,c	;volatile
  6324  001CFE  1837               	xorwf	_mpap+2,w,c	;volatile
  6325  001D00  E10A               	bnz	i2l494
  6326  001D02  503A               	movf	_mpap+5,w,c	;volatile
  6327  001D04  1838               	xorwf	_mpap+3,w,c	;volatile
  6328  001D06  A4D8               	btfss	status,2,c
  6329  001D08  D006               	goto	i2l494
  6330                           
  6331                           ;mpap.c: 186: {;mpap.c: 187: mpap.numSteps_tomove = 0;
  6332  001D0A  0E00               	movlw	0
  6333  001D0C  6E3A               	movwf	_mpap+5,c	;volatile
  6334  001D0E  0E00               	movlw	0
  6335  001D10  6E39               	movwf	_mpap+4,c	;volatile
  6336                           
  6337                           ;mpap.c: 188: cod_ret = 1;
  6338  001D12  0E01               	movlw	1
  6339  001D14  6E02               	movwf	mpap_normal_mode@cod_ret,c
  6340  001D16                     i2l494:
  6341                           
  6342                           ;mpap.c: 189: };mpap.c: 190: };mpap.c: 191: return cod_ret;
  6343  001D16  5002               	movf	mpap_normal_mode@cod_ret,w,c
  6344  001D18  0012               	return		;funcret
  6345  001D1A                     __end_of_mpap_normal_mode:
  6346                           	opt callstack 0
  6347                           
  6348 ;; *************** function _mpap_homming *****************
  6349 ;; Defined at:
  6350 ;;		line 151 in file "mpap.c"
  6351 ;; Parameters:    Size  Location     Type
  6352 ;;		None
  6353 ;; Auto vars:     Size  Location     Type
  6354 ;;  cod_ret         1    2[COMRAM] char 
  6355 ;; Return value:  Size  Location     Type
  6356 ;;                  1    wreg      char 
  6357 ;; Registers used:
  6358 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
  6359 ;; Tracked objects:
  6360 ;;		On entry : 0/0
  6361 ;;		On exit  : 0/0
  6362 ;;		Unchanged: 0/0
  6363 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6364 ;;      Params:         0       0       0       0       0       0       0       0       0
  6365 ;;      Locals:         1       0       0       0       0       0       0       0       0
  6366 ;;      Temps:          1       0       0       0       0       0       0       0       0
  6367 ;;      Totals:         2       0       0       0       0       0       0       0       0
  6368 ;;Total ram usage:        2 bytes
  6369 ;; Hardware stack levels used:    1
  6370 ;; Hardware stack levels required when called:    2
  6371 ;; This function calls:
  6372 ;;		_mpap_do1step
  6373 ;; This function is called by:
  6374 ;;		_mpap_job
  6375 ;; This function uses a non-reentrant model
  6376 ;;
  6377                           
  6378                           	psect	text50
  6379  001AF6                     __ptext50:
  6380                           	opt callstack 0
  6381  001AF6                     _mpap_homming:
  6382                           	opt callstack 22
  6383                           
  6384                           ;mpap.c: 153: int8_t cod_ret = 0;
  6385                           
  6386                           ;incstack = 0
  6387  001AF6  0E00               	movlw	0
  6388  001AF8  6E03               	movwf	mpap_homming@cod_ret,c
  6389                           
  6390                           ;mpap.c: 154: if (mpap.numSteps_tomove!=0)
  6391  001AFA  5039               	movf	_mpap+4,w,c	;volatile
  6392  001AFC  103A               	iorwf	_mpap+5,w,c	;volatile
  6393  001AFE  B4D8               	btfsc	status,2,c
  6394  001B00  D024               	goto	i2l488
  6395                           
  6396                           ;mpap.c: 155: {;mpap.c: 156: mpap_do1step(mpap.KI);
  6397  001B02  503B               	movf	_mpap+6,w,c	;volatile
  6398  001B04  ECAE  F00E         	call	_mpap_do1step
  6399                           
  6400                           ;mpap.c: 158: mpap.counter_steps+= mpap.KI;
  6401  001B08  503B               	movf	_mpap+6,w,c	;volatile
  6402  001B0A  2637               	addwf	_mpap+2,f,c	;volatile
  6403  001B0C  0E00               	movlw	0
  6404  001B0E  BE3B               	btfsc	_mpap+6,7,c	;volatile
  6405  001B10  0EFF               	movlw	255
  6406  001B12  2238               	addwfc	_mpap+3,f,c	;volatile
  6407                           
  6408                           ;mpap.c: 160: if (((PORTE & (1<<1))>>1) == 0)
  6409  001B14  CF84 F002          	movff	3972,??_mpap_homming	;volatile
  6410  001B18  90D8               	bcf	status,0,c
  6411  001B1A  3202               	rrcf	??_mpap_homming,f,c
  6412  001B1C  B002               	btfsc	??_mpap_homming,0,c
  6413  001B1E  D006               	goto	i2l2773
  6414                           
  6415                           ;mpap.c: 161: {;mpap.c: 162: mpap.numSteps_tomove = 0x0000;
  6416  001B20  0E00               	movlw	0
  6417  001B22  6E3A               	movwf	_mpap+5,c	;volatile
  6418  001B24  0E00               	movlw	0
  6419  001B26  6E39               	movwf	_mpap+4,c	;volatile
  6420                           
  6421                           ;mpap.c: 163: cod_ret = 1;
  6422  001B28  0E01               	movlw	1
  6423  001B2A  6E03               	movwf	mpap_homming@cod_ret,c
  6424  001B2C                     i2l2773:
  6425                           
  6426                           ;mpap.c: 164: };mpap.c: 165: if ( mpap.counter_steps == mpap.numSteps_tomove)
  6427  001B2C  5039               	movf	_mpap+4,w,c	;volatile
  6428  001B2E  1837               	xorwf	_mpap+2,w,c	;volatile
  6429  001B30  E10C               	bnz	i2l488
  6430  001B32  503A               	movf	_mpap+5,w,c	;volatile
  6431  001B34  1838               	xorwf	_mpap+3,w,c	;volatile
  6432  001B36  A4D8               	btfss	status,2,c
  6433  001B38  D008               	goto	i2l488
  6434                           
  6435                           ;mpap.c: 166: {;mpap.c: 167: mpap.numSteps_tomove = 0x0000;
  6436  001B3A  0E00               	movlw	0
  6437  001B3C  6E3A               	movwf	_mpap+5,c	;volatile
  6438  001B3E  0E00               	movlw	0
  6439  001B40  6E39               	movwf	_mpap+4,c	;volatile
  6440                           
  6441                           ;mpap.c: 168: cod_ret = 1;
  6442  001B42  0E01               	movlw	1
  6443  001B44  6E03               	movwf	mpap_homming@cod_ret,c
  6444                           
  6445                           ;mpap.c: 169: pulsonic.errors.flag.mpap_home_sensor = 1;
  6446  001B46  0101               	movlb	1	; () banked
  6447  001B48  8175               	bsf	(_pulsonic+117)& (0+255),0,b
  6448  001B4A                     i2l488:
  6449                           
  6450                           ;mpap.c: 170: };mpap.c: 171: };mpap.c: 172: return cod_ret;
  6451  001B4A  5003               	movf	mpap_homming@cod_ret,w,c
  6452  001B4C  0012               	return		;funcret
  6453  001B4E                     __end_of_mpap_homming:
  6454                           	opt callstack 0
  6455                           
  6456 ;; *************** function _mpap_do1step *****************
  6457 ;; Defined at:
  6458 ;;		line 131 in file "mpap.c"
  6459 ;; Parameters:    Size  Location     Type
  6460 ;;  KI              1    wreg     char 
  6461 ;; Auto vars:     Size  Location     Type
  6462 ;;  KI              1    0[COMRAM] char 
  6463 ;; Return value:  Size  Location     Type
  6464 ;;                  1    wreg      void 
  6465 ;; Registers used:
  6466 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
  6467 ;; Tracked objects:
  6468 ;;		On entry : 0/0
  6469 ;;		On exit  : 0/0
  6470 ;;		Unchanged: 0/0
  6471 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6472 ;;      Params:         0       0       0       0       0       0       0       0       0
  6473 ;;      Locals:         1       0       0       0       0       0       0       0       0
  6474 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6475 ;;      Totals:         1       0       0       0       0       0       0       0       0
  6476 ;;Total ram usage:        1 bytes
  6477 ;; Hardware stack levels used:    1
  6478 ;; Hardware stack levels required when called:    1
  6479 ;; This function calls:
  6480 ;;		__mpap_step1
  6481 ;;		__mpap_step2
  6482 ;;		__mpap_step3
  6483 ;;		__mpap_step4
  6484 ;; This function is called by:
  6485 ;;		_mpap_homming
  6486 ;;		_mpap_normal_mode
  6487 ;; This function uses a non-reentrant model
  6488 ;;
  6489                           
  6490                           	psect	text51
  6491  001D5C                     __ptext51:
  6492                           	opt callstack 0
  6493  001D5C                     _mpap_do1step:
  6494                           	opt callstack 22
  6495                           
  6496                           ;incstack = 0
  6497                           ;mpap_do1step@KI stored from wreg
  6498  001D5C  6E01               	movwf	mpap_do1step@KI,c
  6499                           
  6500                           ;mpap.c: 133: static int8_t i = -1;;mpap.c: 135: i= i + KI;
  6501  001D5E  5044               	movf	mpap_do1step@i,w,c
  6502  001D60  2401               	addwf	mpap_do1step@KI,w,c
  6503  001D62  6E44               	movwf	mpap_do1step@i,c
  6504                           
  6505                           ;mpap.c: 137: if (i>3){i=0;}
  6506  001D64  5044               	movf	mpap_do1step@i,w,c
  6507  001D66  0A80               	xorlw	128
  6508  001D68  0F7C               	addlw	-132
  6509  001D6A  A0D8               	btfss	status,0,c
  6510  001D6C  D002               	goto	i2l2431
  6511  001D6E  0E00               	movlw	0
  6512  001D70  6E44               	movwf	mpap_do1step@i,c
  6513  001D72                     i2l2431:
  6514                           
  6515                           ;mpap.c: 138: if (i<0){i=3;}
  6516  001D72  AE44               	btfss	mpap_do1step@i,7,c
  6517  001D74  D002               	goto	i2l2435
  6518  001D76  0E03               	movlw	3
  6519  001D78  6E44               	movwf	mpap_do1step@i,c
  6520  001D7A                     i2l2435:
  6521                           
  6522                           ;mpap.c: 140: mpap_step[i]();
  6523  001D7A  5044               	movf	mpap_do1step@i,w,c
  6524  001D7C  0D02               	mullw	2
  6525  001D7E  50F3               	movf	prodl,w,c
  6526  001D80  0FC9               	addlw	low _mpap_step
  6527  001D82  6ED9               	movwf	fsr2l,c
  6528  001D84  6ADA               	clrf	fsr2h,c
  6529  001D86  D801               	call	i2u191_48
  6530  001D88  0012               	return	
  6531  001D8A                     i2u191_48:
  6532  001D8A  0005               	push	
  6533  001D8C  6EFA               	movwf	pclath,c
  6534  001D8E  50DE               	movf	postinc2,w,c
  6535  001D90  6EFD               	movwf	tosl,c
  6536  001D92  50DE               	movf	postinc2,w,c
  6537  001D94  6EFE               	movwf	tosh,c
  6538  001D96  50F8               	movf	tblptru,w,c
  6539  001D98  6EFF               	movwf	tosu,c
  6540  001D9A  50FA               	movf	pclath,w,c
  6541  001D9C  0012               	return		;indir
  6542  001D9E                     __end_of_mpap_do1step:
  6543                           	opt callstack 0
  6544                           
  6545 ;; *************** function __mpap_step3 *****************
  6546 ;; Defined at:
  6547 ;;		line 51 in file "mpap.c"
  6548 ;; Parameters:    Size  Location     Type
  6549 ;;		None
  6550 ;; Auto vars:     Size  Location     Type
  6551 ;;		None
  6552 ;; Return value:  Size  Location     Type
  6553 ;;                  1    wreg      void 
  6554 ;; Registers used:
  6555 ;;		wreg, status,2
  6556 ;; Tracked objects:
  6557 ;;		On entry : 0/0
  6558 ;;		On exit  : 0/0
  6559 ;;		Unchanged: 0/0
  6560 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6561 ;;      Params:         0       0       0       0       0       0       0       0       0
  6562 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6563 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6564 ;;      Totals:         0       0       0       0       0       0       0       0       0
  6565 ;;Total ram usage:        0 bytes
  6566 ;; Hardware stack levels used:    1
  6567 ;; This function calls:
  6568 ;;		Nothing
  6569 ;; This function is called by:
  6570 ;;		_mpap_do1step
  6571 ;; This function uses a non-reentrant model
  6572 ;;
  6573                           
  6574                           	psect	text52
  6575  002004                     __ptext52:
  6576                           	opt callstack 0
  6577  002004                     __mpap_step3:
  6578                           	opt callstack 22
  6579                           
  6580                           ;mpap.c: 58: LATD = 0x02;
  6581                           
  6582                           ;incstack = 0
  6583  002004  0E02               	movlw	2
  6584  002006  6E8C               	movwf	3980,c	;volatile
  6585  002008  0012               	return		;funcret
  6586  00200A                     __end_of__mpap_step3:
  6587                           	opt callstack 0
  6588                           
  6589 ;; *************** function __mpap_step2 *****************
  6590 ;; Defined at:
  6591 ;;		line 42 in file "mpap.c"
  6592 ;; Parameters:    Size  Location     Type
  6593 ;;		None
  6594 ;; Auto vars:     Size  Location     Type
  6595 ;;		None
  6596 ;; Return value:  Size  Location     Type
  6597 ;;                  1    wreg      void 
  6598 ;; Registers used:
  6599 ;;		wreg, status,2
  6600 ;; Tracked objects:
  6601 ;;		On entry : 0/0
  6602 ;;		On exit  : 0/0
  6603 ;;		Unchanged: 0/0
  6604 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6605 ;;      Params:         0       0       0       0       0       0       0       0       0
  6606 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6607 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6608 ;;      Totals:         0       0       0       0       0       0       0       0       0
  6609 ;;Total ram usage:        0 bytes
  6610 ;; Hardware stack levels used:    1
  6611 ;; This function calls:
  6612 ;;		Nothing
  6613 ;; This function is called by:
  6614 ;;		_mpap_do1step
  6615 ;; This function uses a non-reentrant model
  6616 ;;
  6617                           
  6618                           	psect	text53
  6619  00200A                     __ptext53:
  6620                           	opt callstack 0
  6621  00200A                     __mpap_step2:
  6622                           	opt callstack 22
  6623                           
  6624                           ;mpap.c: 49: LATD = 0x04;
  6625                           
  6626                           ;incstack = 0
  6627  00200A  0E04               	movlw	4
  6628  00200C  6E8C               	movwf	3980,c	;volatile
  6629  00200E  0012               	return		;funcret
  6630  002010                     __end_of__mpap_step2:
  6631                           	opt callstack 0
  6632                           
  6633 ;; *************** function __mpap_step1 *****************
  6634 ;; Defined at:
  6635 ;;		line 33 in file "mpap.c"
  6636 ;; Parameters:    Size  Location     Type
  6637 ;;		None
  6638 ;; Auto vars:     Size  Location     Type
  6639 ;;		None
  6640 ;; Return value:  Size  Location     Type
  6641 ;;                  1    wreg      void 
  6642 ;; Registers used:
  6643 ;;		wreg, status,2
  6644 ;; Tracked objects:
  6645 ;;		On entry : 0/0
  6646 ;;		On exit  : 0/0
  6647 ;;		Unchanged: 0/0
  6648 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6649 ;;      Params:         0       0       0       0       0       0       0       0       0
  6650 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6651 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6652 ;;      Totals:         0       0       0       0       0       0       0       0       0
  6653 ;;Total ram usage:        0 bytes
  6654 ;; Hardware stack levels used:    1
  6655 ;; This function calls:
  6656 ;;		Nothing
  6657 ;; This function is called by:
  6658 ;;		_mpap_do1step
  6659 ;; This function uses a non-reentrant model
  6660 ;;
  6661                           
  6662                           	psect	text54
  6663  002010                     __ptext54:
  6664                           	opt callstack 0
  6665  002010                     __mpap_step1:
  6666                           	opt callstack 22
  6667                           
  6668                           ;mpap.c: 40: LATD = 0x08;
  6669                           
  6670                           ;incstack = 0
  6671  002010  0E08               	movlw	8
  6672  002012  6E8C               	movwf	3980,c	;volatile
  6673  002014  0012               	return		;funcret
  6674  002016                     __end_of__mpap_step1:
  6675                           	opt callstack 0
  6676                           
  6677 ;; *************** function __mpap_step4 *****************
  6678 ;; Defined at:
  6679 ;;		line 60 in file "mpap.c"
  6680 ;; Parameters:    Size  Location     Type
  6681 ;;		None
  6682 ;; Auto vars:     Size  Location     Type
  6683 ;;		None
  6684 ;; Return value:  Size  Location     Type
  6685 ;;                  1    wreg      void 
  6686 ;; Registers used:
  6687 ;;		wreg, status,2
  6688 ;; Tracked objects:
  6689 ;;		On entry : 0/0
  6690 ;;		On exit  : 0/0
  6691 ;;		Unchanged: 0/0
  6692 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6693 ;;      Params:         0       0       0       0       0       0       0       0       0
  6694 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6695 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6696 ;;      Totals:         0       0       0       0       0       0       0       0       0
  6697 ;;Total ram usage:        0 bytes
  6698 ;; Hardware stack levels used:    1
  6699 ;; This function calls:
  6700 ;;		Nothing
  6701 ;; This function is called by:
  6702 ;;		_mpap_do1step
  6703 ;; This function uses a non-reentrant model
  6704 ;;
  6705                           
  6706                           	psect	text55
  6707  002016                     __ptext55:
  6708                           	opt callstack 0
  6709  002016                     __mpap_step4:
  6710                           	opt callstack 22
  6711                           
  6712                           ;mpap.c: 67: LATD = 0x01;
  6713                           
  6714                           ;incstack = 0
  6715  002016  0E01               	movlw	1
  6716  002018  6E8C               	movwf	3980,c	;volatile
  6717  00201A  0012               	return		;funcret
  6718  00201C                     __end_of__mpap_step4:
  6719                           	opt callstack 0
  6720                           
  6721 ;; *************** function __mpap_off *****************
  6722 ;; Defined at:
  6723 ;;		line 75 in file "mpap.c"
  6724 ;; Parameters:    Size  Location     Type
  6725 ;;		None
  6726 ;; Auto vars:     Size  Location     Type
  6727 ;;		None
  6728 ;; Return value:  Size  Location     Type
  6729 ;;                  1    wreg      void 
  6730 ;; Registers used:
  6731 ;;		status,2, status,0
  6732 ;; Tracked objects:
  6733 ;;		On entry : 3F/0
  6734 ;;		On exit  : 3F/0
  6735 ;;		Unchanged: 3F/0
  6736 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6737 ;;      Params:         0       0       0       0       0       0       0       0       0
  6738 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6739 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6740 ;;      Totals:         0       0       0       0       0       0       0       0       0
  6741 ;;Total ram usage:        0 bytes
  6742 ;; Hardware stack levels used:    1
  6743 ;; This function calls:
  6744 ;;		Nothing
  6745 ;; This function is called by:
  6746 ;;		_mpap_job
  6747 ;; This function uses a non-reentrant model
  6748 ;;
  6749                           
  6750                           	psect	text56
  6751  001FDE                     __ptext56:
  6752                           	opt callstack 0
  6753  001FDE                     __mpap_off:
  6754                           	opt callstack 24
  6755                           
  6756                           ; BSR set to: 0
  6757                           
  6758                           ; BSR set to: 0
  6759                           
  6760                           ;incstack = 0
  6761                           ;mpap.c: 77: do{LATD &= ~(1<<0);}while(0);
  6762  001FDE  908C               	bcf	3980,0,c	;volatile
  6763                           
  6764                           ; BSR set to: 0
  6765                           
  6766                           ;mpap.c: 78: do{LATD &= ~(1<<1);}while(0);
  6767  001FE0  928C               	bcf	3980,1,c	;volatile
  6768                           
  6769                           ; BSR set to: 0
  6770                           
  6771                           ;mpap.c: 79: do{LATD &= ~(1<<2);}while(0);
  6772  001FE2  948C               	bcf	3980,2,c	;volatile
  6773                           
  6774                           ; BSR set to: 0
  6775                           
  6776                           ;mpap.c: 80: do{LATD &= ~(1<<3);}while(0);
  6777  001FE4  968C               	bcf	3980,3,c	;volatile
  6778                           
  6779                           ; BSR set to: 0
  6780  001FE6  0012               	return		;funcret
  6781  001FE8                     __end_of__mpap_off:
  6782                           	opt callstack 0
  6783                           
  6784                           	psect	text57
  6785  000000                     __ptext57:
  6786                           	opt callstack 0
  6787                           
  6788                           	psect	rparam
  6789  0000                     
  6790                           	psect	temp
  6791  000045                     btemp:
  6792                           	opt callstack 0
  6793  000045                     	ds	1
  6794  0000                     int$flags	set	btemp
  6795  0000                     wtemp8	set	btemp+1
  6796  0000                     ttemp5	set	btemp+1
  6797  0000                     ttemp6	set	btemp+4
  6798  0000                     ttemp7	set	btemp+8
  6799                           tosu	equ	0xFFF
  6800                           tosh	equ	0xFFE
  6801                           tosl	equ	0xFFD
  6802                           stkptr	equ	0xFFC
  6803                           pclatu	equ	0xFFB
  6804                           pclath	equ	0xFFA
  6805                           pcl	equ	0xFF9
  6806                           tblptru	equ	0xFF8
  6807                           tblptrh	equ	0xFF7
  6808                           tblptrl	equ	0xFF6
  6809                           tablat	equ	0xFF5
  6810                           prodh	equ	0xFF4
  6811                           prodl	equ	0xFF3
  6812                           indf0	equ	0xFEF
  6813                           postinc0	equ	0xFEE
  6814                           postdec0	equ	0xFED
  6815                           preinc0	equ	0xFEC
  6816                           plusw0	equ	0xFEB
  6817                           fsr0h	equ	0xFEA
  6818                           fsr0l	equ	0xFE9
  6819                           wreg	equ	0xFE8
  6820                           indf1	equ	0xFE7
  6821                           postinc1	equ	0xFE6
  6822                           postdec1	equ	0xFE5
  6823                           preinc1	equ	0xFE4
  6824                           plusw1	equ	0xFE3
  6825                           fsr1h	equ	0xFE2
  6826                           fsr1l	equ	0xFE1
  6827                           bsr	equ	0xFE0
  6828                           indf2	equ	0xFDF
  6829                           postinc2	equ	0xFDE
  6830                           postdec2	equ	0xFDD
  6831                           preinc2	equ	0xFDC
  6832                           plusw2	equ	0xFDB
  6833                           fsr2h	equ	0xFDA
  6834                           fsr2l	equ	0xFD9
  6835                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    12
    Data        32
    BSS         222
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     54      70
    BANK0           160     19     134
    BANK1           256      0     123
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    utoa@buf	PTR unsigned char  size(1) Largest target is 10
		 -> disp_show_quantity@buff(BANK0[10]), 

    sp__utoa	PTR unsigned char  size(1) Largest target is 10
		 -> disp_show_quantity@buff(BANK0[10]), 

    itoa@buf	PTR unsigned char  size(1) Largest target is 10
		 -> disp_show_quantity@buff(BANK0[10]), 

    itoa@cp	PTR unsigned char  size(1) Largest target is 10
		 -> disp_show_quantity@buff(BANK0[10]), 

    mpap_off	PTR FTN()void  size(2) Largest target is 1
		 -> _mpap_off(), 

    mpap_step	PTR FTN()void [4] size(2) Largest target is 1
		 -> _mpap_step4(), _mpap_step3(), _mpap_step2(), _mpap_step1(), 

    sp__itoa	PTR unsigned char  size(1) Largest target is 10
		 -> disp_show_quantity@buff(BANK0[10]), 

    S304_multiplexedDisp$Qonoff	PTR FTN()void [2] size(2) Largest target is 1
		 -> multiplexedDisp4_on(), multiplexedDisp4_off(), multiplexedDisp3_on(), multiplexedDisp3_off(), 
		 -> multiplexedDisp2_on(), multiplexedDisp2_off(), multiplexedDisp1_on(), multiplexedDisp1_off(), 
		 -> multiplexedDisp0_on(), multiplexedDisp0_off(), 

    multiplexedDisp.Qonoff	PTR FTN()void [2] size(2) Largest target is 1
		 -> multiplexedDisp4_on(), multiplexedDisp4_off(), multiplexedDisp3_on(), multiplexedDisp3_off(), 
		 -> multiplexedDisp2_on(), multiplexedDisp2_off(), multiplexedDisp1_on(), multiplexedDisp1_off(), 
		 -> multiplexedDisp0_on(), multiplexedDisp0_off(), 

    S191_key$keyDo	PTR FTN()void  size(2) Largest target is 0

    key.keyDo	PTR FTN()void  size(2) Largest target is 0

    S191_key$keyRead	PTR FTN()unsigned char  size(2) Largest target is 1
		 -> keyRead_pin_key5(), keyRead_pin_key4(), keyRead_pin_key3(), keyRead_pin_key2(), 
		 -> keyRead_pin_key1(), 

    key.keyRead	PTR FTN()unsigned char  size(2) Largest target is 1
		 -> keyRead_pin_key5(), keyRead_pin_key4(), keyRead_pin_key3(), keyRead_pin_key2(), 
		 -> keyRead_pin_key1(), 


Critical Paths under _main in COMRAM

    _main->_disp_show_quantity
    _nozzle_moveto->_mpap_setupToTurn
    _mpap_test->_mpap_setupToTurn
    _mpap_setupToHomming->_mpap_setupToTurn
    _mpap_setupToTurn->___wmul
    _ikb_job->_ikey_parsing
    _ikey_parsing->___ftge
    ___lwtoft->___ftpack
    _ikb_flush->_ikey_clear_all_flag
    _display7s_job->_multiplexedDisp_job
    _display7s_init->_multiplexedDisp_init
    _disp_show_quantity->___fttol
    _itoa->_utoa
    _utoa->___lwdiv
    ___fttol->___ftmul
    ___ftsub->___ftadd
    ___ftadd->___ftpack
    ___ftmul->___ftpack
    ___ftge->___lwtoft
    ___awtoft->___ftpack

Critical Paths under _INTERRUPCION in COMRAM

    _INTERRUPCION->_mpap_job
    _mpap_job->_mpap_homming
    _mpap_normal_mode->_mpap_do1step
    _mpap_homming->_mpap_do1step

Critical Paths under _main in BANK0

    _main->_disp_show_quantity

Critical Paths under _INTERRUPCION in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPCION in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPCION in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPCION in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPCION in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPCION in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPCION in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INTERRUPCION in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0   31661
                                             52 COMRAM     2     2      0
                 _disp_show_quantity
                     _display7s_init
                      _display7s_job
                          _ikb_flush
                           _ikb_init
                            _ikb_job
              _ikb_key_is_ready2read
                _mpap_setupToHomming
                   _mpap_setupToTurn
                          _mpap_sych
                          _mpap_test
                      _nozzle_moveto
 ---------------------------------------------------------------------------------
 (1) _nozzle_moveto                                        1     1      0    1305
                                             20 COMRAM     1     1      0
                             ___wmul
                   _mpap_setupToTurn
 ---------------------------------------------------------------------------------
 (1) _mpap_test                                            2     2      0    1283
                                             20 COMRAM     2     2      0
                             ___wmul
                   _mpap_setupToTurn
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     889
                                             10 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (1) _mpap_sych                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _mpap_setupToHomming                                  0     0      0     394
                   _mpap_setupToTurn
 ---------------------------------------------------------------------------------
 (2) _mpap_setupToTurn                                     4     2      2     394
                                             16 COMRAM     4     2      2
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _ikb_key_is_ready2read                                1     1      0      22
                                             10 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _ikb_job                                              0     0      0    8700
                       _ikey_parsing
                          _ikey_scan
 ---------------------------------------------------------------------------------
 (2) _ikey_scan                                            2     2      0     463
                                             10 COMRAM     2     2      0
                   _keyRead_pin_key1 *
                   _keyRead_pin_key2 *
                   _keyRead_pin_key3 *
                   _keyRead_pin_key4 *
                   _keyRead_pin_key5 *
 ---------------------------------------------------------------------------------
 (3) _keyRead_pin_key5                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _keyRead_pin_key4                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _keyRead_pin_key3                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _keyRead_pin_key2                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _keyRead_pin_key1                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ikey_parsing                                         5     5      0    8237
                                             30 COMRAM     5     5      0
                             ___ftge
                           ___lwtoft
                 _ikey_is_accessible
 ---------------------------------------------------------------------------------
 (3) _ikey_is_accessible                                   3     3      0      66
                                             10 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (3) ___lwtoft                                             3     0      3    3774
                                             18 COMRAM     3     0      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (1) _ikb_init                                             1     1      0     200
                                             10 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _ikb_flush                                            0     0      0      68
                _ikey_clear_all_flag
 ---------------------------------------------------------------------------------
 (2) _ikey_clear_all_flag                                  1     1      0      68
                                             10 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _display7s_job                                        0     0      0     134
                _multiplexedDisp_job
 ---------------------------------------------------------------------------------
 (2) _multiplexedDisp_job                                  8     8      0     134
                                             10 COMRAM     8     8      0
               _multiplexedDisp0_off *
                _multiplexedDisp0_on *
               _multiplexedDisp1_off *
                _multiplexedDisp1_on *
               _multiplexedDisp2_off *
                _multiplexedDisp2_on *
               _multiplexedDisp3_off *
                _multiplexedDisp3_on *
               _multiplexedDisp4_off *
                _multiplexedDisp4_on *
 ---------------------------------------------------------------------------------
 (1) _display7s_init                                       0     0      0      68
               _multiplexedDisp_init
 ---------------------------------------------------------------------------------
 (2) _multiplexedDisp_init                                 1     1      0      68
                                             10 COMRAM     1     1      0
               _multiplexedDisp0_off *
                _multiplexedDisp0_on *
               _multiplexedDisp1_off *
                _multiplexedDisp1_on *
               _multiplexedDisp2_off *
                _multiplexedDisp2_on *
               _multiplexedDisp3_off *
                _multiplexedDisp3_on *
               _multiplexedDisp4_off *
                _multiplexedDisp4_on *
 ---------------------------------------------------------------------------------
 (3) _multiplexedDisp4_on                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _multiplexedDisp4_off                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _multiplexedDisp3_on                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _multiplexedDisp3_off                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _multiplexedDisp2_on                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _multiplexedDisp2_off                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _multiplexedDisp1_on                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _multiplexedDisp1_off                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _multiplexedDisp0_on                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _multiplexedDisp0_off                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _disp_show_quantity                                  23    20      3   19053
                                             48 COMRAM     4     1      3
                                              0 BANK0     19    19      0
                           ___awtoft
                             ___ftge
                            ___ftmul
                            ___ftsub
                            ___fttol
                               _itoa
 ---------------------------------------------------------------------------------
 (2) _itoa                                                 6     1      5    2226
                                             25 COMRAM     6     1      5
                               _utoa
 ---------------------------------------------------------------------------------
 (3) _utoa                                                 8     3      5    1723
                                             17 COMRAM     8     3      5
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (4) ___lwmod                                              5     1      4     412
                                             10 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (4) ___lwdiv                                              7     3      4     601
                                             10 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             15    11      4     621
                                             33 COMRAM    15    11      4
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftsub                                              6     0      6    5414
                                             30 COMRAM     6     0      6
                           ___awtoft (ARG)
                            ___ftadd
 ---------------------------------------------------------------------------------
 (3) ___ftadd                                             12     6      6    4998
                                             18 COMRAM    12     6      6
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___ftmul                                             15     9      6    4127
                                             18 COMRAM    15     9      6
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___ftge                                               9     3      6    1818
                                             21 COMRAM     9     3      6
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (2) ___awtoft                                             4     1      3    3536
                                             18 COMRAM     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             8     3      5    3313
                                             10 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _INTERRUPCION                                         6     6      0     101
                                              4 COMRAM     6     6      0
                           _mpap_job
 ---------------------------------------------------------------------------------
 (6) _mpap_job                                             1     1      0     101
                                              3 COMRAM     1     1      0
                          __mpap_off *
                       _mpap_homming
                   _mpap_normal_mode
 ---------------------------------------------------------------------------------
 (7) _mpap_normal_mode                                     1     1      0      46
                                              1 COMRAM     1     1      0
                       _mpap_do1step
 ---------------------------------------------------------------------------------
 (7) _mpap_homming                                         2     2      0      47
                                              1 COMRAM     2     2      0
                       _mpap_do1step
 ---------------------------------------------------------------------------------
 (8) _mpap_do1step                                         1     1      0      22
                                              0 COMRAM     1     1      0
                        __mpap_step1 *
                        __mpap_step2 *
                        __mpap_step3 *
                        __mpap_step4 *
 ---------------------------------------------------------------------------------
 (9) __mpap_step4                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (9) __mpap_step3                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (9) __mpap_step2                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (9) __mpap_step1                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (7) __mpap_off                                            0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _disp_show_quantity
     ___awtoft
       ___ftpack
     ___ftge
       ___lwtoft (ARG)
         ___ftpack
     ___ftmul
       ___ftpack
     ___ftsub
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___ftpack
     ___fttol
       ___ftmul (ARG)
         ___ftpack
     _itoa
       _utoa
         ___lwdiv
         ___lwmod
   _display7s_init
     _multiplexedDisp_init
       _multiplexedDisp0_off *
       _multiplexedDisp0_on *
       _multiplexedDisp1_off *
       _multiplexedDisp1_on *
       _multiplexedDisp2_off *
       _multiplexedDisp2_on *
       _multiplexedDisp3_off *
       _multiplexedDisp3_on *
       _multiplexedDisp4_off *
       _multiplexedDisp4_on *
   _display7s_job
     _multiplexedDisp_job
       _multiplexedDisp0_off *
       _multiplexedDisp0_on *
       _multiplexedDisp1_off *
       _multiplexedDisp1_on *
       _multiplexedDisp2_off *
       _multiplexedDisp2_on *
       _multiplexedDisp3_off *
       _multiplexedDisp3_on *
       _multiplexedDisp4_off *
       _multiplexedDisp4_on *
   _ikb_flush
     _ikey_clear_all_flag
   _ikb_init
   _ikb_job
     _ikey_parsing
       ___ftge
         ___lwtoft (ARG)
           ___ftpack
       ___lwtoft
         ___ftpack
       _ikey_is_accessible
     _ikey_scan
       _keyRead_pin_key1 *
       _keyRead_pin_key2 *
       _keyRead_pin_key3 *
       _keyRead_pin_key4 *
       _keyRead_pin_key5 *
   _ikb_key_is_ready2read
   _mpap_setupToHomming
     _mpap_setupToTurn
       ___wmul (ARG)
   _mpap_setupToTurn
     ___wmul (ARG)
   _mpap_sych
   _mpap_test
     ___wmul
     _mpap_setupToTurn
       ___wmul (ARG)
   _nozzle_moveto
     ___wmul
     _mpap_setupToTurn
       ___wmul (ARG)

 _INTERRUPCION (ROOT)
   _mpap_job
     __mpap_off *
     _mpap_homming *
       _mpap_do1step
         __mpap_step1 *
         __mpap_step2 *
         __mpap_step3 *
         __mpap_step4 *
     _mpap_normal_mode *
       _mpap_do1step
         __mpap_step1 *
         __mpap_step2 *
         __mpap_step3 *
         __mpap_step4 *

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      7B       7       48.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     13      86       5       83.8%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     36      46       1       74.5%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     147      20        0.0%
DATA                 0      0     147       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Tue Jul  9 03:43:41 2019

          ??_mpap_setupToHomming 0015              ___wmul@multiplicand 000D  
                    __CFG_BORV$3 000000                     ___ftadd@exp1 001E  
                   ___ftadd@exp2 001D                     ___ftadd@sign 001C  
                            l240 093A                              l261 0AE0  
                            l253 0994                              l246 08F0  
                            l263 0C2C                              l255 09F6  
                            l273 0D8C                              l257 0A3A  
                            l275 0DC2                              l259 0A9C  
                            l269 0D58                              l278 0E14  
                            l471 1EA2                              l469 1E9E  
                            l870 1214                              _GIE 007F97  
                 ?_display7s_job 0001                     __CFG_BOR$OFF 000000  
                            _key 0060                              tosl 000FFD  
                            wreg 000FE8                     __CFG_LVP$OFF 000000  
                   __CFG_WDT$OFF 000000                             l1019 1B96  
                           l1211 1928                             l1029 1D52  
                           l2403 1C38                             l3141 1ADC  
                           l3125 1AAE                             l3061 1612  
                           l3071 1632                             l3401 1230  
                           l3313 1B64                             l3145 1AE2  
                           l3129 1ABA                             l3073 1634  
                           l3057 1606                             l3411 1260  
                           l3315 1B6C                             l3139 1ADA  
                           l3325 1B8C                             l3341 1D48  
                           l3333 1D28                             l3423 1988  
                           l3335 1D30                             l2711 1F78  
                           l2607 141E                             l3079 1652  
                           l3281 178A                             l3601 14A8  
                           l3353 112E                             l3291 17E6  
                           l3283 17A8                             l3419 1966  
                           l3611 14D0                             l2723 1DA2  
                           l2571 128A                             l3429 19B4  
                           l3605 14B8                             l3381 11A8  
                           l2741 187E                             l3287 17BE  
                           l3279 1780                             l3615 14E0  
                           l3383 11B2                             l3359 1156  
                           l3439 18B8                             l3703 0F2A  
                           l3543 0CDE                             l3535 0C1C  
                           l3289 17DC                             l3393 11E6  
                           l3385 11BC                             l3449 18EA  
                           l3721 0FB6                             l2737 1816  
                           l3529 0B92                             l3473 0812  
                           l2577 12C8                             l3395 11F0  
                           l3627 1DF4                             l3571 1E6E  
                           l3491 08B0                             l2595 139A  
                           l2587 133A                             l3581 144E  
                           l3725 0FC2                             l3717 0FA2  
                           l2941 16E4                             l3485 0880  
                           l2589 135A                             l3639 1E32  
                           l3671 15AA                             l3559 0E34  
                           l3495 08D0                             l3487 0890  
                           l3649 1546                             l3745 1030  
                           l3587 1476                             l3667 159A  
                           l3771 1096                             l3739 0FFA  
                           l3835 1A24                             l3685 15DA  
                           l3677 15B2                             l3781 10A6  
                           l3757 105E                             l3749 1044  
                           l3773 109C                             l3693 0E6A  
                           l3679 15BE                             _LATA 000F89  
                           _LATB 000F8A                             _LATC 000F8B  
                           _LATD 000F8C                             _LATE 000F8D  
                           u2228 12AC                             u3300 1AAA  
                           u2229 12C0                             u2270 132A  
                           u2338 13E4                             u4211 1436  
                           u2339 13F8                             u4300 1534  
                           u2268 1310                             u3260 1FAA  
                           u3180 1602                             u2269 1324  
                           u4310 1564                             u4231 145E  
                           u3440 1772                             u3520 1B70  
                           u3610 1120                             u4410 0F9E  
                           u2298 137E                             u4315 155C  
                           u2299 1392                             u4420 0FB2  
                           u3710 11C4                             u4350 15C4  
                           u3550 1D34                             u3480 17F0  
                           u3640 1148                             u4450 102C  
                           u2738 1DB2                             u2754 182C  
                           u3571 10EE                             u4291 152A  
                           u2739 1DC6                             u2755 1826  
                           u4507 166E                             u3740 11F8  
                           u4460 1040                             u2764 1846  
                           u3581 1102                             u2765 1840  
                           u3670 1186                             u2788 186A  
                           u2798 188E                             u2799 18A2  
                           u4497 163E                             _UCFG 000F6F  
                           _UCON 000F6D                     __CFG_PWRT$ON 000000  
          _ikb_key_is_ready2read 1F92                  ?_display7s_init 0001  
    __size_of_disp_show_quantity 02A0                             _main 19B8  
                   ___ftpack@arg 000B                             _itoa 1E56  
                           _mpap 0035                     ___ftpack@exp 000E  
                           fsr1h 000FE2                             fsr2h 000FDA  
                           indf2 000FDF                             fsr1l 000FE1  
                           fsr2l 000FD9                             btemp 0045  
                           _utoa 18B0                    _nozzle_moveto 1EB8  
                           prodh 000FF4                             prodl 000FF3  
                           start 000E                    __CFG_IESO$OFF 000000  
            _multiplexedDisp0_on 2038              _multiplexedDisp1_on 2030  
            _multiplexedDisp2_on 2028              _multiplexedDisp3_on 2020  
            _multiplexedDisp4_on 2040                    __CFG_MCLRE$ON 000000  
                   ___ftmul@cntr 0020             __end_of_DISP7S_CHARS 080D  
                   ___param_bank 000000                     ___ftmul@sign 0021  
            _multiplexedDisp_job 1810                     ___fttol@exp1 0030  
                   ___fttol@lval 002C                    __CFG_PLLDIV$5 000000  
                          ?_main 0001                            ?_itoa 001A  
                __end_of___ftadd 1286                            _CMCON 000FB4  
                          ?_utoa 0012                  __end_of___ftmul 151A  
                          _T0CON 000FD5                  __end_of___ftsub 1E1E  
                __end_of___fttol 15EC                  __end_of___lwdiv 1BA0  
                __end_of___lwmod 1D5C                            i2l140 1C6C  
                          i2l494 1D16                            i2l488 1B4A  
                          _TMR0H 000FD7                            _TMR0L 000FD6  
                          _PORTC 000F82                            _PORTD 000F83  
                          _PORTE 000F84                    __CFG_USBDIV$2 000000  
                          _TRISA 000F92                            _TRISB 000F93  
                          _TRISC 000F94                            _TRISD 000F95  
                          _TRISE 000F96             ?_multiplexedDisp0_on 0001  
           ?_multiplexedDisp1_on 0001             ?_multiplexedDisp2_on 0001  
           ?_multiplexedDisp3_on 0001             ?_multiplexedDisp4_on 0001  
                 __CFG_FCMEN$OFF 000000                  __end_of_ikb_job 1FCA  
           ?_multiplexedDisp_job 0001                    ___awtoft@sign 0016  
                  ?_INTERRUPCION 0001                    ___ftpack@sign 000F  
                          pclath 000FFA                            tablat 000FF5  
                          ttemp5 0046                            ttemp6 0049  
                          ttemp7 004D                            utoa@c 0019  
                          utoa@v 0017                            status 000FD8  
                 ?_nozzle_moveto 0001                            wtemp8 0046  
                 INTERRUPCION@cm 003F      __size_of_ikey_is_accessible 004C  
           _multiplexedDisp0_off 203C             _multiplexedDisp1_off 2034  
           _multiplexedDisp2_off 202C             _multiplexedDisp3_off 2024  
           _multiplexedDisp4_off 201C                    ?_ikey_parsing 0001  
           __size_of__mpap_step1 0006             __size_of__mpap_step2 0006  
           __size_of__mpap_step3 0006             __size_of__mpap_step4 0006  
                __initialization 1A2A                     __end_of_main 1A2A  
                   __end_of_itoa 1E88             _multiplexedDisp_init 1D9E  
                   __end_of_utoa 1944                  ??_display7s_job 0013  
                         ??_main 0035                    ___fttol@sign1 002B  
                         ??_itoa 001F                           ??_utoa 0017  
                  mpap_do1step@i 0044                    __activetblptr 000002  
          ??_multiplexedDisp0_on 000B            ??_multiplexedDisp1_on 000B  
          ??_multiplexedDisp2_on 000B            ??_multiplexedDisp3_on 000B  
          ??_multiplexedDisp4_on 000B            ??_multiplexedDisp_job 000B  
                 ??_INTERRUPCION 0005                           _ADCON1 000FC1  
       __end_of_keyRead_pin_key1 1FF0         __end_of_keyRead_pin_key2 1FDE  
       __end_of_keyRead_pin_key3 1FD4         __end_of_keyRead_pin_key4 1FFE  
       __end_of_keyRead_pin_key5 1FF8           ?_ikb_key_is_ready2read 0001  
               __end_of___awtoft 1E56                 __end_of___ftpack 1810  
                         i2l2431 1D72                           i2l3161 1CA4  
                         i2l2435 1D7A                           i2l3157 1C96  
                         i2l2773 1B2C                 __end_of___lwtoft 1F56  
                         _TMR0IE 007F95                           _TMR0IF 007F92  
          ?_multiplexedDisp0_off 0001            ?_multiplexedDisp1_off 0001  
          ?_multiplexedDisp2_off 0001            ?_multiplexedDisp3_off 0001  
          ?_multiplexedDisp4_off 0001                   ??_ikey_parsing 001F  
                 __CFG_VREGEN$ON 000000         __end_of_mpap_normal_mode 1D1A  
               __end_of_ikb_init 1762            ?_multiplexedDisp_init 0001  
                         ___ftge 1944                           ___wmul 1EE6  
                      ??___ftadd 0019                        ??___ftmul 0019  
                      ??___ftsub 0025                        ??___fttol 0026  
                      ??___lwdiv 000F                        ??___lwmod 000F  
                         clear_0 1A68                           clear_1 1A74  
                         clear_2 1A80                 __end_of_mpap_job 1CD2  
                      ??_ikb_job 0024            ___ftmul@f3_as_product 001D  
       __end_of_mpap_setupToTurn 1EB8                     __pdataCOMRAM 0043  
                   __mediumconst 0000                           tblptrh 000FF7  
                         tblptrl 000FF6                           tblptru 000FF8  
            ikey_is_accessible@k 000D                  ??_nozzle_moveto 0015  
   __size_of_ikey_clear_all_flag 001E                       __accesstop 0060  
        __end_of__initialization 1A86                  __CFG_PBADEN$OFF 000000  
                  ?_mpap_do1step 0001                       ___ftadd@f1 0013  
                     ___ftadd@f2 0016                       ___ftge@ff1 0016  
                     ___ftge@ff2 0019                    ___rparam_used 000001  
                     ___awtoft@c 0013                       ___ftmul@f1 0013  
                     ___ftmul@f2 0016                       ___ftsub@f1 001F  
                     ___ftsub@f2 0022                       ___fttol@f1 0022  
                 __pcstackCOMRAM 0001                     __pidataBANK0 1F56  
                  ?_mpap_homming 0001               __size_of__mpap_off 000A  
                     ___lwtoft@c 0013                 ??_display7s_init 000C  
                   _DISP7S_CHARS 080B               __size_of_ikb_flush 0006  
                 mpap_do1step@KI 0001                       __pbssBANK0 0060  
                     __pbssBANK1 0100                   ??_mpap_do1step 0001  
         ??_multiplexedDisp0_off 000B           ??_multiplexedDisp1_off 000B  
         ??_multiplexedDisp2_off 000B           ??_multiplexedDisp3_off 000B  
         ??_multiplexedDisp4_off 000B               __size_of_ikey_scan 01A0  
    __end_of_mpap_setupToHomming 1FC0           ??_multiplexedDisp_init 000B  
                 ??_mpap_homming 0002                          ?___ftge 0016  
           __end_of_INTERRUPCION 1C88               __size_of_mpap_test 00C0  
             __size_of_mpap_sych 0062                          ?___wmul 000B  
                      ?___awtoft 0013                        ?___ftpack 000B  
                      ?___lwtoft 0013             __end_of_ikey_parsing 0E3E  
     __end_of_disp_show_quantity 10DE                        ?_ikb_init 0001  
              __end_of__mpap_off 1FE8                   display7s_job@q 003E  
                      ?_mpap_job 0001                          __Hparam 0000  
                        __Lparam 0000                __end_of_ikb_flush 2004  
                __size_of___ftge 0074                          ___ftadd 10DE  
                __size_of___wmul 0026                          ___ftmul 1426  
                        ___ftsub 1DDE                          ___fttol 151A  
                        ___lwdiv 1B4E                          ___lwmod 1D1A  
                   __psmallconst 0800                          __pcinit 1A2A  
                     ??___awtoft 0016                       ??___ftpack 0010  
                        __ramtop 0800                          __ptext0 19B8  
                        __ptext1 1EB8                          __ptext2 15EC  
                        __ptext3 1EE6                          __ptext4 1A94  
                        __ptext5 1FAE                          __ptext6 1E88  
                        __ptext7 1F92                          __ptext8 1FC0  
                        __ptext9 1286                __end_of_ikey_scan 1426  
                        _ikb_job 1FC0                       ??___lwtoft 0016  
                        _group_x 00B0          ??_ikb_key_is_ready2read 000B  
     disp_show_quantity@last_pos 00E2                __end_of_mpap_test 16AC  
              __end_of_mpap_sych 1AF6          mpap_normal_mode@cod_ret 0002  
                     ??_ikb_init 000B                   __pintcode_body 1C3C  
           end_of_initialization 1A86       __end_of_ikey_is_accessible 1C3C  
              ?_keyRead_pin_key1 0001                ?_keyRead_pin_key2 0001  
              ?_keyRead_pin_key3 0001                ?_keyRead_pin_key4 0001  
              ?_keyRead_pin_key5 0001                    ??__mpap_step1 0001  
                  ??__mpap_step2 0001                    ??__mpap_step3 0001  
                  ??__mpap_step4 0001                          itoa@buf 001A  
                        itoa@val 001B                    __Lmediumconst 0000  
                        int_func 1C3C               ??_keyRead_pin_key1 000B  
             ??_keyRead_pin_key2 000B               ??_keyRead_pin_key3 000B  
             ??_keyRead_pin_key4 000B               ??_keyRead_pin_key5 000B  
                     ??_mpap_job 0004                ?_mpap_normal_mode 0001  
                        postdec1 000FE5                          postdec2 000FDD  
             ??_mpap_normal_mode 0002                          postinc0 000FEE  
                        postinc1 000FE6                          postinc2 000FDE  
         ikb_key_is_ready2read@k 000B                          utoa@buf 0012  
    __end_of_multiplexedDisp0_on 203C      __end_of_multiplexedDisp1_on 2034  
    __end_of_multiplexedDisp2_on 202C      __end_of_multiplexedDisp3_on 2024  
                        utoa@val 0013      __end_of_multiplexedDisp4_on 2044  
            _ikey_clear_all_flag 1F74      __end_of_multiplexedDisp_job 18B0  
           __end_of_mpap_do1step 1D9E            __end_of_display7s_job 1F32  
           ikey_clear_all_flag@i 000B                ?_mpap_setupToTurn 0011  
             ??_mpap_setupToTurn 0013             __end_of_mpap_homming 1B4E  
            nozzle_moveto@nozzle 0015             ?_ikey_clear_all_flag 0001  
          __size_of_INTERRUPCION 1C80                      ___ftmul@exp 001C  
            __end_of__mpap_step1 2016              __end_of__mpap_step2 2010  
            __end_of__mpap_step3 200A              __end_of__mpap_step4 201C  
            __end_of_DISP7S_NUMS 080B                   __end_of___ftge 19B8  
mpap_setupToTurn@numSteps_tomove 0011            __size_of_ikey_parsing 0630  
                 __end_of___wmul 1F0C                    __pidataCOMRAM 2044  
            start_initialization 1A2A                     _INTERRUPCION 0008  
          ??_ikey_clear_all_flag 000B                       ikey_scan@k 000C  
          __end_of_nozzle_moveto 1EE6                     _ikey_parsing 080E  
         disp_show_quantity@buff 00D3                         ??___ftge 001C  
         disp_show_quantity@real 00DD                         ??___wmul 000F  
                    __pdataBANK0 00B5                __size_of___awtoft 0038  
              __size_of___ftpack 00AE                      __pbssCOMRAM 0035  
                   mpap_test@sm0 003D                __size_of___lwtoft 0024  
                  __pcstackBANK0 00D3                     mpap_sych@sm0 0040  
                  ikey_parsing@k 0023                __size_of_ikb_init 00B6  
                    __mpap_step1 2010                      __mpap_step2 200A  
                    __mpap_step3 2004                      __mpap_step4 2016  
                    _DISP7S_NUMS 0801                       mpap_test@k 0043  
  __size_of_multiplexedDisp0_off 0004    __size_of_multiplexedDisp1_off 0004  
  __size_of_multiplexedDisp2_off 0004    __size_of_multiplexedDisp3_off 0004  
  __size_of_multiplexedDisp4_off 0004                        __mpap_off 1FDE  
               ___lwdiv@dividend 000B               _disp_show_quantity 0E3E  
              __size_of_mpap_job 004A                        __pintcode 0008  
  __size_of_multiplexedDisp_init 0040            __size_of_mpap_do1step 0042  
                       ?___ftadd 0013                         ?___ftmul 0013  
                       ?___ftsub 001F                         ?___fttol 0022  
                       ?___lwdiv 000B                         ?___lwmod 000B  
   __size_of_mpap_setupToHomming 0012              ?_disp_show_quantity 0031  
                      _ikb_flush 1FFE                         ?_ikb_job 0001  
                    __smallconst 0800            __size_of_mpap_homming 0058  
                _multiplexedDisp 00B5                        _main_flag 0041  
          multiplexedDisp_init@i 000B                        _ikey_scan 1286  
 __size_of_ikb_key_is_ready2read 001C                 ___lwdiv@quotient 0010  
  __end_of_ikb_key_is_ready2read 1FAE             ??_disp_show_quantity 0034  
                      _mpap_test 15EC                        _mpap_step 00C9  
                      _mpap_sych 1A94                   ___wmul@product 000F  
                   _mpap_do1step 1D5C          __size_of_display7s_init 0050  
                     ?__mpap_off 0001                         i2u341_48 1CB6  
                       i2u341_49 1CCC                         i2u191_48 1D8A  
             _ikey_is_accessible 1BF0                     _mpap_homming 1AF6  
      __size_of_keyRead_pin_key1 0008        __size_of_keyRead_pin_key2 000A  
      __size_of_keyRead_pin_key3 000A        __size_of_keyRead_pin_key4 0006  
      __size_of_keyRead_pin_key5 0008                       ?_ikb_flush 0001  
              ___wmul@multiplier 000B              ?_ikey_is_accessible 0001  
                      ikb_init@i 000B        __size_of_mpap_normal_mode 0048  
                     ?_ikey_scan 0001                        copy_data0 1A3E  
            mpap_homming@cod_ret 0003                       ?_mpap_test 0001  
                     ?_mpap_sych 0001             ??_ikey_is_accessible 000B  
      __size_of_mpap_setupToTurn 0030                         __Hrparam 0000  
                       __Lrparam 0000            disp_show_quantity@num 00E0  
               __size_of___ftadd 01A8                 __size_of___ftmul 00F4  
               __size_of___ftsub 0040                 __size_of___fttol 00D2  
               __size_of___lwdiv 0052                 __size_of___lwmod 0042  
                       ___awtoft 1E1E                         ___ftpack 1762  
                       ___lwtoft 1F32                 __size_of_ikb_job 000A  
   __size_of_multiplexedDisp0_on 0004     __size_of_multiplexedDisp1_on 0004  
   __size_of_multiplexedDisp2_on 0004     __size_of_multiplexedDisp3_on 0004  
   __size_of_multiplexedDisp4_on 0004                  ___lwdiv@divisor 000D  
   __size_of_multiplexedDisp_job 00A0                  ___lwdiv@counter 000F  
                       __ptext10 1FF8                         __ptext11 1FCA  
                       __ptext20 1F74                         __ptext12 1FD4  
                       __ptext21 1F0C                         __ptext13 1FE8  
                       __ptext30 2030                         __ptext22 1810  
                       __ptext14 1FF0                         __ptext31 2034  
                       __ptext23 1BA0                         __ptext15 080E  
                       __ptext40 151A                         __ptext32 2038  
                       __ptext24 1D9E                         __ptext16 1BF0  
                       __ptext41 1DDE                         __ptext33 203C  
                       __ptext25 201C                         __ptext17 1F32  
                       __ptext50 1AF6                         __ptext42 10DE  
                       __ptext34 2040                         __ptext26 2020  
                       __ptext18 16AC                         __ptext51 1D5C  
                       __ptext43 1426                         __ptext35 0E3E  
                       __ptext27 2024                         __ptext19 1FFE  
                       __ptext52 2004                         __ptext44 1944  
                       __ptext36 1E56                         __ptext28 2028  
                       __ptext53 200A                         __ptext45 1E1E  
                       __ptext37 18B0                         __ptext29 202C  
                       __ptext54 2010                         __ptext46 1762  
                       __ptext38 1D1A                         __ptext55 2016  
                       __ptext39 1B4E                         __ptext56 1FDE  
                       __ptext48 1C88                         __ptext57 0000  
                       __ptext49 1CD2                         _ikb_init 16AC  
           _mpap_setupToTurn$428 0013             multiplexedDisp_job@i 0012  
           multiplexedDisp_job@q 0011                    __size_of_main 0072  
                  __size_of_itoa 0032                    __size_of_utoa 0094  
                       _isr_flag 0042                         _mpap_job 1C88  
                       _mpap_off 00D1                      ??__mpap_off 0001  
         __size_of_display7s_job 0026                         int$flags 0045  
                       _pulsonic 0100                      ??_ikb_flush 000C  
          __CFG_CPUDIV$OSC1_PLL2 000000      __end_of_ikey_clear_all_flag 1F92  
                    ??_ikey_scan 000B                         itoa@base 001D  
                       intlevel2 0000              _mpap_setupToHomming 1FAE  
                    ??_mpap_test 0015                      ??_mpap_sych 000B  
               ___lwmod@dividend 000B                     ?__mpap_step1 0001  
                   ?__mpap_step2 0001                     ?__mpap_step3 0001  
                   ?__mpap_step4 0001                   _display7s_init 1BA0  
               _keyRead_pin_key1 1FE8                 _keyRead_pin_key2 1FD4  
               _keyRead_pin_key3 1FCA                 _keyRead_pin_key4 1FF8  
               _keyRead_pin_key5 1FF0             ?_mpap_setupToHomming 0001  
            disp_show_quantity@I 00E3              disp_show_quantity@f 0031  
            disp_show_quantity@i 00E5              disp_show_quantity@q 00E1  
                       utoa@base 0015     __end_of_multiplexedDisp0_off 2040  
   __end_of_multiplexedDisp1_off 2038     __end_of_multiplexedDisp2_off 2030  
   __end_of_multiplexedDisp3_off 2028     __end_of_multiplexedDisp4_off 2020  
         __size_of_nozzle_moveto 002E                  ___lwmod@divisor 000D  
               _mpap_normal_mode 1CD2                    _display7s_job 1F0C  
                ___lwmod@counter 000F     __end_of_multiplexedDisp_init 1DDE  
             __CFG_FOSC$HSPLL_HS 000000           __end_of_display7s_init 1BF0  
               _mpap_setupToTurn 1E88  

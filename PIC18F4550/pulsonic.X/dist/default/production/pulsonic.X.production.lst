

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Fri Jul 12 21:06:01 2019

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og9 
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    12                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    14                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    15                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    16                           	psect	text0,global,reloc=2,class=CODE,delta=1
    17                           	psect	text1,global,reloc=2,class=CODE,delta=1
    18                           	psect	text2,global,reloc=2,class=CODE,delta=1
    19                           	psect	text3,global,reloc=2,class=CODE,delta=1
    20                           	psect	text4,global,reloc=2,class=CODE,delta=1
    21                           	psect	text5,global,reloc=2,class=CODE,delta=1
    22                           	psect	text6,global,reloc=2,class=CODE,delta=1,keep,inline
    23                           	psect	text7,global,reloc=2,class=CODE,delta=1,keep,inline
    24                           	psect	text8,global,reloc=2,class=CODE,delta=1,keep,inline
    25                           	psect	text9,global,reloc=2,class=CODE,delta=1,keep,inline
    26                           	psect	text10,global,reloc=2,class=CODE,delta=1,keep,inline
    27                           	psect	text11,global,reloc=2,class=CODE,delta=1
    28                           	psect	text12,global,reloc=2,class=CODE,delta=1
    29                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=1
    30                           	psect	text14,global,reloc=2,class=CODE,delta=1
    31                           	psect	text15,global,reloc=2,class=CODE,delta=1
    32                           	psect	text16,global,reloc=2,class=CODE,delta=1
    33                           	psect	text17,global,reloc=2,class=CODE,delta=1
    34                           	psect	text18,global,reloc=2,class=CODE,delta=1
    35                           	psect	text19,global,reloc=2,class=CODE,delta=1
    36                           	psect	text20,global,reloc=2,class=CODE,delta=1,group=2
    37                           	psect	text21,global,reloc=2,class=CODE,delta=1,group=2
    38                           	psect	text22,global,reloc=2,class=CODE,delta=1,group=1
    39                           	psect	text23,global,reloc=2,class=CODE,delta=1,group=1
    40                           	psect	text24,global,reloc=2,class=CODE,delta=1,group=1
    41                           	psect	text25,global,reloc=2,class=CODE,delta=1,group=1
    42                           	psect	text26,global,reloc=2,class=CODE,delta=1,group=1
    43                           	psect	text27,global,reloc=2,class=CODE,delta=1,group=1
    44                           	psect	text28,global,reloc=2,class=CODE,delta=1,group=1
    45                           	psect	text29,global,reloc=2,class=CODE,delta=1
    46                           	psect	text30,global,reloc=2,class=CODE,delta=1
    47                           	psect	text31,global,reloc=2,class=CODE,delta=1
    48                           	psect	text32,global,reloc=2,class=CODE,delta=1
    49                           	psect	text33,global,reloc=2,class=CODE,delta=1,keep,inline
    50                           	psect	text34,global,reloc=2,class=CODE,delta=1,keep,inline
    51                           	psect	text35,global,reloc=2,class=CODE,delta=1,keep,inline
    52                           	psect	text36,global,reloc=2,class=CODE,delta=1,keep,inline
    53                           	psect	text37,global,reloc=2,class=CODE,delta=1,keep,inline
    54                           	psect	text38,global,reloc=2,class=CODE,delta=1,keep,inline
    55                           	psect	text39,global,reloc=2,class=CODE,delta=1,keep,inline
    56                           	psect	text40,global,reloc=2,class=CODE,delta=1,keep,inline
    57                           	psect	text41,global,reloc=2,class=CODE,delta=1,keep,inline
    58                           	psect	text42,global,reloc=2,class=CODE,delta=1,keep,inline
    59                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    60                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    61                           	psect	text44,global,reloc=2,class=CODE,delta=1
    62                           	psect	text45,global,reloc=2,class=CODE,delta=1
    63                           	psect	text46,global,reloc=2,class=CODE,delta=1
    64                           	psect	text47,global,reloc=2,class=CODE,delta=1
    65                           	psect	text48,global,reloc=2,class=CODE,delta=1
    66                           	psect	text49,global,reloc=2,class=CODE,delta=1
    67                           	psect	text50,global,reloc=2,class=CODE,delta=1
    68                           	psect	text51,global,reloc=2,class=CODE,delta=1
    69                           	psect	text52,global,reloc=2,class=CODE,delta=1
    70                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    71                           	psect	text53,global,reloc=2,class=CODE,delta=1
    72                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    73                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    74  0000                     
    75                           ; Version 2.05
    76                           ; Generated 20/12/2018 GMT
    77                           ; 
    78                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    79                           ; All rights reserved.
    80                           ; 
    81                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    82                           ; 
    83                           ; Redistribution and use in source and binary forms, with or without modification, are
    84                           ; permitted provided that the following conditions are met:
    85                           ; 
    86                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    87                           ;        conditions and the following disclaimer.
    88                           ; 
    89                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    90                           ;        of conditions and the following disclaimer in the documentation and/or other
    91                           ;        materials provided with the distribution.
    92                           ; 
    93                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    94                           ;        software without specific prior written permission.
    95                           ; 
    96                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    97                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    98                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    99                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   100                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   101                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   102                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   103                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   104                           ; 
   105                           ; 
   106                           ; Code-generator required, PIC18F4550 Definitions
   107                           ; 
   108                           ; SFR Addresses
   109  0000                     
   110                           	psect	idataCOMRAM
   111  001FF8                     __pidataCOMRAM:
   112                           	opt callstack 0
   113                           
   114                           ;initializer for mpap_do1step@i
   115  001FF8  FF                 	db	255
   116                           
   117                           	psect	idataBANK0
   118  001EEE                     __pidataBANK0:
   119                           	opt callstack 0
   120                           
   121                           ;initializer for _disp7s_mux
   122  001EEE  F0                 	db	low _disp7s_mux0_off
   123  001EEF  1F                 	db	high _disp7s_mux0_off
   124  001EF0  EC                 	db	low _disp7s_mux0_on
   125  001EF1  1F                 	db	high _disp7s_mux0_on
   126  001EF2  E8                 	db	low _disp7s_mux1_off
   127  001EF3  1F                 	db	high _disp7s_mux1_off
   128  001EF4  E4                 	db	low _disp7s_mux1_on
   129  001EF5  1F                 	db	high _disp7s_mux1_on
   130  001EF6  E0                 	db	low _disp7s_mux2_off
   131  001EF7  1F                 	db	high _disp7s_mux2_off
   132  001EF8  DC                 	db	low _disp7s_mux2_on
   133  001EF9  1F                 	db	high _disp7s_mux2_on
   134  001EFA  D8                 	db	low _disp7s_mux3_off
   135  001EFB  1F                 	db	high _disp7s_mux3_off
   136  001EFC  D4                 	db	low _disp7s_mux3_on
   137  001EFD  1F                 	db	high _disp7s_mux3_on
   138  001EFE  D0                 	db	low _disp7s_mux4_off
   139  001EFF  1F                 	db	high _disp7s_mux4_off
   140  001F00  F4                 	db	low _disp7s_mux4_on
   141  001F01  1F                 	db	high _disp7s_mux4_on
   142                           
   143                           ;initializer for _mpap_step
   144  001F02  96                 	db	low __mpap_step1
   145  001F03  1F                 	db	high __mpap_step1
   146  001F04  8C                 	db	low __mpap_step2
   147  001F05  1F                 	db	high __mpap_step2
   148  001F06  82                 	db	low __mpap_step3
   149  001F07  1F                 	db	high __mpap_step3
   150  001F08  A0                 	db	low __mpap_step4
   151  001F09  1F                 	db	high __mpap_step4
   152                           
   153                           ;initializer for _mpap_off
   154  001F0A  AA                 	db	low __mpap_off
   155  001F0B  1F                 	db	high __mpap_off
   156                           
   157                           	psect	smallconst
   158  000800                     __psmallconst:
   159                           	opt callstack 0
   160  000800  00                 	db	0
   161  000801                     _DISP7S_NUMS:
   162                           	opt callstack 0
   163  000801  3F                 	db	63
   164  000802  06                 	db	6
   165  000803  5B                 	db	91
   166  000804  8F                 	db	143
   167  000805  66                 	db	102
   168  000806  6D                 	db	109
   169  000807  7C                 	db	124
   170  000808  07                 	db	7
   171  000809  7F                 	db	127
   172  00080A  67                 	db	103
   173  00080B                     __end_of_DISP7S_NUMS:
   174                           	opt callstack 0
   175  00080B                     _DISP7S_CHARS:
   176                           	opt callstack 0
   177  00080B  00                 	db	0
   178  00080C  40                 	db	64
   179  00080D                     __end_of_DISP7S_CHARS:
   180                           	opt callstack 0
   181  0000                     _TRISB	set	3987
   182  0000                     _TRISA	set	3986
   183  0000                     _PORTE	set	3972
   184  0000                     _PORTD	set	3971
   185  0000                     _PORTC	set	3970
   186  0000                     _TRISC	set	3988
   187  0000                     _TRISD	set	3989
   188  0000                     _TRISE	set	3990
   189  0000                     _TMR0L	set	4054
   190  0000                     _TMR0H	set	4055
   191  0000                     _T0CON	set	4053
   192  0000                     _UCFG	set	3951
   193  0000                     _UCON	set	3949
   194  0000                     _CMCON	set	4020
   195  0000                     _ADCON1	set	4033
   196  0000                     _LATB	set	3978
   197  0000                     _LATE	set	3981
   198  0000                     _LATD	set	3980
   199  0000                     _LATC	set	3979
   200  0000                     _LATA	set	3977
   201  0000                     _TMR0IF	set	32658
   202  0000                     _GIE	set	32663
   203  0000                     _TMR0IE	set	32661
   204                           
   205                           ; #config settings
   206  00080D  00                 	db	0	; dummy byte at the end
   207  0000                     
   208                           	psect	cinit
   209  001B0A                     __pcinit:
   210                           	opt callstack 0
   211  001B0A                     start_initialization:
   212                           	opt callstack 0
   213  001B0A                     __initialization:
   214                           	opt callstack 0
   215                           
   216                           ; Initialize objects allocated to BANK0 (30 bytes)
   217                           ; load TBLPTR registers with __pidataBANK0
   218  001B0A  0EEE               	movlw	low __pidataBANK0
   219  001B0C  6EF6               	movwf	tblptrl,c
   220  001B0E  0E1E               	movlw	high __pidataBANK0
   221  001B10  6EF7               	movwf	tblptrh,c
   222  001B12  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   223  001B14  6EF8               	movwf	tblptru,c
   224  001B16  EE00  F0C7         	lfsr	0,__pdataBANK0
   225  001B1A  EE10 F01E          	lfsr	1,30
   226  001B1E                     copy_data0:
   227  001B1E  0009               	tblrd		*+
   228  001B20  CFF5 FFEE          	movff	tablat,postinc0
   229  001B24  50E5               	movf	postdec1,w,c
   230  001B26  50E1               	movf	fsr1l,w,c
   231  001B28  E1FA               	bnz	copy_data0
   232                           
   233                           ; Initialize objects allocated to COMRAM (1 bytes)
   234                           ; load TBLPTR registers with __pidataCOMRAM
   235  001B2A  0EF8               	movlw	low __pidataCOMRAM
   236  001B2C  6EF6               	movwf	tblptrl,c
   237  001B2E  0E1F               	movlw	high __pidataCOMRAM
   238  001B30  6EF7               	movwf	tblptrh,c
   239  001B32  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   240  001B34  6EF8               	movwf	tblptru,c
   241  001B36  0009               	tblrd		*+	;fetch initializer
   242  001B38  CFF5 F04F          	movff	tablat,__pdataCOMRAM
   243                           
   244                           ; Clear objects allocated to BANK1 (64 bytes)
   245  001B3C  EE01  F000         	lfsr	0,__pbssBANK1
   246  001B40  0E40               	movlw	64
   247  001B42                     clear_0:
   248  001B42  6AEE               	clrf	postinc0,c
   249  001B44  06E8               	decf	wreg,f,c
   250  001B46  E1FD               	bnz	clear_0
   251                           
   252                           ; Clear objects allocated to BANK0 (103 bytes)
   253  001B48  EE00  F060         	lfsr	0,__pbssBANK0
   254  001B4C  0E67               	movlw	103
   255  001B4E                     clear_1:
   256  001B4E  6AEE               	clrf	postinc0,c
   257  001B50  06E8               	decf	wreg,f,c
   258  001B52  E1FD               	bnz	clear_1
   259                           
   260                           ; Clear objects allocated to COMRAM (14 bytes)
   261  001B54  EE00  F041         	lfsr	0,__pbssCOMRAM
   262  001B58  0E0E               	movlw	14
   263  001B5A                     clear_2:
   264  001B5A  6AEE               	clrf	postinc0,c
   265  001B5C  06E8               	decf	wreg,f,c
   266  001B5E  E1FD               	bnz	clear_2
   267  001B60                     end_of_initialization:
   268                           	opt callstack 0
   269  001B60                     __end_of__initialization:
   270                           	opt callstack 0
   271  001B60  9050               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   272  001B62  9250               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   273  001B64  0E00               	movlw	low (__Lmediumconst shr (0+16))
   274  001B66  6EF8               	movwf	tblptru,c
   275  001B68  0100               	movlb	0
   276  001B6A  EFEC  F00A         	goto	_main	;jump to C main() function
   277                           
   278                           	psect	bssCOMRAM
   279  000041                     __pbssCOMRAM:
   280                           	opt callstack 0
   281  000041                     _mpap:
   282                           	opt callstack 0
   283  000041                     	ds	8
   284  000049                     disp7s_job@q:
   285                           	opt callstack 0
   286  000049                     	ds	1
   287  00004A                     pump_job@c:
   288                           	opt callstack 0
   289  00004A                     	ds	1
   290  00004B                     mpap_sych@sm0:
   291                           	opt callstack 0
   292  00004B                     	ds	1
   293  00004C                     _lock:
   294                           	opt callstack 0
   295  00004C                     	ds	1
   296  00004D                     _main_flag:
   297                           	opt callstack 0
   298  00004D                     	ds	1
   299  00004E                     _isr_flag:
   300                           	opt callstack 0
   301  00004E                     	ds	1
   302                           
   303                           	psect	dataCOMRAM
   304  00004F                     __pdataCOMRAM:
   305                           	opt callstack 0
   306  00004F                     mpap_do1step@i:
   307                           	opt callstack 0
   308  00004F                     	ds	1
   309                           
   310                           	psect	bssBANK0
   311  000060                     __pbssBANK0:
   312                           	opt callstack 0
   313  000060                     _key:
   314                           	opt callstack 0
   315  000060                     	ds	80
   316  0000B0                     _group_x:
   317                           	opt callstack 0
   318  0000B0                     	ds	5
   319  0000B5                     _pump:
   320                           	opt callstack 0
   321  0000B5                     	ds	3
   322  0000B8                     	ds	2
   323  0000BA                     	ds	2
   324  0000BC                     mpap_sych@c:
   325                           	opt callstack 0
   326  0000BC                     	ds	1
   327  0000BD                     	ds	1
   328  0000BE                     	ds	1
   329  0000BF                     	ds	1
   330  0000C0                     	ds	1
   331  0000C1                     	ds	1
   332  0000C2                     	ds	1
   333  0000C3                     _error_grantedToWriteDisp:
   334                           	opt callstack 0
   335  0000C3                     	ds	1
   336  0000C4                     _error_requestToWriteDisp:
   337                           	opt callstack 0
   338  0000C4                     	ds	1
   339  0000C5                     _disp_owner:
   340                           	opt callstack 0
   341  0000C5                     	ds	1
   342  0000C6                     _machineState:
   343                           	opt callstack 0
   344  0000C6                     	ds	1
   345                           
   346                           	psect	dataBANK0
   347  0000C7                     __pdataBANK0:
   348                           	opt callstack 0
   349  0000C7                     _disp7s_mux:
   350                           	opt callstack 0
   351  0000C7                     	ds	20
   352  0000DB                     _mpap_step:
   353                           	opt callstack 0
   354  0000DB                     	ds	8
   355  0000E3                     _mpap_off:
   356                           	opt callstack 0
   357  0000E3                     	ds	2
   358                           
   359                           	psect	bssBANK1
   360  000100                     __pbssBANK1:
   361                           	opt callstack 0
   362  000100                     _pulsonic:
   363                           	opt callstack 0
   364  000100                     	ds	64
   365                           
   366                           	psect	cstackBANK0
   367  0000E5                     __pcstackBANK0:
   368                           	opt callstack 0
   369  0000E5                     disp7s_write_f@buff:
   370                           	opt callstack 0
   371                           
   372                           ; 10 bytes @ 0x0
   373  0000E5                     	ds	10
   374  0000EF                     disp7s_write_f@I:
   375                           	opt callstack 0
   376                           
   377                           ; 2 bytes @ 0xA
   378  0000EF                     	ds	2
   379  0000F1                     disp7s_write_f@iMAX:
   380                           	opt callstack 0
   381                           
   382                           ; 1 bytes @ 0xC
   383  0000F1                     	ds	1
   384  0000F2                     disp7s_write_f@iMIN:
   385                           	opt callstack 0
   386                           
   387                           ; 1 bytes @ 0xD
   388  0000F2                     	ds	1
   389  0000F3                     disp7s_write_f@K10MULT:
   390                           	opt callstack 0
   391                           
   392                           ; 3 bytes @ 0xE
   393  0000F3                     	ds	3
   394  0000F6                     disp7s_write_f@i:
   395                           	opt callstack 0
   396                           
   397                           ; 1 bytes @ 0x11
   398  0000F6                     	ds	1
   399                           
   400                           	psect	cstackCOMRAM
   401  000001                     __pcstackCOMRAM:
   402                           	opt callstack 0
   403  000001                     mpap_do1step@KI:
   404                           	opt callstack 0
   405                           
   406                           ; 1 bytes @ 0x0
   407  000001                     	ds	1
   408  000002                     ??_mpap_homming:
   409  000002                     mpap_normal_mode@cod_ret:
   410                           	opt callstack 0
   411                           
   412                           ; 1 bytes @ 0x1
   413  000002                     	ds	1
   414  000003                     mpap_homming@cod_ret:
   415                           	opt callstack 0
   416                           
   417                           ; 1 bytes @ 0x2
   418  000003                     	ds	1
   419  000004                     
   420                           ; 1 bytes @ 0x3
   421  000004                     	ds	1
   422  000005                     ??_INTERRUPCION:
   423                           
   424                           ; 1 bytes @ 0x4
   425  000005                     	ds	6
   426  00000B                     ??_ikey_is_accessible:
   427  00000B                     ??_disp7s_mux_Q:
   428  00000B                     ?___lwdiv:
   429                           	opt callstack 0
   430  00000B                     ?___lwmod:
   431                           	opt callstack 0
   432  00000B                     ?___ftpack:
   433                           	opt callstack 0
   434  00000B                     ikb_init@i:
   435                           	opt callstack 0
   436  00000B                     ikey_clear_all_flag@i:
   437                           	opt callstack 0
   438  00000B                     pulsonic_init@i:
   439                           	opt callstack 0
   440  00000B                     disp7s_mux_init@i:
   441                           	opt callstack 0
   442  00000B                     ___lwdiv@dividend:
   443                           	opt callstack 0
   444  00000B                     ___lwmod@dividend:
   445                           	opt callstack 0
   446  00000B                     ___ftpack@arg:
   447                           	opt callstack 0
   448                           
   449                           ; 3 bytes @ 0xA
   450  00000B                     	ds	1
   451  00000C                     ikey_scan@k:
   452                           	opt callstack 0
   453  00000C                     disp7s_init@i:
   454                           	opt callstack 0
   455                           
   456                           ; 1 bytes @ 0xB
   457  00000C                     	ds	1
   458  00000D                     ikey_is_accessible@k:
   459                           	opt callstack 0
   460  00000D                     ___lwdiv@divisor:
   461                           	opt callstack 0
   462  00000D                     ___lwmod@divisor:
   463                           	opt callstack 0
   464                           
   465                           ; 2 bytes @ 0xC
   466  00000D                     	ds	1
   467  00000E                     ___ftpack@exp:
   468                           	opt callstack 0
   469                           
   470                           ; 1 bytes @ 0xD
   471  00000E                     	ds	1
   472  00000F                     ___ftpack@sign:
   473                           	opt callstack 0
   474  00000F                     ___lwdiv@counter:
   475                           	opt callstack 0
   476  00000F                     ___lwmod@counter:
   477                           	opt callstack 0
   478                           
   479                           ; 1 bytes @ 0xE
   480  00000F                     	ds	1
   481  000010                     ??___ftpack:
   482  000010                     ___lwdiv@quotient:
   483                           	opt callstack 0
   484                           
   485                           ; 2 bytes @ 0xF
   486  000010                     	ds	1
   487  000011                     disp7s_mux_Q@q:
   488                           	opt callstack 0
   489                           
   490                           ; 1 bytes @ 0x10
   491  000011                     	ds	1
   492  000012                     disp7s_mux_Q@i:
   493                           	opt callstack 0
   494  000012                     utoa@buf:
   495                           	opt callstack 0
   496                           
   497                           ; 1 bytes @ 0x11
   498  000012                     	ds	1
   499  000013                     ??_disp7s_job:
   500  000013                     ?___ftadd:
   501                           	opt callstack 0
   502  000013                     ?___ftmul:
   503                           	opt callstack 0
   504  000013                     ?___lwtoft:
   505                           	opt callstack 0
   506  000013                     ___lwtoft@c:
   507                           	opt callstack 0
   508  000013                     utoa@val:
   509                           	opt callstack 0
   510  000013                     ___ftadd@f1:
   511                           	opt callstack 0
   512  000013                     ___ftmul@f1:
   513                           	opt callstack 0
   514                           
   515                           ; 3 bytes @ 0x12
   516  000013                     	ds	2
   517  000015                     disp7s_job@pq:
   518                           	opt callstack 0
   519  000015                     utoa@base:
   520                           	opt callstack 0
   521                           
   522                           ; 2 bytes @ 0x14
   523  000015                     	ds	1
   524  000016                     ___ftadd@f2:
   525                           	opt callstack 0
   526  000016                     ___ftge@ff1:
   527                           	opt callstack 0
   528  000016                     ___ftmul@f2:
   529                           	opt callstack 0
   530                           
   531                           ; 3 bytes @ 0x15
   532  000016                     	ds	1
   533  000017                     utoa@v:
   534                           	opt callstack 0
   535                           
   536                           ; 2 bytes @ 0x16
   537  000017                     	ds	2
   538  000019                     ??___ftadd:
   539  000019                     ??___ftmul:
   540  000019                     utoa@c:
   541                           	opt callstack 0
   542  000019                     ___ftge@ff2:
   543                           	opt callstack 0
   544                           
   545                           ; 3 bytes @ 0x18
   546  000019                     	ds	1
   547  00001A                     itoa@buf:
   548                           	opt callstack 0
   549                           
   550                           ; 1 bytes @ 0x19
   551  00001A                     	ds	1
   552  00001B                     itoa@val:
   553                           	opt callstack 0
   554                           
   555                           ; 2 bytes @ 0x1A
   556  00001B                     	ds	1
   557  00001C                     ??___ftge:
   558  00001C                     ___ftadd@sign:
   559                           	opt callstack 0
   560  00001C                     ___ftmul@exp:
   561                           	opt callstack 0
   562                           
   563                           ; 1 bytes @ 0x1B
   564  00001C                     	ds	1
   565  00001D                     ___ftadd@exp2:
   566                           	opt callstack 0
   567  00001D                     itoa@base:
   568                           	opt callstack 0
   569  00001D                     ___ftmul@f3_as_product:
   570                           	opt callstack 0
   571                           
   572                           ; 3 bytes @ 0x1C
   573  00001D                     	ds	1
   574  00001E                     ___ftadd@exp1:
   575                           	opt callstack 0
   576                           
   577                           ; 1 bytes @ 0x1D
   578  00001E                     	ds	1
   579  00001F                     ??_ikey_parsing:
   580  00001F                     
   581                           ; 1 bytes @ 0x1E
   582  00001F                     	ds	1
   583  000020                     ___ftmul@cntr:
   584                           	opt callstack 0
   585                           
   586                           ; 1 bytes @ 0x1F
   587  000020                     	ds	1
   588  000021                     ___ftmul@sign:
   589                           	opt callstack 0
   590                           
   591                           ; 1 bytes @ 0x20
   592  000021                     	ds	1
   593  000022                     ?___fttol:
   594                           	opt callstack 0
   595  000022                     ___fttol@f1:
   596                           	opt callstack 0
   597                           
   598                           ; 3 bytes @ 0x21
   599  000022                     	ds	1
   600  000023                     ikey_parsing@k:
   601                           	opt callstack 0
   602                           
   603                           ; 1 bytes @ 0x22
   604  000023                     	ds	1
   605  000024                     
   606                           ; 1 bytes @ 0x23
   607  000024                     	ds	2
   608  000026                     ??___fttol:
   609                           
   610                           ; 1 bytes @ 0x25
   611  000026                     	ds	5
   612  00002B                     ___fttol@sign1:
   613                           	opt callstack 0
   614                           
   615                           ; 1 bytes @ 0x2A
   616  00002B                     	ds	1
   617  00002C                     ___fttol@lval:
   618                           	opt callstack 0
   619                           
   620                           ; 4 bytes @ 0x2B
   621  00002C                     	ds	4
   622  000030                     ___fttol@exp1:
   623                           	opt callstack 0
   624                           
   625                           ; 1 bytes @ 0x2F
   626  000030                     	ds	1
   627  000031                     disp7s_write_f@pDisp:
   628                           	opt callstack 0
   629                           
   630                           ; 2 bytes @ 0x30
   631  000031                     	ds	2
   632  000033                     disp7s_write_f@NUM_OF_DISP:
   633                           	opt callstack 0
   634                           
   635                           ; 1 bytes @ 0x32
   636  000033                     	ds	1
   637  000034                     disp7s_write_f@num:
   638                           	opt callstack 0
   639                           
   640                           ; 3 bytes @ 0x33
   641  000034                     	ds	3
   642  000037                     ??_disp7s_write_f:
   643                           
   644                           ; 1 bytes @ 0x36
   645  000037                     	ds	5
   646  00003C                     disp7s_qtyDisp_writeFloat@f:
   647                           	opt callstack 0
   648  00003C                     disp7s_modeDisp_writeFloat@f:
   649                           	opt callstack 0
   650                           
   651                           ; 3 bytes @ 0x3B
   652  00003C                     	ds	3
   653  00003F                     main@c_access_kb:
   654                           	opt callstack 0
   655                           
   656                           ; 1 bytes @ 0x3E
   657  00003F                     	ds	1
   658  000040                     main@c_access_disp:
   659                           	opt callstack 0
   660                           
   661                           ; 1 bytes @ 0x3F
   662  000040                     	ds	1
   663                           
   664 ;;
   665 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   666 ;;
   667 ;; *************** function _main *****************
   668 ;; Defined at:
   669 ;;		line 83 in file "main.c"
   670 ;; Parameters:    Size  Location     Type
   671 ;;		None
   672 ;; Auto vars:     Size  Location     Type
   673 ;;  c_access_dis    1   63[COMRAM] char 
   674 ;;  c_access_kb     1   62[COMRAM] char 
   675 ;; Return value:  Size  Location     Type
   676 ;;                  1    wreg      void 
   677 ;; Registers used:
   678 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   679 ;; Tracked objects:
   680 ;;		On entry : 0/0
   681 ;;		On exit  : 3F/0
   682 ;;		Unchanged: 0/0
   683 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   684 ;;      Params:         0       0       0       0       0       0       0       0       0
   685 ;;      Locals:         2       0       0       0       0       0       0       0       0
   686 ;;      Temps:          0       0       0       0       0       0       0       0       0
   687 ;;      Totals:         2       0       0       0       0       0       0       0       0
   688 ;;Total ram usage:        2 bytes
   689 ;; Hardware stack levels required when called:   10
   690 ;; This function calls:
   691 ;;		_disp7s_init
   692 ;;		_disp7s_job
   693 ;;		_disp7s_modeDisp_writeFloat
   694 ;;		_disp7s_qtyDisp_writeFloat
   695 ;;		_ikb_flush
   696 ;;		_ikb_init
   697 ;;		_ikb_job
   698 ;;		_mpap_sych
   699 ;;		_pulsonic_init
   700 ;;		_pump_job
   701 ;; This function is called by:
   702 ;;		Startup code after reset
   703 ;; This function uses a non-reentrant model
   704 ;;
   705                           
   706                           	psect	text0
   707  0015D8                     __ptext0:
   708                           	opt callstack 0
   709  0015D8                     _main:
   710                           	opt callstack 21
   711                           
   712                           ;main.c: 85: int8_t c_access_kb=0;
   713                           
   714                           ;incstack = 0
   715  0015D8  0E00               	movlw	0
   716  0015DA  6E3F               	movwf	main@c_access_kb,c
   717                           
   718                           ;main.c: 86: int8_t c_access_disp=0;
   719  0015DC  0E00               	movlw	0
   720  0015DE  6E40               	movwf	main@c_access_disp,c
   721                           
   722                           ;main.c: 88: LATA = 0x00;
   723  0015E0  0E00               	movlw	0
   724  0015E2  6E89               	movwf	3977,c	;volatile
   725                           
   726                           ;main.c: 89: LATC = 0x00;
   727  0015E4  0E00               	movlw	0
   728  0015E6  6E8B               	movwf	3979,c	;volatile
   729                           
   730                           ;main.c: 90: LATD = 0x00;
   731  0015E8  0E00               	movlw	0
   732  0015EA  6E8C               	movwf	3980,c	;volatile
   733                           
   734                           ;main.c: 91: LATE = 0x00;
   735  0015EC  0E00               	movlw	0
   736  0015EE  6E8D               	movwf	3981,c	;volatile
   737                           
   738                           ;main.c: 92: LATB = 0x00;
   739  0015F0  0E00               	movlw	0
   740  0015F2  6E8A               	movwf	3978,c	;volatile
   741                           
   742                           ;main.c: 94: ADCON1 = 0x0F;
   743  0015F4  0E0F               	movlw	15
   744  0015F6  6EC1               	movwf	4033,c	;volatile
   745                           
   746                           ;main.c: 95: CMCON=0xCF;
   747  0015F8  0ECF               	movlw	207
   748  0015FA  6EB4               	movwf	4020,c	;volatile
   749                           
   750                           ;main.c: 98: UCON = 0;
   751  0015FC  0E00               	movlw	0
   752  0015FE  6E6D               	movwf	3949,c	;volatile
   753                           
   754                           ;main.c: 99: UCFG = 1<<3;
   755  001600  0E08               	movlw	8
   756  001602  6E6F               	movwf	3951,c	;volatile
   757                           
   758                           ;main.c: 100: T0CON = 0B10000111;
   759  001604  0E87               	movlw	135
   760  001606  6ED5               	movwf	4053,c	;volatile
   761                           
   762                           ;main.c: 102: TMR0H = (uint8_t)((uint16_t)((1UL<<16) - ( 1.0E-3 *48000000UL / (256*4)) )
      +                           >> 8);
   763  001608  68D7               	setf	4055,c	;volatile
   764                           
   765                           ;main.c: 103: TMR0L = (uint8_t)((uint16_t)((1UL<<16) - ( 1.0E-3 *48000000UL / (256*4)) )
      +                          );
   766  00160A  0ED1               	movlw	209
   767  00160C  6ED6               	movwf	4054,c	;volatile
   768                           
   769                           ;main.c: 104: TMR0IE = 1;
   770  00160E  8AF2               	bsf	4082,5,c	;volatile
   771  001610  808D               	bsf	3981,0,c	;volatile
   772  001612  9096               	bcf	3990,0,c	;volatile
   773  001614  9095               	bcf	3989,0,c	;volatile
   774  001616  9295               	bcf	3989,1,c	;volatile
   775  001618  9495               	bcf	3989,2,c	;volatile
   776  00161A  9695               	bcf	3989,3,c	;volatile
   777  00161C  928B               	bcf	3979,1,c	;volatile
   778  00161E  9294               	bcf	3988,1,c	;volatile
   779  001620  8296               	bsf	3990,1,c	;volatile
   780  001622  8094               	bsf	3988,0,c	;volatile
   781  001624  8496               	bsf	3990,2,c	;volatile
   782                           
   783                           ;main.c: 122: ikb_init();
   784  001626  EC4F  F00B         	call	_ikb_init	;wreg free
   785                           
   786                           ; BSR set to: 0
   787                           ;main.c: 123: disp7s_init();
   788  00162A  ECB7  F00D         	call	_disp7s_init	;wreg free
   789                           
   790                           ;main.c: 124: pulsonic_init();
   791  00162E  EC30  F00F         	call	_pulsonic_init	;wreg free
   792                           
   793                           ;main.c: 127: disp7s_modeDisp_writeFloat(20);
   794  001632  0E00               	movlw	0
   795  001634  6E3C               	movwf	disp7s_modeDisp_writeFloat@f,c
   796  001636  0EA0               	movlw	160
   797  001638  6E3D               	movwf	disp7s_modeDisp_writeFloat@f+1,c
   798  00163A  0E41               	movlw	65
   799  00163C  6E3E               	movwf	disp7s_modeDisp_writeFloat@f+2,c
   800  00163E  EC95  F00F         	call	_disp7s_modeDisp_writeFloat	;wreg free
   801                           
   802                           ; BSR set to: 0
   803                           ;main.c: 128: disp7s_qtyDisp_writeFloat(19.5);
   804  001642  0E00               	movlw	0
   805  001644  6E3C               	movwf	disp7s_qtyDisp_writeFloat@f,c
   806  001646  0E9C               	movlw	156
   807  001648  6E3D               	movwf	disp7s_qtyDisp_writeFloat@f+1,c
   808  00164A  0E41               	movlw	65
   809  00164C  6E3E               	movwf	disp7s_qtyDisp_writeFloat@f+2,c
   810  00164E  EC86  F00F         	call	_disp7s_qtyDisp_writeFloat	;wreg free
   811                           
   812                           ; BSR set to: 0
   813                           ;main.c: 130: GIE = 1;
   814  001652  8EF2               	bsf	4082,7,c	;volatile
   815  001654                     l3894:
   816                           
   817                           ; BSR set to: 0
   818                           ;main.c: 132: {;main.c: 133: if (isr_flag.f1ms)
   819  001654  A04E               	btfss	_isr_flag,0,c	;volatile
   820  001656  D002               	goto	l108
   821                           
   822                           ; BSR set to: 0
   823                           ;main.c: 134: {;main.c: 135: isr_flag.f1ms = 0;
   824  001658  904E               	bcf	_isr_flag,0,c	;volatile
   825                           
   826                           ;main.c: 136: main_flag.f1ms = 1;
   827  00165A  804D               	bsf	_main_flag,0,c	;volatile
   828  00165C                     l108:
   829                           
   830                           ; BSR set to: 0
   831                           ;main.c: 137: };main.c: 139: if (main_flag.f1ms)
   832  00165C  A04D               	btfss	_main_flag,0,c	;volatile
   833  00165E  D017               	goto	l3918
   834                           
   835                           ; BSR set to: 0
   836                           ;main.c: 140: {;main.c: 141: if (++c_access_kb == 20)
   837  001660  2A3F               	incf	main@c_access_kb,f,c
   838  001662  0E14               	movlw	20
   839  001664  183F               	xorwf	main@c_access_kb,w,c
   840  001666  A4D8               	btfss	status,2,c
   841  001668  D009               	goto	l3912
   842                           
   843                           ; BSR set to: 0
   844                           ;main.c: 142: {;main.c: 143: c_access_kb = 0;
   845  00166A  0E00               	movlw	0
   846  00166C  6E3F               	movwf	main@c_access_kb,c
   847                           
   848                           ; BSR set to: 0
   849                           ;main.c: 146: if (!lock.kb)
   850  00166E  B04C               	btfsc	_lock,0,c
   851  001670  D005               	goto	l3912
   852                           
   853                           ; BSR set to: 0
   854                           ;main.c: 150: if (1)
   855  001672  ECB2  F00F         	call	_ikb_job	;wreg free
   856                           
   857                           ;main.c: 151: {;main.c: 152: disp_owner = DISPOWNER_VISUALIZER_MODE;
   858  001676  0E01               	movlw	1
   859  001678  0100               	movlb	0	; () banked
   860  00167A  6FC5               	movwf	_disp_owner& (0+255),b
   861  00167C                     l3912:
   862                           
   863                           ; BSR set to: 0
   864                           ;main.c: 162: };main.c: 163: };main.c: 164: };main.c: 167: if (++c_access_disp == 3)
   865  00167C  2A40               	incf	main@c_access_disp,f,c
   866  00167E  0E03               	movlw	3
   867  001680  1840               	xorwf	main@c_access_disp,w,c
   868  001682  A4D8               	btfss	status,2,c
   869  001684  D004               	goto	l3918
   870                           
   871                           ; BSR set to: 0
   872                           ;main.c: 168: {;main.c: 169: c_access_disp = 0;
   873  001686  0E00               	movlw	0
   874  001688  6E40               	movwf	main@c_access_disp,c
   875                           
   876                           ; BSR set to: 0
   877                           ;main.c: 170: disp7s_job();
   878  00168A  ECDC  F00C         	call	_disp7s_job	;wreg free
   879  00168E                     l3918:
   880                           
   881                           ;main.c: 171: };main.c: 172: };main.c: 216: pump_job();
   882  00168E  EC52  F00D         	call	_pump_job	;wreg free
   883                           
   884                           ; BSR set to: 0
   885                           ;main.c: 217: mpap_sych();
   886  001692  EC9B  F00C         	call	_mpap_sych	;wreg free
   887                           
   888                           ; BSR set to: 0
   889                           ;main.c: 220: main_flag.f1ms = 0;
   890  001696  904D               	bcf	_main_flag,0,c	;volatile
   891                           
   892                           ; BSR set to: 0
   893                           ;main.c: 221: ikb_flush();
   894  001698  ECE5  F00F         	call	_ikb_flush	;wreg free
   895  00169C  D7DB               	goto	l3894
   896  00169E                     __end_of_main:
   897                           	opt callstack 0
   898                           
   899 ;; *************** function _pump_job *****************
   900 ;; Defined at:
   901 ;;		line 22 in file "pump.c"
   902 ;; Parameters:    Size  Location     Type
   903 ;;		None
   904 ;; Auto vars:     Size  Location     Type
   905 ;;  cod_ret         1    0        char 
   906 ;; Return value:  Size  Location     Type
   907 ;;                  1    wreg      char 
   908 ;; Registers used:
   909 ;;		wreg, status,2, status,0
   910 ;; Tracked objects:
   911 ;;		On entry : 0/0
   912 ;;		On exit  : 3F/0
   913 ;;		Unchanged: 0/0
   914 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   915 ;;      Params:         0       0       0       0       0       0       0       0       0
   916 ;;      Locals:         1       0       0       0       0       0       0       0       0
   917 ;;      Temps:          0       0       0       0       0       0       0       0       0
   918 ;;      Totals:         1       0       0       0       0       0       0       0       0
   919 ;;Total ram usage:        1 bytes
   920 ;; Hardware stack levels used:    1
   921 ;; Hardware stack levels required when called:    5
   922 ;; This function calls:
   923 ;;		Nothing
   924 ;; This function is called by:
   925 ;;		_main
   926 ;; This function uses a non-reentrant model
   927 ;;
   928                           
   929                           	psect	text1
   930  001AA4                     __ptext1:
   931                           	opt callstack 0
   932  001AA4                     _pump_job:
   933                           	opt callstack 25
   934                           
   935                           ;pump.c: 25: static int8_t c;;pump.c: 27: if (pump.ticks > 0)
   936                           
   937                           ; BSR set to: 0
   938                           ;incstack = 0
   939  001AA4  0100               	movlb	0	; () banked
   940  001AA6  51B5               	movf	_pump& (0+255),w,b
   941  001AA8  11B6               	iorwf	(_pump+1)& (0+255),w,b
   942  001AAA  B4D8               	btfsc	status,2,c
   943  001AAC  0012               	return	
   944                           
   945                           ; BSR set to: 0
   946                           ;pump.c: 28: {;pump.c: 29: if (pump.sm0 == 0)
   947  001AAE  51B7               	movf	(_pump+2)& (0+255),w,b
   948  001AB0  A4D8               	btfss	status,2,c
   949  001AB2  D005               	goto	l3206
   950                           
   951                           ; BSR set to: 0
   952  001AB4  908D               	bcf	3981,0,c	;volatile
   953                           
   954                           ; BSR set to: 0
   955                           ;pump.c: 32: c = 0x0;
   956  001AB6  0E00               	movlw	0
   957  001AB8  6E4A               	movwf	pump_job@c,c
   958                           
   959                           ; BSR set to: 0
   960                           ;pump.c: 33: pump.sm0++;
   961  001ABA  2BB7               	incf	(_pump+2)& (0+255),f,b
   962                           
   963                           ;pump.c: 34: }
   964  001ABC  0012               	return	
   965  001ABE                     l3206:
   966                           
   967                           ; BSR set to: 0
   968                           ;pump.c: 35: else if (pump.sm0 == 1)
   969  001ABE  05B7               	decf	(_pump+2)& (0+255),w,b
   970  001AC0  A4D8               	btfss	status,2,c
   971  001AC2  D00C               	goto	l3218
   972                           
   973                           ; BSR set to: 0
   974                           ;pump.c: 36: {;pump.c: 37: if (main_flag.f1ms)
   975  001AC4  A04D               	btfss	_main_flag,0,c	;volatile
   976  001AC6  0012               	return	
   977                           
   978                           ; BSR set to: 0
   979                           ;pump.c: 38: {;pump.c: 39: if (++c == 50)
   980  001AC8  2A4A               	incf	pump_job@c,f,c
   981  001ACA  0E32               	movlw	50
   982  001ACC  184A               	xorwf	pump_job@c,w,c
   983  001ACE  A4D8               	btfss	status,2,c
   984  001AD0  0012               	return	
   985                           
   986                           ; BSR set to: 0
   987                           ;pump.c: 40: {;pump.c: 41: c=0x00;
   988  001AD2  0E00               	movlw	0
   989  001AD4  6E4A               	movwf	pump_job@c,c
   990                           
   991                           ; BSR set to: 0
   992                           ;pump.c: 42: pump.sm0++;
   993  001AD6  2BB7               	incf	(_pump+2)& (0+255),f,b
   994                           
   995                           ; BSR set to: 0
   996  001AD8  808D               	bsf	3981,0,c	;volatile
   997                           
   998                           ; BSR set to: 0
   999                           ;pump.c: 44: };pump.c: 45: };pump.c: 46: }
  1000  001ADA  0012               	return	
  1001  001ADC                     l3218:
  1002                           
  1003                           ; BSR set to: 0
  1004                           ;pump.c: 47: else if (pump.sm0 == 2)
  1005  001ADC  0E02               	movlw	2
  1006  001ADE  19B7               	xorwf	(_pump+2)& (0+255),w,b
  1007  001AE0  A4D8               	btfss	status,2,c
  1008  001AE2  0012               	return	
  1009                           
  1010                           ; BSR set to: 0
  1011                           ;pump.c: 48: {;pump.c: 49: if (main_flag.f1ms)
  1012  001AE4  A04D               	btfss	_main_flag,0,c	;volatile
  1013  001AE6  0012               	return	
  1014                           
  1015                           ; BSR set to: 0
  1016                           ;pump.c: 50: {;pump.c: 51: if (++c == 50)
  1017  001AE8  2A4A               	incf	pump_job@c,f,c
  1018  001AEA  0E32               	movlw	50
  1019  001AEC  184A               	xorwf	pump_job@c,w,c
  1020  001AEE  A4D8               	btfss	status,2,c
  1021  001AF0  0012               	return	
  1022                           
  1023                           ; BSR set to: 0
  1024                           ;pump.c: 52: {;pump.c: 53: c=0x00;
  1025  001AF2  0E00               	movlw	0
  1026  001AF4  6E4A               	movwf	pump_job@c,c
  1027                           
  1028                           ;pump.c: 54: pump.sm0 = 0x00;
  1029  001AF6  0E00               	movlw	0
  1030  001AF8  6FB7               	movwf	(_pump+2)& (0+255),b
  1031                           
  1032                           ; BSR set to: 0
  1033                           ;pump.c: 56: if (--pump.ticks == 0)
  1034  001AFA  07B5               	decf	_pump& (0+255),f,b
  1035  001AFC  A0D8               	btfss	status,0,c
  1036  001AFE  07B6               	decf	(_pump+1)& (0+255),f,b
  1037  001B00  51B5               	movf	_pump& (0+255),w,b
  1038  001B02  11B6               	iorwf	(_pump+1)& (0+255),w,b
  1039  001B04  B4D8               	btfsc	status,2,c
  1040  001B06  0012               	return	
  1041  001B08  0012               	return	
  1042  001B0A                     __end_of_pump_job:
  1043                           	opt callstack 0
  1044                           
  1045 ;; *************** function _pulsonic_init *****************
  1046 ;; Defined at:
  1047 ;;		line 6 in file "pulsonic.c"
  1048 ;; Parameters:    Size  Location     Type
  1049 ;;		None
  1050 ;; Auto vars:     Size  Location     Type
  1051 ;;  i               1   10[COMRAM] char 
  1052 ;; Return value:  Size  Location     Type
  1053 ;;                  1    wreg      void 
  1054 ;; Registers used:
  1055 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  1056 ;; Tracked objects:
  1057 ;;		On entry : 0/0
  1058 ;;		On exit  : 0/0
  1059 ;;		Unchanged: 0/0
  1060 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1061 ;;      Params:         0       0       0       0       0       0       0       0       0
  1062 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1063 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1064 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1065 ;;Total ram usage:        1 bytes
  1066 ;; Hardware stack levels used:    1
  1067 ;; Hardware stack levels required when called:    5
  1068 ;; This function calls:
  1069 ;;		Nothing
  1070 ;; This function is called by:
  1071 ;;		_main
  1072 ;; This function uses a non-reentrant model
  1073 ;;
  1074                           
  1075                           	psect	text2
  1076  001E60                     __ptext2:
  1077                           	opt callstack 0
  1078  001E60                     _pulsonic_init:
  1079                           	opt callstack 25
  1080                           
  1081                           ;pulsonic.c: 8: int8_t i;;pulsonic.c: 9: pulsonic.dist_total_time = 60;
  1082                           
  1083                           ; BSR set to: 0
  1084                           ;incstack = 0
  1085  001E60  0E00               	movlw	0
  1086  001E62  0101               	movlb	1	; () banked
  1087  001E64  6F03               	movwf	(_pulsonic+3)& (0+255),b
  1088  001E66  0E3C               	movlw	60
  1089  001E68  6F02               	movwf	(_pulsonic+2)& (0+255),b
  1090                           
  1091                           ;pulsonic.c: 13: for (i=0; i< 8; i++)
  1092  001E6A  0E00               	movlw	0
  1093  001E6C  6E0B               	movwf	pulsonic_init@i,c
  1094  001E6E                     l3158:
  1095                           
  1096                           ;pulsonic.c: 14: {;pulsonic.c: 15: pulsonic.nozzle[i].Q_mlh = 12.0;
  1097  001E6E  500B               	movf	pulsonic_init@i,w,c
  1098  001E70  0D06               	mullw	6
  1099  001E72  0E06               	movlw	low (_pulsonic+6)
  1100  001E74  24F3               	addwf	prodl,w,c
  1101  001E76  6ED9               	movwf	fsr2l,c
  1102  001E78  0E01               	movlw	high (_pulsonic+6)
  1103  001E7A  20F4               	addwfc	prodh,w,c
  1104  001E7C  6EDA               	movwf	fsr2h,c
  1105  001E7E  0E00               	movlw	0
  1106  001E80  6EDE               	movwf	postinc2,c
  1107  001E82  0E40               	movlw	64
  1108  001E84  6EDE               	movwf	postinc2,c
  1109  001E86  0E41               	movlw	65
  1110  001E88  6EDE               	movwf	postinc2,c
  1111  001E8A  2A0B               	incf	pulsonic_init@i,f,c
  1112  001E8C  500B               	movf	pulsonic_init@i,w,c
  1113  001E8E  0A80               	xorlw	128
  1114  001E90  0F78               	addlw	-136
  1115  001E92  B0D8               	btfsc	status,0,c
  1116  001E94  0012               	return	
  1117  001E96  D7EB               	goto	l3158
  1118  001E98                     __end_of_pulsonic_init:
  1119                           	opt callstack 0
  1120                           
  1121 ;; *************** function _mpap_sych *****************
  1122 ;; Defined at:
  1123 ;;		line 160 in file "mpap.c"
  1124 ;; Parameters:    Size  Location     Type
  1125 ;;		None
  1126 ;; Auto vars:     Size  Location     Type
  1127 ;;		None
  1128 ;; Return value:  Size  Location     Type
  1129 ;;                  1    wreg      void 
  1130 ;; Registers used:
  1131 ;;		wreg, status,2, status,0
  1132 ;; Tracked objects:
  1133 ;;		On entry : 3F/0
  1134 ;;		On exit  : 3F/0
  1135 ;;		Unchanged: 0/0
  1136 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1137 ;;      Params:         0       0       0       0       0       0       0       0       0
  1138 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1139 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1140 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1141 ;;Total ram usage:        0 bytes
  1142 ;; Hardware stack levels used:    1
  1143 ;; Hardware stack levels required when called:    5
  1144 ;; This function calls:
  1145 ;;		Nothing
  1146 ;; This function is called by:
  1147 ;;		_main
  1148 ;; This function uses a non-reentrant model
  1149 ;;
  1150                           
  1151                           	psect	text3
  1152  001936                     __ptext3:
  1153                           	opt callstack 0
  1154  001936                     _mpap_sych:
  1155                           	opt callstack 25
  1156                           
  1157                           ; BSR set to: 0
  1158                           ;mpap.c: 162: static int8_t sm0;;mpap.c: 163: static int8_t c;;mpap.c: 164: if (sm0 == 0
      +                          )
  1159                           
  1160                           ;incstack = 0
  1161  001936  504B               	movf	mpap_sych@sm0,w,c
  1162  001938  A4D8               	btfss	status,2,c
  1163  00193A  D010               	goto	l3244
  1164                           
  1165                           ; BSR set to: 0
  1166                           ;mpap.c: 165: {;mpap.c: 166: if ((mpap.mode == MPAP_NORMAL_MODE) || (mpap.mode == MPAP_H
      +                          OMMING_MODE))
  1167  00193C  0E03               	movlw	3
  1168  00193E  1848               	xorwf	_mpap+7,w,c	;volatile
  1169  001940  B4D8               	btfsc	status,2,c
  1170  001942  D004               	goto	u3300
  1171                           
  1172                           ; BSR set to: 0
  1173  001944  0E02               	movlw	2
  1174  001946  1848               	xorwf	_mpap+7,w,c	;volatile
  1175  001948  A4D8               	btfss	status,2,c
  1176  00194A  D002               	goto	l3240
  1177  00194C                     u3300:
  1178                           
  1179                           ; BSR set to: 0
  1180                           ;mpap.c: 167: {;mpap.c: 168: sm0++;
  1181  00194C  2A4B               	incf	mpap_sych@sm0,f,c
  1182                           
  1183                           ;mpap.c: 169: }
  1184  00194E  0012               	return	
  1185  001950                     l3240:
  1186                           
  1187                           ; BSR set to: 0
  1188                           ;mpap.c: 170: else if (mpap.mode == MPAP_STALL_MODE)
  1189  001950  0448               	decf	_mpap+7,w,c	;volatile
  1190  001952  A4D8               	btfss	status,2,c
  1191  001954  0012               	return	
  1192                           
  1193                           ; BSR set to: 0
  1194                           ;mpap.c: 171: {;mpap.c: 172: sm0 = 2;
  1195  001956  0E02               	movlw	2
  1196  001958  6E4B               	movwf	mpap_sych@sm0,c
  1197  00195A  0012               	return	
  1198  00195C                     l3244:
  1199                           
  1200                           ; BSR set to: 0
  1201                           ;mpap.c: 175: else if (sm0 == 1)
  1202  00195C  044B               	decf	mpap_sych@sm0,w,c
  1203  00195E  A4D8               	btfss	status,2,c
  1204  001960  D013               	goto	l3260
  1205                           
  1206                           ; BSR set to: 0
  1207                           ;mpap.c: 176: {;mpap.c: 177: if (mpap.numSteps_tomove == 0)
  1208  001962  5045               	movf	_mpap+4,w,c	;volatile
  1209  001964  1046               	iorwf	_mpap+5,w,c	;volatile
  1210  001966  A4D8               	btfss	status,2,c
  1211  001968  0012               	return	
  1212                           
  1213                           ; BSR set to: 0
  1214                           ;mpap.c: 178: {;mpap.c: 179: if (mpap.mode == MPAP_HOMMING_MODE)
  1215  00196A  0E02               	movlw	2
  1216  00196C  1848               	xorwf	_mpap+7,w,c	;volatile
  1217  00196E  A4D8               	btfss	status,2,c
  1218  001970  D005               	goto	l3254
  1219                           
  1220                           ; BSR set to: 0
  1221                           ;mpap.c: 180: {;mpap.c: 181: if ( pulsonic.errors.flag.mpap_home_sensor == 1)
  1222  001972  0101               	movlb	1	; () banked
  1223  001974  A13A               	btfss	(_pulsonic+58)& (0+255),0,b
  1224  001976  D003               	goto	l3256
  1225                           
  1226                           ; BSR set to: 1
  1227                           ;mpap.c: 182: {;mpap.c: 183: pulsonic.errors.flag.mpap_home_sensor = 0;
  1228  001978  913A               	bcf	(_pulsonic+58)& (0+255),0,b
  1229  00197A  D001               	goto	l3256
  1230  00197C                     l3254:
  1231                           
  1232                           ; BSR set to: 0
  1233                           ;mpap.c: 187: else if (mpap.mode == MPAP_NORMAL_MODE)
  1234  00197C  5048               	movf	_mpap+7,w,c	;volatile
  1235  00197E                     l3256:
  1236                           
  1237                           ;mpap.c: 189: };mpap.c: 190: sm0++;
  1238  00197E  2A4B               	incf	mpap_sych@sm0,f,c
  1239                           
  1240                           ;mpap.c: 191: c = 0;
  1241  001980  0E00               	movlw	0
  1242  001982  0100               	movlb	0	; () banked
  1243  001984  6FBC               	movwf	mpap_sych@c& (0+255),b
  1244  001986  0012               	return	
  1245  001988                     l3260:
  1246                           
  1247                           ; BSR set to: 0
  1248                           ;mpap.c: 194: else if (sm0 == 2)
  1249  001988  0E02               	movlw	2
  1250  00198A  184B               	xorwf	mpap_sych@sm0,w,c
  1251  00198C  A4D8               	btfss	status,2,c
  1252  00198E  D00A               	goto	l3270
  1253                           
  1254                           ; BSR set to: 0
  1255                           ;mpap.c: 195: {;mpap.c: 196: if (main_flag.f1ms)
  1256  001990  A04D               	btfss	_main_flag,0,c	;volatile
  1257  001992  0012               	return	
  1258                           
  1259                           ; BSR set to: 0
  1260                           ;mpap.c: 197: {;mpap.c: 198: if (++c == 10)
  1261  001994  2BBC               	incf	mpap_sych@c& (0+255),f,b
  1262  001996  0E0A               	movlw	10
  1263  001998  19BC               	xorwf	mpap_sych@c& (0+255),w,b
  1264  00199A  A4D8               	btfss	status,2,c
  1265  00199C  0012               	return	
  1266                           
  1267                           ; BSR set to: 0
  1268                           ;mpap.c: 199: {;mpap.c: 201: mpap.mode = MPAP_STALL_MODE;
  1269  00199E  0E01               	movlw	1
  1270  0019A0  6E48               	movwf	_mpap+7,c	;volatile
  1271  0019A2  D7D4               	goto	u3300
  1272  0019A4                     l3270:
  1273                           
  1274                           ; BSR set to: 0
  1275                           ;mpap.c: 206: else if (sm0 == 3)
  1276  0019A4  0E03               	movlw	3
  1277  0019A6  184B               	xorwf	mpap_sych@sm0,w,c
  1278  0019A8  A4D8               	btfss	status,2,c
  1279  0019AA  0012               	return	
  1280                           
  1281                           ; BSR set to: 0
  1282                           ;mpap.c: 207: {;mpap.c: 208: if (mpap.mode == MPAP_IDLE_MODE)
  1283  0019AC  5048               	movf	_mpap+7,w,c	;volatile
  1284  0019AE  A4D8               	btfss	status,2,c
  1285  0019B0  0012               	return	
  1286                           
  1287                           ; BSR set to: 0
  1288                           ;mpap.c: 209: {;mpap.c: 211: sm0 = 0;
  1289  0019B2  0E00               	movlw	0
  1290  0019B4  6E4B               	movwf	mpap_sych@sm0,c
  1291                           
  1292                           ; BSR set to: 0
  1293  0019B6  0012               	return		;funcret
  1294  0019B8                     __end_of_mpap_sych:
  1295                           	opt callstack 0
  1296                           
  1297 ;; *************** function _ikb_job *****************
  1298 ;; Defined at:
  1299 ;;		line 414 in file "../../../../../../FIRWAR/eslibrary/ikb/ikb.c"
  1300 ;; Parameters:    Size  Location     Type
  1301 ;;		None
  1302 ;; Auto vars:     Size  Location     Type
  1303 ;;		None
  1304 ;; Return value:  Size  Location     Type
  1305 ;;                  1    wreg      void 
  1306 ;; Registers used:
  1307 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
  1308 ;; Tracked objects:
  1309 ;;		On entry : 0/0
  1310 ;;		On exit  : 0/0
  1311 ;;		Unchanged: 0/0
  1312 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1313 ;;      Params:         0       0       0       0       0       0       0       0       0
  1314 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1315 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1316 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1317 ;;Total ram usage:        0 bytes
  1318 ;; Hardware stack levels used:    1
  1319 ;; Hardware stack levels required when called:    8
  1320 ;; This function calls:
  1321 ;;		_ikey_parsing
  1322 ;;		_ikey_scan
  1323 ;; This function is called by:
  1324 ;;		_main
  1325 ;; This function uses a non-reentrant model
  1326 ;;
  1327                           
  1328                           	psect	text4
  1329  001F64                     __ptext4:
  1330                           	opt callstack 0
  1331  001F64                     _ikb_job:
  1332                           	opt callstack 22
  1333                           
  1334                           ;ikb.c: 416: ikey_scan();
  1335                           
  1336                           ; BSR set to: 0
  1337                           ;incstack = 0
  1338  001F64  EC39  F009         	call	_ikey_scan	;wreg free
  1339                           
  1340                           ;ikb.c: 417: ikey_parsing();
  1341  001F68  EC07  F004         	call	_ikey_parsing	;wreg free
  1342  001F6C  0012               	return		;funcret
  1343  001F6E                     __end_of_ikb_job:
  1344                           	opt callstack 0
  1345                           
  1346 ;; *************** function _ikey_scan *****************
  1347 ;; Defined at:
  1348 ;;		line 449 in file "../../../../../../FIRWAR/eslibrary/ikb/ikb.c"
  1349 ;; Parameters:    Size  Location     Type
  1350 ;;		None
  1351 ;; Auto vars:     Size  Location     Type
  1352 ;;  k               1   11[COMRAM] char 
  1353 ;; Return value:  Size  Location     Type
  1354 ;;                  1    wreg      void 
  1355 ;; Registers used:
  1356 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
  1357 ;; Tracked objects:
  1358 ;;		On entry : 0/0
  1359 ;;		On exit  : 0/0
  1360 ;;		Unchanged: 0/0
  1361 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1362 ;;      Params:         0       0       0       0       0       0       0       0       0
  1363 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1364 ;;      Temps:          1       0       0       0       0       0       0       0       0
  1365 ;;      Totals:         2       0       0       0       0       0       0       0       0
  1366 ;;Total ram usage:        2 bytes
  1367 ;; Hardware stack levels used:    1
  1368 ;; Hardware stack levels required when called:    6
  1369 ;; This function calls:
  1370 ;;		_keyRead_pin_key1
  1371 ;;		_keyRead_pin_key2
  1372 ;;		_keyRead_pin_key3
  1373 ;;		_keyRead_pin_key4
  1374 ;;		_keyRead_pin_key5
  1375 ;; This function is called by:
  1376 ;;		_ikb_job
  1377 ;; This function uses a non-reentrant model
  1378 ;;
  1379                           
  1380                           	psect	text5
  1381  001272                     __ptext5:
  1382                           	opt callstack 0
  1383  001272                     _ikey_scan:
  1384                           	opt callstack 23
  1385                           
  1386                           ;ikb.c: 451: int8_t k = 5-1;
  1387                           
  1388                           ;incstack = 0
  1389  001272  0E04               	movlw	4
  1390  001274  6E0C               	movwf	ikey_scan@k,c
  1391  001276                     l2822:
  1392                           
  1393                           ;ikb.c: 453: {;ikb.c: 454: if (key[k].sm0 == 0)
  1394  001276  500C               	movf	ikey_scan@k,w,c
  1395  001278  0D10               	mullw	16
  1396  00127A  50F3               	movf	prodl,w,c
  1397  00127C  0F64               	addlw	low (_key+4)
  1398  00127E  6ED9               	movwf	fsr2l,c
  1399  001280  6ADA               	clrf	fsr2h,c
  1400  001282  50DF               	movf	indf2,w,c
  1401  001284  A4D8               	btfss	status,2,c
  1402  001286  D016               	goto	l2828
  1403                           
  1404                           ;ikb.c: 455: {;ikb.c: 456: if (key[k].keyRead() == 0)
  1405  001288  500C               	movf	ikey_scan@k,w,c
  1406  00128A  0D10               	mullw	16
  1407  00128C  50F3               	movf	prodl,w,c
  1408  00128E  0F60               	addlw	low _key
  1409  001290  6ED9               	movwf	fsr2l,c
  1410  001292  6ADA               	clrf	fsr2h,c
  1411  001294  D801               	call	u2398
  1412  001296  D00A               	goto	u2399
  1413  001298                     u2398:
  1414  001298  0005               	push	
  1415  00129A  6EFA               	movwf	pclath,c
  1416  00129C  50DE               	movf	postinc2,w,c
  1417  00129E  6EFD               	movwf	tosl,c
  1418  0012A0  50DE               	movf	postinc2,w,c
  1419  0012A2  6EFE               	movwf	tosh,c
  1420  0012A4  50F8               	movf	tblptru,w,c
  1421  0012A6  6EFF               	movwf	tosu,c
  1422  0012A8  50FA               	movf	pclath,w,c
  1423  0012AA  0012               	return		;indir
  1424  0012AC                     u2399:
  1425  0012AC  0900               	iorlw	0
  1426  0012AE  A4D8               	btfss	status,2,c
  1427  0012B0  D0AC               	goto	l2858
  1428  0012B2  D041               	goto	L1
  1429  0012B4                     l2828:
  1430                           
  1431                           ;ikb.c: 461: else if (key[k].sm0 == 1)
  1432  0012B4  500C               	movf	ikey_scan@k,w,c
  1433  0012B6  0D10               	mullw	16
  1434  0012B8  50F3               	movf	prodl,w,c
  1435  0012BA  0F64               	addlw	low (_key+4)
  1436  0012BC  6ED9               	movwf	fsr2l,c
  1437  0012BE  6ADA               	clrf	fsr2h,c
  1438  0012C0  04DE               	decf	postinc2,w,c
  1439  0012C2  A4D8               	btfss	status,2,c
  1440  0012C4  D040               	goto	l2840
  1441                           
  1442                           ;ikb.c: 462: {;ikb.c: 463: if (++key[k].counter0 == 4)
  1443  0012C6  500C               	movf	ikey_scan@k,w,c
  1444  0012C8  0D10               	mullw	16
  1445  0012CA  50F3               	movf	prodl,w,c
  1446  0012CC  0F65               	addlw	low (_key+5)
  1447  0012CE  6ED9               	movwf	fsr2l,c
  1448  0012D0  6ADA               	clrf	fsr2h,c
  1449  0012D2  2ADF               	incf	indf2,f,c
  1450  0012D4  0E04               	movlw	4
  1451  0012D6  18DE               	xorwf	postinc2,w,c
  1452  0012D8  A4D8               	btfss	status,2,c
  1453  0012DA  D097               	goto	l2858
  1454                           
  1455                           ;ikb.c: 464: {;ikb.c: 465: key[k].counter0 = 0x00;
  1456  0012DC  500C               	movf	ikey_scan@k,w,c
  1457  0012DE  0D10               	mullw	16
  1458  0012E0  50F3               	movf	prodl,w,c
  1459  0012E2  0F65               	addlw	low (_key+5)
  1460  0012E4  6ED9               	movwf	fsr2l,c
  1461  0012E6  6ADA               	clrf	fsr2h,c
  1462  0012E8  0E00               	movlw	0
  1463  0012EA  6EDF               	movwf	indf2,c
  1464                           
  1465                           ;ikb.c: 467: if (key[k].keyRead() != 0)
  1466  0012EC  500C               	movf	ikey_scan@k,w,c
  1467  0012EE  0D10               	mullw	16
  1468  0012F0  50F3               	movf	prodl,w,c
  1469  0012F2  0F60               	addlw	low _key
  1470  0012F4  6ED9               	movwf	fsr2l,c
  1471  0012F6  6ADA               	clrf	fsr2h,c
  1472  0012F8  D801               	call	u2438
  1473  0012FA  D00A               	goto	u2439
  1474  0012FC                     u2438:
  1475  0012FC  0005               	push	
  1476  0012FE  6EFA               	movwf	pclath,c
  1477  001300  50DE               	movf	postinc2,w,c
  1478  001302  6EFD               	movwf	tosl,c
  1479  001304  50DE               	movf	postinc2,w,c
  1480  001306  6EFE               	movwf	tosh,c
  1481  001308  50F8               	movf	tblptru,w,c
  1482  00130A  6EFF               	movwf	tosu,c
  1483  00130C  50FA               	movf	pclath,w,c
  1484  00130E  0012               	return		;indir
  1485  001310                     u2439:
  1486  001310  0900               	iorlw	0
  1487  001312  B4D8               	btfsc	status,2,c
  1488  001314  D008               	goto	l2838
  1489  001316                     u2440:
  1490                           
  1491                           ;ikb.c: 468: {;ikb.c: 469: key[k].sm0--;
  1492  001316  500C               	movf	ikey_scan@k,w,c
  1493  001318  0D10               	mullw	16
  1494  00131A  50F3               	movf	prodl,w,c
  1495  00131C  0F64               	addlw	low (_key+4)
  1496  00131E  6ED9               	movwf	fsr2l,c
  1497  001320  6ADA               	clrf	fsr2h,c
  1498  001322  06DF               	decf	indf2,f,c
  1499                           
  1500                           ;ikb.c: 470: }
  1501  001324  D072               	goto	l2858
  1502  001326                     l2838:
  1503                           
  1504                           ;ikb.c: 471: else;ikb.c: 472: {;ikb.c: 473: key[k].bf.state = 1;
  1505  001326  500C               	movf	ikey_scan@k,w,c
  1506  001328  0D10               	mullw	16
  1507  00132A  50F3               	movf	prodl,w,c
  1508  00132C  0F6A               	addlw	low (_key+10)
  1509  00132E  6ED9               	movwf	fsr2l,c
  1510  001330  6ADA               	clrf	fsr2h,c
  1511  001332  0100               	movlb	0	; () banked
  1512  001334  80DF               	bsf	indf2,0,c
  1513  001336                     L1:
  1514                           
  1515                           ;ikb.c: 474: key[k].sm0++;
  1516  001336  500C               	movf	ikey_scan@k,w,c
  1517  001338  0D10               	mullw	16
  1518  00133A  50F3               	movf	prodl,w,c
  1519  00133C  0F64               	addlw	low (_key+4)
  1520  00133E  6ED9               	movwf	fsr2l,c
  1521  001340  6ADA               	clrf	fsr2h,c
  1522  001342  2ADF               	incf	indf2,f,c
  1523  001344  D062               	goto	l2858
  1524  001346                     l2840:
  1525                           
  1526                           ;ikb.c: 478: else if (key[k].sm0 == 2)
  1527  001346  500C               	movf	ikey_scan@k,w,c
  1528  001348  0D10               	mullw	16
  1529  00134A  50F3               	movf	prodl,w,c
  1530  00134C  0F64               	addlw	low (_key+4)
  1531  00134E  6ED9               	movwf	fsr2l,c
  1532  001350  6ADA               	clrf	fsr2h,c
  1533  001352  0E02               	movlw	2
  1534  001354  18DE               	xorwf	postinc2,w,c
  1535  001356  A4D8               	btfss	status,2,c
  1536  001358  D016               	goto	l2846
  1537                           
  1538                           ;ikb.c: 479: {;ikb.c: 480: if (key[k].keyRead() == 1)
  1539  00135A  500C               	movf	ikey_scan@k,w,c
  1540  00135C  0D10               	mullw	16
  1541  00135E  50F3               	movf	prodl,w,c
  1542  001360  0F60               	addlw	low _key
  1543  001362  6ED9               	movwf	fsr2l,c
  1544  001364  6ADA               	clrf	fsr2h,c
  1545  001366  D801               	call	u2468
  1546  001368  D00A               	goto	u2469
  1547  00136A                     u2468:
  1548  00136A  0005               	push	
  1549  00136C  6EFA               	movwf	pclath,c
  1550  00136E  50DE               	movf	postinc2,w,c
  1551  001370  6EFD               	movwf	tosl,c
  1552  001372  50DE               	movf	postinc2,w,c
  1553  001374  6EFE               	movwf	tosh,c
  1554  001376  50F8               	movf	tblptru,w,c
  1555  001378  6EFF               	movwf	tosu,c
  1556  00137A  50FA               	movf	pclath,w,c
  1557  00137C  0012               	return		;indir
  1558  00137E                     u2469:
  1559  00137E  06E8               	decf	wreg,f,c
  1560  001380  B4D8               	btfsc	status,2,c
  1561  001382  D7D9               	goto	L1
  1562  001384  D042               	goto	l2858
  1563  001386                     l2846:
  1564                           
  1565                           ;ikb.c: 483: else if (key[k].sm0 == 3)
  1566  001386  500C               	movf	ikey_scan@k,w,c
  1567  001388  0D10               	mullw	16
  1568  00138A  50F3               	movf	prodl,w,c
  1569  00138C  0F64               	addlw	low (_key+4)
  1570  00138E  6ED9               	movwf	fsr2l,c
  1571  001390  6ADA               	clrf	fsr2h,c
  1572  001392  0E03               	movlw	3
  1573  001394  18DE               	xorwf	postinc2,w,c
  1574  001396  A4D8               	btfss	status,2,c
  1575  001398  D038               	goto	l2858
  1576                           
  1577                           ;ikb.c: 484: {;ikb.c: 485: if (++key[k].counter0 == 4)
  1578  00139A  500C               	movf	ikey_scan@k,w,c
  1579  00139C  0D10               	mullw	16
  1580  00139E  50F3               	movf	prodl,w,c
  1581  0013A0  0F65               	addlw	low (_key+5)
  1582  0013A2  6ED9               	movwf	fsr2l,c
  1583  0013A4  6ADA               	clrf	fsr2h,c
  1584  0013A6  2ADF               	incf	indf2,f,c
  1585  0013A8  0E04               	movlw	4
  1586  0013AA  18DE               	xorwf	postinc2,w,c
  1587  0013AC  A4D8               	btfss	status,2,c
  1588  0013AE  D02D               	goto	l2858
  1589                           
  1590                           ;ikb.c: 486: {;ikb.c: 487: key[k].counter0 = 0x00;
  1591  0013B0  500C               	movf	ikey_scan@k,w,c
  1592  0013B2  0D10               	mullw	16
  1593  0013B4  50F3               	movf	prodl,w,c
  1594  0013B6  0F65               	addlw	low (_key+5)
  1595  0013B8  6ED9               	movwf	fsr2l,c
  1596  0013BA  6ADA               	clrf	fsr2h,c
  1597  0013BC  0E00               	movlw	0
  1598  0013BE  6EDF               	movwf	indf2,c
  1599                           
  1600                           ;ikb.c: 489: if (key[k].keyRead() != 1)
  1601  0013C0  500C               	movf	ikey_scan@k,w,c
  1602  0013C2  0D10               	mullw	16
  1603  0013C4  50F3               	movf	prodl,w,c
  1604  0013C6  0F60               	addlw	low _key
  1605  0013C8  6ED9               	movwf	fsr2l,c
  1606  0013CA  6ADA               	clrf	fsr2h,c
  1607  0013CC  D801               	call	u2508
  1608  0013CE  D00A               	goto	u2509
  1609  0013D0                     u2508:
  1610  0013D0  0005               	push	
  1611  0013D2  6EFA               	movwf	pclath,c
  1612  0013D4  50DE               	movf	postinc2,w,c
  1613  0013D6  6EFD               	movwf	tosl,c
  1614  0013D8  50DE               	movf	postinc2,w,c
  1615  0013DA  6EFE               	movwf	tosh,c
  1616  0013DC  50F8               	movf	tblptru,w,c
  1617  0013DE  6EFF               	movwf	tosu,c
  1618  0013E0  50FA               	movf	pclath,w,c
  1619  0013E2  0012               	return		;indir
  1620  0013E4                     u2509:
  1621  0013E4  06E8               	decf	wreg,f,c
  1622  0013E6  A4D8               	btfss	status,2,c
  1623  0013E8  D796               	goto	u2440
  1624                           
  1625                           ;ikb.c: 493: else;ikb.c: 494: {;ikb.c: 495: key[k].bf.state = 0;
  1626  0013EA  500C               	movf	ikey_scan@k,w,c
  1627  0013EC  0D10               	mullw	16
  1628  0013EE  50F3               	movf	prodl,w,c
  1629  0013F0  0F6A               	addlw	low (_key+10)
  1630  0013F2  6ED9               	movwf	fsr2l,c
  1631  0013F4  6ADA               	clrf	fsr2h,c
  1632  0013F6  0100               	movlb	0	; () banked
  1633  0013F8  90DF               	bcf	indf2,0,c
  1634                           
  1635                           ;ikb.c: 496: key[k].sm0 = 0x00;
  1636  0013FA  500C               	movf	ikey_scan@k,w,c
  1637  0013FC  0D10               	mullw	16
  1638  0013FE  50F3               	movf	prodl,w,c
  1639  001400  0F64               	addlw	low (_key+4)
  1640  001402  6ED9               	movwf	fsr2l,c
  1641  001404  6ADA               	clrf	fsr2h,c
  1642  001406  0E00               	movlw	0
  1643  001408  6EDF               	movwf	indf2,c
  1644  00140A                     l2858:
  1645                           
  1646                           ;ikb.c: 497: };ikb.c: 498: };ikb.c: 499: };ikb.c: 500: }while (--k >= 0);
  1647  00140A  060C               	decf	ikey_scan@k,f,c
  1648  00140C  BE0C               	btfsc	ikey_scan@k,7,c
  1649  00140E  0012               	return	
  1650  001410  D732               	goto	l2822
  1651  001412                     __end_of_ikey_scan:
  1652                           	opt callstack 0
  1653                           
  1654 ;; *************** function _keyRead_pin_key4 *****************
  1655 ;; Defined at:
  1656 ;;		line 206 in file "../../../../../../FIRWAR/eslibrary/ikb/ikb.c"
  1657 ;; Parameters:    Size  Location     Type
  1658 ;;		None
  1659 ;; Auto vars:     Size  Location     Type
  1660 ;;		None
  1661 ;; Return value:  Size  Location     Type
  1662 ;;                  1    wreg      unsigned char 
  1663 ;; Registers used:
  1664 ;;		wreg, status,2, status,0
  1665 ;; Tracked objects:
  1666 ;;		On entry : 0/0
  1667 ;;		On exit  : 0/0
  1668 ;;		Unchanged: 0/0
  1669 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1670 ;;      Params:         0       0       0       0       0       0       0       0       0
  1671 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1672 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1673 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1674 ;;Total ram usage:        0 bytes
  1675 ;; Hardware stack levels used:    1
  1676 ;; Hardware stack levels required when called:    5
  1677 ;; This function calls:
  1678 ;;		Nothing
  1679 ;; This function is called by:
  1680 ;;		_ikb_init
  1681 ;;		_ikey_scan
  1682 ;; This function uses a non-reentrant model
  1683 ;;
  1684                           
  1685                           	psect	text6
  1686  001FC4                     __ptext6:
  1687                           	opt callstack 0
  1688  001FC4                     _keyRead_pin_key4:
  1689                           	opt callstack 23
  1690                           
  1691                           ;ikb.c: 208: return ((PORTC & (1<<7))>>7);
  1692                           
  1693                           ;incstack = 0
  1694  001FC4  4482               	rlncf	3970,w,c	;volatile
  1695  001FC6  0B01               	andlw	1
  1696  001FC8  0012               	return		;funcret
  1697  001FCA                     __end_of_keyRead_pin_key4:
  1698                           	opt callstack 0
  1699                           
  1700 ;; *************** function _keyRead_pin_key3 *****************
  1701 ;; Defined at:
  1702 ;;		line 202 in file "../../../../../../FIRWAR/eslibrary/ikb/ikb.c"
  1703 ;; Parameters:    Size  Location     Type
  1704 ;;		None
  1705 ;; Auto vars:     Size  Location     Type
  1706 ;;		None
  1707 ;; Return value:  Size  Location     Type
  1708 ;;                  1    wreg      unsigned char 
  1709 ;; Registers used:
  1710 ;;		wreg, status,2, status,0
  1711 ;; Tracked objects:
  1712 ;;		On entry : 0/0
  1713 ;;		On exit  : 0/0
  1714 ;;		Unchanged: 0/0
  1715 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1716 ;;      Params:         0       0       0       0       0       0       0       0       0
  1717 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1718 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1719 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1720 ;;Total ram usage:        0 bytes
  1721 ;; Hardware stack levels used:    1
  1722 ;; Hardware stack levels required when called:    5
  1723 ;; This function calls:
  1724 ;;		Nothing
  1725 ;; This function is called by:
  1726 ;;		_ikb_init
  1727 ;;		_ikey_scan
  1728 ;; This function uses a non-reentrant model
  1729 ;;
  1730                           
  1731                           	psect	text7
  1732  001F6E                     __ptext7:
  1733                           	opt callstack 0
  1734  001F6E                     _keyRead_pin_key3:
  1735                           	opt callstack 23
  1736                           
  1737                           ;ikb.c: 204: return ((PORTC & (1<<6))>>6);
  1738                           
  1739                           ;incstack = 0
  1740  001F6E  4482               	rlncf	3970,w,c	;volatile
  1741  001F70  46E8               	rlncf	wreg,f,c
  1742  001F72  0B03               	andlw	3
  1743  001F74  0B01               	andlw	1
  1744  001F76  0012               	return		;funcret
  1745  001F78                     __end_of_keyRead_pin_key3:
  1746                           	opt callstack 0
  1747                           
  1748 ;; *************** function _keyRead_pin_key2 *****************
  1749 ;; Defined at:
  1750 ;;		line 198 in file "../../../../../../FIRWAR/eslibrary/ikb/ikb.c"
  1751 ;; Parameters:    Size  Location     Type
  1752 ;;		None
  1753 ;; Auto vars:     Size  Location     Type
  1754 ;;		None
  1755 ;; Return value:  Size  Location     Type
  1756 ;;                  1    wreg      unsigned char 
  1757 ;; Registers used:
  1758 ;;		wreg, status,2, status,0
  1759 ;; Tracked objects:
  1760 ;;		On entry : 0/0
  1761 ;;		On exit  : 0/0
  1762 ;;		Unchanged: 0/0
  1763 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1764 ;;      Params:         0       0       0       0       0       0       0       0       0
  1765 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1766 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1767 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1768 ;;Total ram usage:        0 bytes
  1769 ;; Hardware stack levels used:    1
  1770 ;; Hardware stack levels required when called:    5
  1771 ;; This function calls:
  1772 ;;		Nothing
  1773 ;; This function is called by:
  1774 ;;		_ikb_init
  1775 ;;		_ikey_scan
  1776 ;; This function uses a non-reentrant model
  1777 ;;
  1778                           
  1779                           	psect	text8
  1780  001F78                     __ptext8:
  1781                           	opt callstack 0
  1782  001F78                     _keyRead_pin_key2:
  1783                           	opt callstack 23
  1784                           
  1785                           ;ikb.c: 200: return ((PORTC & (1<<5))>>5);
  1786                           
  1787                           ;incstack = 0
  1788  001F78  3882               	swapf	3970,w,c	;volatile
  1789  001F7A  42E8               	rrncf	wreg,f,c
  1790  001F7C  0B07               	andlw	7
  1791  001F7E  0B01               	andlw	1
  1792  001F80  0012               	return		;funcret
  1793  001F82                     __end_of_keyRead_pin_key2:
  1794                           	opt callstack 0
  1795                           
  1796 ;; *************** function _keyRead_pin_key1 *****************
  1797 ;; Defined at:
  1798 ;;		line 194 in file "../../../../../../FIRWAR/eslibrary/ikb/ikb.c"
  1799 ;; Parameters:    Size  Location     Type
  1800 ;;		None
  1801 ;; Auto vars:     Size  Location     Type
  1802 ;;		None
  1803 ;; Return value:  Size  Location     Type
  1804 ;;                  1    wreg      unsigned char 
  1805 ;; Registers used:
  1806 ;;		wreg, status,2, status,0
  1807 ;; Tracked objects:
  1808 ;;		On entry : 0/0
  1809 ;;		On exit  : 0/0
  1810 ;;		Unchanged: 0/0
  1811 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1812 ;;      Params:         0       0       0       0       0       0       0       0       0
  1813 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1814 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1815 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1816 ;;Total ram usage:        0 bytes
  1817 ;; Hardware stack levels used:    1
  1818 ;; Hardware stack levels required when called:    5
  1819 ;; This function calls:
  1820 ;;		Nothing
  1821 ;; This function is called by:
  1822 ;;		_ikb_init
  1823 ;;		_ikey_scan
  1824 ;; This function uses a non-reentrant model
  1825 ;;
  1826                           
  1827                           	psect	text9
  1828  001FB4                     __ptext9:
  1829                           	opt callstack 0
  1830  001FB4                     _keyRead_pin_key1:
  1831                           	opt callstack 23
  1832                           
  1833                           ;ikb.c: 196: return ((PORTC & (1<<4))>>4);
  1834                           
  1835                           ;incstack = 0
  1836  001FB4  3882               	swapf	3970,w,c	;volatile
  1837  001FB6  0B0F               	andlw	15
  1838  001FB8  0B01               	andlw	1
  1839  001FBA  0012               	return		;funcret
  1840  001FBC                     __end_of_keyRead_pin_key1:
  1841                           	opt callstack 0
  1842                           
  1843 ;; *************** function _keyRead_pin_key5 *****************
  1844 ;; Defined at:
  1845 ;;		line 210 in file "../../../../../../FIRWAR/eslibrary/ikb/ikb.c"
  1846 ;; Parameters:    Size  Location     Type
  1847 ;;		None
  1848 ;; Auto vars:     Size  Location     Type
  1849 ;;		None
  1850 ;; Return value:  Size  Location     Type
  1851 ;;                  1    wreg      unsigned char 
  1852 ;; Registers used:
  1853 ;;		wreg, status,2, status,0
  1854 ;; Tracked objects:
  1855 ;;		On entry : 0/0
  1856 ;;		On exit  : 0/0
  1857 ;;		Unchanged: 0/0
  1858 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1859 ;;      Params:         0       0       0       0       0       0       0       0       0
  1860 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1861 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1862 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1863 ;;Total ram usage:        0 bytes
  1864 ;; Hardware stack levels used:    1
  1865 ;; Hardware stack levels required when called:    5
  1866 ;; This function calls:
  1867 ;;		Nothing
  1868 ;; This function is called by:
  1869 ;;		_ikb_init
  1870 ;;		_ikey_scan
  1871 ;; This function uses a non-reentrant model
  1872 ;;
  1873                           
  1874                           	psect	text10
  1875  001FBC                     __ptext10:
  1876                           	opt callstack 0
  1877  001FBC                     _keyRead_pin_key5:
  1878                           	opt callstack 23
  1879                           
  1880                           ;ikb.c: 212: return ((PORTD & (1<<4))>>4);
  1881                           
  1882                           ;incstack = 0
  1883  001FBC  3883               	swapf	3971,w,c	;volatile
  1884  001FBE  0B0F               	andlw	15
  1885  001FC0  0B01               	andlw	1
  1886  001FC2  0012               	return		;funcret
  1887  001FC4                     __end_of_keyRead_pin_key5:
  1888                           	opt callstack 0
  1889                           
  1890 ;; *************** function _ikey_parsing *****************
  1891 ;; Defined at:
  1892 ;;		line 545 in file "../../../../../../FIRWAR/eslibrary/ikb/ikb.c"
  1893 ;; Parameters:    Size  Location     Type
  1894 ;;		None
  1895 ;; Auto vars:     Size  Location     Type
  1896 ;;  k               1   34[COMRAM] unsigned char 
  1897 ;; Return value:  Size  Location     Type
  1898 ;;                  1    wreg      void 
  1899 ;; Registers used:
  1900 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1901 ;; Tracked objects:
  1902 ;;		On entry : 0/0
  1903 ;;		On exit  : 0/0
  1904 ;;		Unchanged: 0/0
  1905 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1906 ;;      Params:         0       0       0       0       0       0       0       0       0
  1907 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1908 ;;      Temps:          4       0       0       0       0       0       0       0       0
  1909 ;;      Totals:         5       0       0       0       0       0       0       0       0
  1910 ;;Total ram usage:        5 bytes
  1911 ;; Hardware stack levels used:    1
  1912 ;; Hardware stack levels required when called:    7
  1913 ;; This function calls:
  1914 ;;		___ftge
  1915 ;;		___lwtoft
  1916 ;;		_ikey_is_accessible
  1917 ;; This function is called by:
  1918 ;;		_ikb_job
  1919 ;; This function uses a non-reentrant model
  1920 ;;
  1921                           
  1922                           	psect	text11
  1923  00080E                     __ptext11:
  1924                           	opt callstack 0
  1925  00080E                     _ikey_parsing:
  1926                           	opt callstack 22
  1927                           
  1928                           ;ikb.c: 547: uint8_t k;;ikb.c: 549: for (k=0; k < 5; k++)
  1929                           
  1930                           ;incstack = 0
  1931  00080E  0E00               	movlw	0
  1932  000810  6E23               	movwf	ikey_parsing@k,c
  1933  000812                     l3692:
  1934                           
  1935                           ;ikb.c: 550: {;ikb.c: 551: if ( key[k].sm1 == (0) )
  1936  000812  5023               	movf	ikey_parsing@k,w,c
  1937  000814  0D10               	mullw	16
  1938  000816  50F3               	movf	prodl,w,c
  1939  000818  0F66               	addlw	low (_key+6)
  1940  00081A  6ED9               	movwf	fsr2l,c
  1941  00081C  6ADA               	clrf	fsr2h,c
  1942  00081E  50DF               	movf	indf2,w,c
  1943  000820  A4D8               	btfss	status,2,c
  1944  000822  D08B               	goto	l276
  1945                           
  1946                           ;ikb.c: 552: {;ikb.c: 553: if ( ikey_is_accessible(k) )
  1947  000824  5023               	movf	ikey_parsing@k,w,c
  1948  000826  EC3B  F00E         	call	_ikey_is_accessible
  1949  00082A  0900               	iorlw	0
  1950  00082C  B4D8               	btfsc	status,2,c
  1951  00082E  D085               	goto	l276
  1952                           
  1953                           ;ikb.c: 554: {;ikb.c: 555: if (key[k].bf.state == 1)
  1954  000830  5023               	movf	ikey_parsing@k,w,c
  1955  000832  0D10               	mullw	16
  1956  000834  50F3               	movf	prodl,w,c
  1957  000836  0F6A               	addlw	low (_key+10)
  1958  000838  6ED9               	movwf	fsr2l,c
  1959  00083A  6ADA               	clrf	fsr2h,c
  1960  00083C  0100               	movlb	0	; () banked
  1961  00083E  A0DF               	btfss	indf2,0,c
  1962  000840  D07C               	goto	l276
  1963                           
  1964                           ; BSR set to: 0
  1965                           ;ikb.c: 556: {;ikb.c: 558: if (key[k].bf.OnKeyPressed)
  1966  000842  5023               	movf	ikey_parsing@k,w,c
  1967  000844  0D10               	mullw	16
  1968  000846  50F3               	movf	prodl,w,c
  1969  000848  0F6A               	addlw	low (_key+10)
  1970  00084A  6ED9               	movwf	fsr2l,c
  1971  00084C  6ADA               	clrf	fsr2h,c
  1972  00084E  A2DF               	btfss	indf2,1,c
  1973  000850  D01F               	goto	l3706
  1974                           
  1975                           ; BSR set to: 0
  1976                           ;ikb.c: 559: {;ikb.c: 560: key[k].bf.ReadyToRead = 1;
  1977  000852  5023               	movf	ikey_parsing@k,w,c
  1978  000854  0D10               	mullw	16
  1979  000856  50F3               	movf	prodl,w,c
  1980  000858  0F6A               	addlw	low (_key+10)
  1981  00085A  6ED9               	movwf	fsr2l,c
  1982  00085C  6ADA               	clrf	fsr2h,c
  1983  00085E  8CDF               	bsf	indf2,6,c
  1984                           
  1985                           ;ikb.c: 562: if (key[k].bf.Reptt)
  1986  000860  5023               	movf	ikey_parsing@k,w,c
  1987  000862  0D10               	mullw	16
  1988  000864  50F3               	movf	prodl,w,c
  1989  000866  0F6A               	addlw	low (_key+10)
  1990  000868  6ED9               	movwf	fsr2l,c
  1991  00086A  6ADA               	clrf	fsr2h,c
  1992  00086C  AADF               	btfss	indf2,5,c
  1993  00086E  D008               	goto	l3704
  1994                           
  1995                           ; BSR set to: 0
  1996                           ;ikb.c: 563: {;ikb.c: 564: key[k].sm1 = (6);
  1997  000870  5023               	movf	ikey_parsing@k,w,c
  1998  000872  0D10               	mullw	16
  1999  000874  50F3               	movf	prodl,w,c
  2000  000876  0F66               	addlw	low (_key+6)
  2001  000878  6ED9               	movwf	fsr2l,c
  2002  00087A  6ADA               	clrf	fsr2h,c
  2003  00087C  0E06               	movlw	6
  2004  00087E  D037               	goto	L2
  2005  000880                     l3704:
  2006                           
  2007                           ; BSR set to: 0
  2008                           ;ikb.c: 566: else;ikb.c: 567: {;ikb.c: 568: key[k].sm1 = (1);
  2009  000880  5023               	movf	ikey_parsing@k,w,c
  2010  000882  0D10               	mullw	16
  2011  000884  50F3               	movf	prodl,w,c
  2012  000886  0F66               	addlw	low (_key+6)
  2013  000888  6ED9               	movwf	fsr2l,c
  2014  00088A  6ADA               	clrf	fsr2h,c
  2015  00088C  0E01               	movlw	1
  2016  00088E  D02F               	goto	L2
  2017  000890                     l3706:
  2018                           
  2019                           ; BSR set to: 0
  2020                           ;ikb.c: 571: else if ( key[k].bf.OnKeyPressedAndKeyRelease)
  2021  000890  5023               	movf	ikey_parsing@k,w,c
  2022  000892  0D10               	mullw	16
  2023  000894  50F3               	movf	prodl,w,c
  2024  000896  0F6A               	addlw	low (_key+10)
  2025  000898  6ED9               	movwf	fsr2l,c
  2026  00089A  6ADA               	clrf	fsr2h,c
  2027  00089C  A4DF               	btfss	indf2,2,c
  2028  00089E  D008               	goto	l3710
  2029                           
  2030                           ; BSR set to: 0
  2031                           ;ikb.c: 572: {;ikb.c: 573: key[k].sm1 = (5);
  2032  0008A0  5023               	movf	ikey_parsing@k,w,c
  2033  0008A2  0D10               	mullw	16
  2034  0008A4  50F3               	movf	prodl,w,c
  2035  0008A6  0F66               	addlw	low (_key+6)
  2036  0008A8  6ED9               	movwf	fsr2l,c
  2037  0008AA  6ADA               	clrf	fsr2h,c
  2038  0008AC  0E05               	movlw	5
  2039  0008AE  D01F               	goto	L2
  2040  0008B0                     l3710:
  2041                           
  2042                           ; BSR set to: 0
  2043                           ;ikb.c: 576: else if (key[k].bf.AtTimeExpired)
  2044  0008B0  5023               	movf	ikey_parsing@k,w,c
  2045  0008B2  0D10               	mullw	16
  2046  0008B4  50F3               	movf	prodl,w,c
  2047  0008B6  0F6A               	addlw	low (_key+10)
  2048  0008B8  6ED9               	movwf	fsr2l,c
  2049  0008BA  6ADA               	clrf	fsr2h,c
  2050  0008BC  A6DF               	btfss	indf2,3,c
  2051  0008BE  D008               	goto	l3714
  2052                           
  2053                           ; BSR set to: 0
  2054                           ;ikb.c: 577: {;ikb.c: 578: key[k].sm1 = (3);
  2055  0008C0  5023               	movf	ikey_parsing@k,w,c
  2056  0008C2  0D10               	mullw	16
  2057  0008C4  50F3               	movf	prodl,w,c
  2058  0008C6  0F66               	addlw	low (_key+6)
  2059  0008C8  6ED9               	movwf	fsr2l,c
  2060  0008CA  6ADA               	clrf	fsr2h,c
  2061  0008CC  0E03               	movlw	3
  2062  0008CE  D00F               	goto	L2
  2063  0008D0                     l3714:
  2064                           
  2065                           ; BSR set to: 0
  2066                           ;ikb.c: 580: else if (key[k].bf.AtTimeExpired2)
  2067  0008D0  5023               	movf	ikey_parsing@k,w,c
  2068  0008D2  0D10               	mullw	16
  2069  0008D4  50F3               	movf	prodl,w,c
  2070  0008D6  0F6A               	addlw	low (_key+10)
  2071  0008D8  6ED9               	movwf	fsr2l,c
  2072  0008DA  6ADA               	clrf	fsr2h,c
  2073  0008DC  A8DF               	btfss	indf2,4,c
  2074  0008DE  D008               	goto	l282
  2075                           
  2076                           ; BSR set to: 0
  2077                           ;ikb.c: 581: {;ikb.c: 582: key[k].sm1 = (4);
  2078  0008E0  5023               	movf	ikey_parsing@k,w,c
  2079  0008E2  0D10               	mullw	16
  2080  0008E4  50F3               	movf	prodl,w,c
  2081  0008E6  0F66               	addlw	low (_key+6)
  2082  0008E8  6ED9               	movwf	fsr2l,c
  2083  0008EA  6ADA               	clrf	fsr2h,c
  2084  0008EC  0E04               	movlw	4
  2085  0008EE                     L2:
  2086  0008EE  6EDF               	movwf	indf2,c
  2087  0008F0                     l282:
  2088                           
  2089                           ; BSR set to: 0
  2090                           ;ikb.c: 583: };ikb.c: 586: key[k].bf.InProcessing = 1;
  2091  0008F0  5023               	movf	ikey_parsing@k,w,c
  2092  0008F2  0D10               	mullw	16
  2093  0008F4  50F3               	movf	prodl,w,c
  2094  0008F6  0F6B               	addlw	low (_key+11)
  2095  0008F8  6ED9               	movwf	fsr2l,c
  2096  0008FA  6ADA               	clrf	fsr2h,c
  2097  0008FC  82DF               	bsf	indf2,1,c
  2098                           
  2099                           ;ikb.c: 591: if (key[k].num_group_x != 0)
  2100  0008FE  5023               	movf	ikey_parsing@k,w,c
  2101  000900  0D10               	mullw	16
  2102  000902  50F3               	movf	prodl,w,c
  2103  000904  0F69               	addlw	low (_key+9)
  2104  000906  6ED9               	movwf	fsr2l,c
  2105  000908  6ADA               	clrf	fsr2h,c
  2106  00090A  50DF               	movf	indf2,w,c
  2107  00090C  B4D8               	btfsc	status,2,c
  2108  00090E  D015               	goto	l276
  2109                           
  2110                           ; BSR set to: 0
  2111                           ;ikb.c: 592: {;ikb.c: 593: group_x[ key[k].num_group_x ] = 1;
  2112  000910  5023               	movf	ikey_parsing@k,w,c
  2113  000912  0D10               	mullw	16
  2114  000914  50F3               	movf	prodl,w,c
  2115  000916  0F69               	addlw	low (_key+9)
  2116  000918  6ED9               	movwf	fsr2l,c
  2117  00091A  6ADA               	clrf	fsr2h,c
  2118  00091C  50DF               	movf	indf2,w,c
  2119  00091E  6E1F               	movwf	??_ikey_parsing& (0+255),c
  2120  000920  501F               	movf	??_ikey_parsing,w,c
  2121  000922  0FB0               	addlw	low _group_x
  2122  000924  6ED9               	movwf	fsr2l,c
  2123  000926  6ADA               	clrf	fsr2h,c
  2124  000928  0E01               	movlw	1
  2125  00092A  6EDF               	movwf	indf2,c
  2126                           
  2127                           ;ikb.c: 594: key[k].bf.OwnerOfGroup = 1;
  2128  00092C  5023               	movf	ikey_parsing@k,w,c
  2129  00092E  0D10               	mullw	16
  2130  000930  50F3               	movf	prodl,w,c
  2131  000932  0F6B               	addlw	low (_key+11)
  2132  000934  6ED9               	movwf	fsr2l,c
  2133  000936  6ADA               	clrf	fsr2h,c
  2134  000938  80DF               	bsf	indf2,0,c
  2135  00093A                     l276:
  2136                           
  2137                           ;ikb.c: 595: };ikb.c: 597: };ikb.c: 598: };ikb.c: 599: };ikb.c: 603: if ( (key[k].sm1 >=
      +                           (6) ) && (key[k].sm1 <= (8)))
  2138  00093A  5023               	movf	ikey_parsing@k,w,c
  2139  00093C  0D10               	mullw	16
  2140  00093E  50F3               	movf	prodl,w,c
  2141  000940  0F66               	addlw	low (_key+6)
  2142  000942  6ED9               	movwf	fsr2l,c
  2143  000944  6ADA               	clrf	fsr2h,c
  2144  000946  0E05               	movlw	5
  2145  000948  64DF               	cpfsgt	indf2,c
  2146  00094A  D024               	goto	l289
  2147  00094C  5023               	movf	ikey_parsing@k,w,c
  2148  00094E  0D10               	mullw	16
  2149  000950  50F3               	movf	prodl,w,c
  2150  000952  0F66               	addlw	low (_key+6)
  2151  000954  6ED9               	movwf	fsr2l,c
  2152  000956  6ADA               	clrf	fsr2h,c
  2153  000958  0E09               	movlw	9
  2154  00095A  60DF               	cpfslt	indf2,c
  2155  00095C  D01B               	goto	l289
  2156                           
  2157                           ;ikb.c: 604: {;ikb.c: 605: if (key[k].bf.state == 0)
  2158  00095E  5023               	movf	ikey_parsing@k,w,c
  2159  000960  0D10               	mullw	16
  2160  000962  50F3               	movf	prodl,w,c
  2161  000964  0F6A               	addlw	low (_key+10)
  2162  000966  6ED9               	movwf	fsr2l,c
  2163  000968  6ADA               	clrf	fsr2h,c
  2164  00096A  0100               	movlb	0	; () banked
  2165  00096C  B0DF               	btfsc	indf2,0,c
  2166  00096E  D012               	goto	l289
  2167                           
  2168                           ; BSR set to: 0
  2169                           ;ikb.c: 606: {;ikb.c: 607: key[k].counter1 = 0;
  2170  000970  5023               	movf	ikey_parsing@k,w,c
  2171  000972  0D10               	mullw	16
  2172  000974  50F3               	movf	prodl,w,c
  2173  000976  0F67               	addlw	low (_key+7)
  2174  000978  6ED9               	movwf	fsr2l,c
  2175  00097A  6ADA               	clrf	fsr2h,c
  2176  00097C  0E00               	movlw	0
  2177  00097E  6EDE               	movwf	postinc2,c
  2178  000980  0E00               	movlw	0
  2179  000982  6EDD               	movwf	postdec2,c
  2180                           
  2181                           ;ikb.c: 608: key[k].sm1 = (2);
  2182  000984  5023               	movf	ikey_parsing@k,w,c
  2183  000986  0D10               	mullw	16
  2184  000988  50F3               	movf	prodl,w,c
  2185  00098A  0F66               	addlw	low (_key+6)
  2186  00098C  6ED9               	movwf	fsr2l,c
  2187  00098E  6ADA               	clrf	fsr2h,c
  2188  000990  0E02               	movlw	2
  2189  000992  6EDF               	movwf	indf2,c
  2190  000994                     l289:
  2191                           
  2192                           ;ikb.c: 609: };ikb.c: 610: };ikb.c: 612: if (key[k].sm1 == (6) )
  2193  000994  5023               	movf	ikey_parsing@k,w,c
  2194  000996  0D10               	mullw	16
  2195  000998  50F3               	movf	prodl,w,c
  2196  00099A  0F66               	addlw	low (_key+6)
  2197  00099C  6ED9               	movwf	fsr2l,c
  2198  00099E  6ADA               	clrf	fsr2h,c
  2199  0009A0  0E06               	movlw	6
  2200  0009A2  18DE               	xorwf	postinc2,w,c
  2201  0009A4  A4D8               	btfss	status,2,c
  2202  0009A6  D027               	goto	l291
  2203                           
  2204                           ;ikb.c: 613: {;ikb.c: 614: if ( ++key[k].counter1 >= key[k].repp.to_start)
  2205  0009A8  5023               	movf	ikey_parsing@k,w,c
  2206  0009AA  0D10               	mullw	16
  2207  0009AC  50F3               	movf	prodl,w,c
  2208  0009AE  0F6C               	addlw	low (_key+12)
  2209  0009B0  6ED9               	movwf	fsr2l,c
  2210  0009B2  6ADA               	clrf	fsr2h,c
  2211  0009B4  5023               	movf	ikey_parsing@k,w,c
  2212  0009B6  0D10               	mullw	16
  2213  0009B8  50F3               	movf	prodl,w,c
  2214  0009BA  0F67               	addlw	low (_key+7)
  2215  0009BC  6EE1               	movwf	fsr1l,c
  2216  0009BE  6AE2               	clrf	fsr1h,c
  2217  0009C0  2AE6               	incf	postinc1,f,c
  2218  0009C2  0E00               	movlw	0
  2219  0009C4  22E5               	addwfc	postdec1,f,c
  2220  0009C6  50DE               	movf	postinc2,w,c
  2221  0009C8  5CE6               	subwf	postinc1,w,c
  2222  0009CA  50DE               	movf	postinc2,w,c
  2223  0009CC  58E6               	subwfb	postinc1,w,c
  2224  0009CE  A0D8               	btfss	status,0,c
  2225  0009D0  D012               	goto	l291
  2226                           
  2227                           ;ikb.c: 615: {;ikb.c: 616: key[k].counter1 =0;
  2228  0009D2  5023               	movf	ikey_parsing@k,w,c
  2229  0009D4  0D10               	mullw	16
  2230  0009D6  50F3               	movf	prodl,w,c
  2231  0009D8  0F67               	addlw	low (_key+7)
  2232  0009DA  6ED9               	movwf	fsr2l,c
  2233  0009DC  6ADA               	clrf	fsr2h,c
  2234  0009DE  0E00               	movlw	0
  2235  0009E0  6EDE               	movwf	postinc2,c
  2236  0009E2  0E00               	movlw	0
  2237  0009E4  6EDD               	movwf	postdec2,c
  2238                           
  2239                           ;ikb.c: 617: key[k].sm1 = (7);
  2240  0009E6  5023               	movf	ikey_parsing@k,w,c
  2241  0009E8  0D10               	mullw	16
  2242  0009EA  50F3               	movf	prodl,w,c
  2243  0009EC  0F66               	addlw	low (_key+6)
  2244  0009EE  6ED9               	movwf	fsr2l,c
  2245  0009F0  6ADA               	clrf	fsr2h,c
  2246  0009F2  0E07               	movlw	7
  2247  0009F4  6EDF               	movwf	indf2,c
  2248  0009F6                     l291:
  2249                           
  2250                           ;ikb.c: 618: };ikb.c: 619: };ikb.c: 620: if (key[k].sm1 == (7))
  2251  0009F6  5023               	movf	ikey_parsing@k,w,c
  2252  0009F8  0D10               	mullw	16
  2253  0009FA  50F3               	movf	prodl,w,c
  2254  0009FC  0F66               	addlw	low (_key+6)
  2255  0009FE  6ED9               	movwf	fsr2l,c
  2256  000A00  6ADA               	clrf	fsr2h,c
  2257  000A02  0E07               	movlw	7
  2258  000A04  18DE               	xorwf	postinc2,w,c
  2259  000A06  A4D8               	btfss	status,2,c
  2260  000A08  D018               	goto	l293
  2261                           
  2262                           ;ikb.c: 621: {;ikb.c: 622: if (key[k].bf.ReadyToRead == 0)
  2263  000A0A  5023               	movf	ikey_parsing@k,w,c
  2264  000A0C  0D10               	mullw	16
  2265  000A0E  50F3               	movf	prodl,w,c
  2266  000A10  0F6A               	addlw	low (_key+10)
  2267  000A12  6ED9               	movwf	fsr2l,c
  2268  000A14  6ADA               	clrf	fsr2h,c
  2269  000A16  0100               	movlb	0	; () banked
  2270  000A18  BCDF               	btfsc	indf2,6,c
  2271  000A1A  D00F               	goto	l293
  2272                           
  2273                           ; BSR set to: 0
  2274                           ;ikb.c: 623: {;ikb.c: 624: key[k].bf.ReadyToRead = 1;
  2275  000A1C  5023               	movf	ikey_parsing@k,w,c
  2276  000A1E  0D10               	mullw	16
  2277  000A20  50F3               	movf	prodl,w,c
  2278  000A22  0F6A               	addlw	low (_key+10)
  2279  000A24  6ED9               	movwf	fsr2l,c
  2280  000A26  6ADA               	clrf	fsr2h,c
  2281  000A28  8CDF               	bsf	indf2,6,c
  2282                           
  2283                           ;ikb.c: 625: key[k].sm1 = (8);
  2284  000A2A  5023               	movf	ikey_parsing@k,w,c
  2285  000A2C  0D10               	mullw	16
  2286  000A2E  50F3               	movf	prodl,w,c
  2287  000A30  0F66               	addlw	low (_key+6)
  2288  000A32  6ED9               	movwf	fsr2l,c
  2289  000A34  6ADA               	clrf	fsr2h,c
  2290  000A36  0E08               	movlw	8
  2291  000A38  6EDF               	movwf	indf2,c
  2292  000A3A                     l293:
  2293                           
  2294                           ;ikb.c: 626: };ikb.c: 627: };ikb.c: 628: if (key[k].sm1 == (8))
  2295  000A3A  5023               	movf	ikey_parsing@k,w,c
  2296  000A3C  0D10               	mullw	16
  2297  000A3E  50F3               	movf	prodl,w,c
  2298  000A40  0F66               	addlw	low (_key+6)
  2299  000A42  6ED9               	movwf	fsr2l,c
  2300  000A44  6ADA               	clrf	fsr2h,c
  2301  000A46  0E08               	movlw	8
  2302  000A48  18DE               	xorwf	postinc2,w,c
  2303  000A4A  A4D8               	btfss	status,2,c
  2304  000A4C  D027               	goto	l295
  2305                           
  2306                           ;ikb.c: 629: {;ikb.c: 630: if ( ++key[k].counter1 >= key[k].repp.after_start)
  2307  000A4E  5023               	movf	ikey_parsing@k,w,c
  2308  000A50  0D10               	mullw	16
  2309  000A52  50F3               	movf	prodl,w,c
  2310  000A54  0F6E               	addlw	low (_key+14)
  2311  000A56  6ED9               	movwf	fsr2l,c
  2312  000A58  6ADA               	clrf	fsr2h,c
  2313  000A5A  5023               	movf	ikey_parsing@k,w,c
  2314  000A5C  0D10               	mullw	16
  2315  000A5E  50F3               	movf	prodl,w,c
  2316  000A60  0F67               	addlw	low (_key+7)
  2317  000A62  6EE1               	movwf	fsr1l,c
  2318  000A64  6AE2               	clrf	fsr1h,c
  2319  000A66  2AE6               	incf	postinc1,f,c
  2320  000A68  0E00               	movlw	0
  2321  000A6A  22E5               	addwfc	postdec1,f,c
  2322  000A6C  50DE               	movf	postinc2,w,c
  2323  000A6E  5CE6               	subwf	postinc1,w,c
  2324  000A70  50DE               	movf	postinc2,w,c
  2325  000A72  58E6               	subwfb	postinc1,w,c
  2326  000A74  A0D8               	btfss	status,0,c
  2327  000A76  D012               	goto	l295
  2328                           
  2329                           ;ikb.c: 631: {;ikb.c: 632: key[k].counter1 = 0;
  2330  000A78  5023               	movf	ikey_parsing@k,w,c
  2331  000A7A  0D10               	mullw	16
  2332  000A7C  50F3               	movf	prodl,w,c
  2333  000A7E  0F67               	addlw	low (_key+7)
  2334  000A80  6ED9               	movwf	fsr2l,c
  2335  000A82  6ADA               	clrf	fsr2h,c
  2336  000A84  0E00               	movlw	0
  2337  000A86  6EDE               	movwf	postinc2,c
  2338  000A88  0E00               	movlw	0
  2339  000A8A  6EDD               	movwf	postdec2,c
  2340                           
  2341                           ;ikb.c: 633: key[k].sm1 = (7);
  2342  000A8C  5023               	movf	ikey_parsing@k,w,c
  2343  000A8E  0D10               	mullw	16
  2344  000A90  50F3               	movf	prodl,w,c
  2345  000A92  0F66               	addlw	low (_key+6)
  2346  000A94  6ED9               	movwf	fsr2l,c
  2347  000A96  6ADA               	clrf	fsr2h,c
  2348  000A98  0E07               	movlw	7
  2349  000A9A  6EDF               	movwf	indf2,c
  2350  000A9C                     l295:
  2351                           
  2352                           ;ikb.c: 634: };ikb.c: 635: };ikb.c: 637: if (key[k].sm1 == (5) )
  2353  000A9C  5023               	movf	ikey_parsing@k,w,c
  2354  000A9E  0D10               	mullw	16
  2355  000AA0  50F3               	movf	prodl,w,c
  2356  000AA2  0F66               	addlw	low (_key+6)
  2357  000AA4  6ED9               	movwf	fsr2l,c
  2358  000AA6  6ADA               	clrf	fsr2h,c
  2359  000AA8  0E05               	movlw	5
  2360  000AAA  18DE               	xorwf	postinc2,w,c
  2361  000AAC  A4D8               	btfss	status,2,c
  2362  000AAE  D018               	goto	l297
  2363                           
  2364                           ;ikb.c: 638: {;ikb.c: 639: if (key[k].bf.state == 0)
  2365  000AB0  5023               	movf	ikey_parsing@k,w,c
  2366  000AB2  0D10               	mullw	16
  2367  000AB4  50F3               	movf	prodl,w,c
  2368  000AB6  0F6A               	addlw	low (_key+10)
  2369  000AB8  6ED9               	movwf	fsr2l,c
  2370  000ABA  6ADA               	clrf	fsr2h,c
  2371  000ABC  0100               	movlb	0	; () banked
  2372  000ABE  B0DF               	btfsc	indf2,0,c
  2373  000AC0  D00F               	goto	l297
  2374                           
  2375                           ; BSR set to: 0
  2376                           ;ikb.c: 640: {;ikb.c: 641: key[k].bf.ReadyToRead = 1;
  2377  000AC2  5023               	movf	ikey_parsing@k,w,c
  2378  000AC4  0D10               	mullw	16
  2379  000AC6  50F3               	movf	prodl,w,c
  2380  000AC8  0F6A               	addlw	low (_key+10)
  2381  000ACA  6ED9               	movwf	fsr2l,c
  2382  000ACC  6ADA               	clrf	fsr2h,c
  2383  000ACE  8CDF               	bsf	indf2,6,c
  2384                           
  2385                           ;ikb.c: 642: key[k].sm1 = (2);
  2386  000AD0  5023               	movf	ikey_parsing@k,w,c
  2387  000AD2  0D10               	mullw	16
  2388  000AD4  50F3               	movf	prodl,w,c
  2389  000AD6  0F66               	addlw	low (_key+6)
  2390  000AD8  6ED9               	movwf	fsr2l,c
  2391  000ADA  6ADA               	clrf	fsr2h,c
  2392  000ADC  0E02               	movlw	2
  2393  000ADE  6EDF               	movwf	indf2,c
  2394  000AE0                     l297:
  2395                           
  2396                           ;ikb.c: 643: };ikb.c: 644: };ikb.c: 646: if (key[k].sm1 == (3) )
  2397  000AE0  5023               	movf	ikey_parsing@k,w,c
  2398  000AE2  0D10               	mullw	16
  2399  000AE4  50F3               	movf	prodl,w,c
  2400  000AE6  0F66               	addlw	low (_key+6)
  2401  000AE8  6ED9               	movwf	fsr2l,c
  2402  000AEA  6ADA               	clrf	fsr2h,c
  2403  000AEC  0E03               	movlw	3
  2404  000AEE  18DE               	xorwf	postinc2,w,c
  2405  000AF0  A4D8               	btfss	status,2,c
  2406  000AF2  D09C               	goto	l299
  2407                           
  2408                           ;ikb.c: 647: {;ikb.c: 648: key[k].counter1++;
  2409  000AF4  5023               	movf	ikey_parsing@k,w,c
  2410  000AF6  0D10               	mullw	16
  2411  000AF8  50F3               	movf	prodl,w,c
  2412  000AFA  0F67               	addlw	low (_key+7)
  2413  000AFC  6ED9               	movwf	fsr2l,c
  2414  000AFE  6ADA               	clrf	fsr2h,c
  2415  000B00  2ADE               	incf	postinc2,f,c
  2416  000B02  0E00               	movlw	0
  2417  000B04  22DD               	addwfc	postdec2,f,c
  2418                           
  2419                           ;ikb.c: 650: if (key[k].bf.state == 0)
  2420  000B06  5023               	movf	ikey_parsing@k,w,c
  2421  000B08  0D10               	mullw	16
  2422  000B0A  50F3               	movf	prodl,w,c
  2423  000B0C  0F6A               	addlw	low (_key+10)
  2424  000B0E  6ED9               	movwf	fsr2l,c
  2425  000B10  6ADA               	clrf	fsr2h,c
  2426  000B12  0100               	movlb	0	; () banked
  2427  000B14  B0DF               	btfsc	indf2,0,c
  2428  000B16  D03D               	goto	l3748
  2429                           
  2430                           ; BSR set to: 0
  2431                           ;ikb.c: 651: {;ikb.c: 652: if (key[k].counter1 <= (1000E-3/5E-3) )
  2432  000B18  0E00               	movlw	0
  2433  000B1A  6E16               	movwf	___ftge@ff1,c
  2434  000B1C  0E48               	movlw	72
  2435  000B1E  6E17               	movwf	___ftge@ff1+1,c
  2436  000B20  0E43               	movlw	67
  2437  000B22  6E18               	movwf	___ftge@ff1+2,c
  2438  000B24  5023               	movf	ikey_parsing@k,w,c
  2439  000B26  0D10               	mullw	16
  2440  000B28  50F3               	movf	prodl,w,c
  2441  000B2A  0F67               	addlw	low (_key+7)
  2442  000B2C  6ED9               	movwf	fsr2l,c
  2443  000B2E  6ADA               	clrf	fsr2h,c
  2444  000B30  CFDE F013          	movff	postinc2,___lwtoft@c
  2445  000B34  CFDD F014          	movff	postdec2,___lwtoft@c+1
  2446  000B38  EC65  F00F         	call	___lwtoft	;wreg free
  2447  000B3C  C013  F019         	movff	?___lwtoft,___ftge@ff2
  2448  000B40  C014  F01A         	movff	?___lwtoft+1,___ftge@ff2+1
  2449  000B44  C015  F01B         	movff	?___lwtoft+2,___ftge@ff2+2
  2450  000B48  EC18  F00D         	call	___ftge	;wreg free
  2451  000B4C  A0D8               	btfss	status,0,c
  2452  000B4E  D021               	goto	l3748
  2453                           
  2454                           ;ikb.c: 653: {;ikb.c: 654: key[k].counter1 = 0;
  2455  000B50  5023               	movf	ikey_parsing@k,w,c
  2456  000B52  0D10               	mullw	16
  2457  000B54  50F3               	movf	prodl,w,c
  2458  000B56  0F67               	addlw	low (_key+7)
  2459  000B58  6ED9               	movwf	fsr2l,c
  2460  000B5A  6ADA               	clrf	fsr2h,c
  2461  000B5C  0E00               	movlw	0
  2462  000B5E  6EDE               	movwf	postinc2,c
  2463  000B60  0E00               	movlw	0
  2464  000B62  6EDD               	movwf	postdec2,c
  2465                           
  2466                           ;ikb.c: 656: key[k].bf.ReadyToRead = 1;
  2467  000B64  5023               	movf	ikey_parsing@k,w,c
  2468  000B66  0D10               	mullw	16
  2469  000B68  50F3               	movf	prodl,w,c
  2470  000B6A  0F6A               	addlw	low (_key+10)
  2471  000B6C  6ED9               	movwf	fsr2l,c
  2472  000B6E  6ADA               	clrf	fsr2h,c
  2473  000B70  0100               	movlb	0	; () banked
  2474  000B72  8CDF               	bsf	indf2,6,c
  2475                           
  2476                           ;ikb.c: 657: key[k].bf.AtTimeExpired_BeforeOrAfter = 0;
  2477  000B74  5023               	movf	ikey_parsing@k,w,c
  2478  000B76  0D10               	mullw	16
  2479  000B78  50F3               	movf	prodl,w,c
  2480  000B7A  0F6A               	addlw	low (_key+10)
  2481  000B7C  6ED9               	movwf	fsr2l,c
  2482  000B7E  6ADA               	clrf	fsr2h,c
  2483  000B80  9EDF               	bcf	indf2,7,c
  2484                           
  2485                           ;ikb.c: 659: key[k].sm1 = (2);
  2486  000B82  5023               	movf	ikey_parsing@k,w,c
  2487  000B84  0D10               	mullw	16
  2488  000B86  50F3               	movf	prodl,w,c
  2489  000B88  0F66               	addlw	low (_key+6)
  2490  000B8A  6ED9               	movwf	fsr2l,c
  2491  000B8C  6ADA               	clrf	fsr2h,c
  2492  000B8E  0E02               	movlw	2
  2493  000B90  6EDF               	movwf	indf2,c
  2494  000B92                     l3748:
  2495                           
  2496                           ;ikb.c: 660: };ikb.c: 661: };ikb.c: 663: if (key[k].counter1 > (1000E-3/5E-3) )
  2497  000B92  0E00               	movlw	0
  2498  000B94  6E16               	movwf	___ftge@ff1,c
  2499  000B96  0E48               	movlw	72
  2500  000B98  6E17               	movwf	___ftge@ff1+1,c
  2501  000B9A  0E43               	movlw	67
  2502  000B9C  6E18               	movwf	___ftge@ff1+2,c
  2503  000B9E  5023               	movf	ikey_parsing@k,w,c
  2504  000BA0  0D10               	mullw	16
  2505  000BA2  50F3               	movf	prodl,w,c
  2506  000BA4  0F67               	addlw	low (_key+7)
  2507  000BA6  6ED9               	movwf	fsr2l,c
  2508  000BA8  6ADA               	clrf	fsr2h,c
  2509  000BAA  CFDE F013          	movff	postinc2,___lwtoft@c
  2510  000BAE  CFDD F014          	movff	postdec2,___lwtoft@c+1
  2511  000BB2  EC65  F00F         	call	___lwtoft	;wreg free
  2512  000BB6  C013  F019         	movff	?___lwtoft,___ftge@ff2
  2513  000BBA  C014  F01A         	movff	?___lwtoft+1,___ftge@ff2+1
  2514  000BBE  C015  F01B         	movff	?___lwtoft+2,___ftge@ff2+2
  2515  000BC2  EC18  F00D         	call	___ftge	;wreg free
  2516  000BC6  B0D8               	btfsc	status,0,c
  2517  000BC8  D031               	goto	l299
  2518                           
  2519                           ;ikb.c: 664: {;ikb.c: 665: key[k].counter1 = 0x0000;
  2520  000BCA  5023               	movf	ikey_parsing@k,w,c
  2521  000BCC  0D10               	mullw	16
  2522  000BCE  50F3               	movf	prodl,w,c
  2523  000BD0  0F67               	addlw	low (_key+7)
  2524  000BD2  6ED9               	movwf	fsr2l,c
  2525  000BD4  6ADA               	clrf	fsr2h,c
  2526  000BD6  0E00               	movlw	0
  2527  000BD8  6EDE               	movwf	postinc2,c
  2528  000BDA  0E00               	movlw	0
  2529  000BDC  6EDD               	movwf	postdec2,c
  2530                           
  2531                           ;ikb.c: 667: key[k].bf.ReadyToRead = 1;
  2532  000BDE  5023               	movf	ikey_parsing@k,w,c
  2533  000BE0  0D10               	mullw	16
  2534  000BE2  50F3               	movf	prodl,w,c
  2535  000BE4  0F6A               	addlw	low (_key+10)
  2536  000BE6  6ED9               	movwf	fsr2l,c
  2537  000BE8  6ADA               	clrf	fsr2h,c
  2538  000BEA  0100               	movlb	0	; () banked
  2539  000BEC  8CDF               	bsf	indf2,6,c
  2540                           
  2541                           ;ikb.c: 668: key[k].bf.AtTimeExpired_BeforeOrAfter = 1;
  2542  000BEE  5023               	movf	ikey_parsing@k,w,c
  2543  000BF0  0D10               	mullw	16
  2544  000BF2  50F3               	movf	prodl,w,c
  2545  000BF4  0F6A               	addlw	low (_key+10)
  2546  000BF6  6ED9               	movwf	fsr2l,c
  2547  000BF8  6ADA               	clrf	fsr2h,c
  2548  000BFA  8EDF               	bsf	indf2,7,c
  2549                           
  2550                           ;ikb.c: 670: if (!key[k].bf.Reptt)
  2551  000BFC  5023               	movf	ikey_parsing@k,w,c
  2552  000BFE  0D10               	mullw	16
  2553  000C00  50F3               	movf	prodl,w,c
  2554  000C02  0F6A               	addlw	low (_key+10)
  2555  000C04  6ED9               	movwf	fsr2l,c
  2556  000C06  6ADA               	clrf	fsr2h,c
  2557  000C08  BADF               	btfsc	indf2,5,c
  2558  000C0A  D008               	goto	l3754
  2559                           
  2560                           ; BSR set to: 0
  2561                           ;ikb.c: 671: {;ikb.c: 672: key[k].sm1 = (1);
  2562  000C0C  5023               	movf	ikey_parsing@k,w,c
  2563  000C0E  0D10               	mullw	16
  2564  000C10  50F3               	movf	prodl,w,c
  2565  000C12  0F66               	addlw	low (_key+6)
  2566  000C14  6ED9               	movwf	fsr2l,c
  2567  000C16  6ADA               	clrf	fsr2h,c
  2568  000C18  0E01               	movlw	1
  2569  000C1A  D007               	goto	L3
  2570  000C1C                     l3754:
  2571                           
  2572                           ; BSR set to: 0
  2573                           ;ikb.c: 674: else;ikb.c: 675: {;ikb.c: 676: key[k].sm1 = (8);
  2574  000C1C  5023               	movf	ikey_parsing@k,w,c
  2575  000C1E  0D10               	mullw	16
  2576  000C20  50F3               	movf	prodl,w,c
  2577  000C22  0F66               	addlw	low (_key+6)
  2578  000C24  6ED9               	movwf	fsr2l,c
  2579  000C26  6ADA               	clrf	fsr2h,c
  2580  000C28  0E08               	movlw	8
  2581  000C2A                     L3:
  2582  000C2A  6EDF               	movwf	indf2,c
  2583  000C2C                     l299:
  2584                           
  2585                           ;ikb.c: 677: };ikb.c: 678: };ikb.c: 679: };ikb.c: 684: if (key[k].sm1 == (4))
  2586  000C2C  5023               	movf	ikey_parsing@k,w,c
  2587  000C2E  0D10               	mullw	16
  2588  000C30  50F3               	movf	prodl,w,c
  2589  000C32  0F66               	addlw	low (_key+6)
  2590  000C34  6ED9               	movwf	fsr2l,c
  2591  000C36  6ADA               	clrf	fsr2h,c
  2592  000C38  0E04               	movlw	4
  2593  000C3A  18DE               	xorwf	postinc2,w,c
  2594  000C3C  A4D8               	btfss	status,2,c
  2595  000C3E  D08C               	goto	l305
  2596                           
  2597                           ;ikb.c: 685: {;ikb.c: 686: key[k].counter1++;
  2598  000C40  5023               	movf	ikey_parsing@k,w,c
  2599  000C42  0D10               	mullw	16
  2600  000C44  50F3               	movf	prodl,w,c
  2601  000C46  0F67               	addlw	low (_key+7)
  2602  000C48  6ED9               	movwf	fsr2l,c
  2603  000C4A  6ADA               	clrf	fsr2h,c
  2604  000C4C  2ADE               	incf	postinc2,f,c
  2605  000C4E  0E00               	movlw	0
  2606  000C50  22DD               	addwfc	postdec2,f,c
  2607                           
  2608                           ;ikb.c: 688: if (key[k].bf.state == 0)
  2609  000C52  5023               	movf	ikey_parsing@k,w,c
  2610  000C54  0D10               	mullw	16
  2611  000C56  50F3               	movf	prodl,w,c
  2612  000C58  0F6A               	addlw	low (_key+10)
  2613  000C5A  6ED9               	movwf	fsr2l,c
  2614  000C5C  6ADA               	clrf	fsr2h,c
  2615  000C5E  0100               	movlb	0	; () banked
  2616  000C60  B0DF               	btfsc	indf2,0,c
  2617  000C62  D03D               	goto	l3762
  2618                           
  2619                           ; BSR set to: 0
  2620                           ;ikb.c: 689: {;ikb.c: 690: if (key[k].counter1 <= (1000E-3/5E-3))
  2621  000C64  0E00               	movlw	0
  2622  000C66  6E16               	movwf	___ftge@ff1,c
  2623  000C68  0E48               	movlw	72
  2624  000C6A  6E17               	movwf	___ftge@ff1+1,c
  2625  000C6C  0E43               	movlw	67
  2626  000C6E  6E18               	movwf	___ftge@ff1+2,c
  2627  000C70  5023               	movf	ikey_parsing@k,w,c
  2628  000C72  0D10               	mullw	16
  2629  000C74  50F3               	movf	prodl,w,c
  2630  000C76  0F67               	addlw	low (_key+7)
  2631  000C78  6ED9               	movwf	fsr2l,c
  2632  000C7A  6ADA               	clrf	fsr2h,c
  2633  000C7C  CFDE F013          	movff	postinc2,___lwtoft@c
  2634  000C80  CFDD F014          	movff	postdec2,___lwtoft@c+1
  2635  000C84  EC65  F00F         	call	___lwtoft	;wreg free
  2636  000C88  C013  F019         	movff	?___lwtoft,___ftge@ff2
  2637  000C8C  C014  F01A         	movff	?___lwtoft+1,___ftge@ff2+1
  2638  000C90  C015  F01B         	movff	?___lwtoft+2,___ftge@ff2+2
  2639  000C94  EC18  F00D         	call	___ftge	;wreg free
  2640  000C98  A0D8               	btfss	status,0,c
  2641  000C9A  D021               	goto	l3762
  2642                           
  2643                           ;ikb.c: 691: {;ikb.c: 692: key[k].counter1 = 0;
  2644  000C9C  5023               	movf	ikey_parsing@k,w,c
  2645  000C9E  0D10               	mullw	16
  2646  000CA0  50F3               	movf	prodl,w,c
  2647  000CA2  0F67               	addlw	low (_key+7)
  2648  000CA4  6ED9               	movwf	fsr2l,c
  2649  000CA6  6ADA               	clrf	fsr2h,c
  2650  000CA8  0E00               	movlw	0
  2651  000CAA  6EDE               	movwf	postinc2,c
  2652  000CAC  0E00               	movlw	0
  2653  000CAE  6EDD               	movwf	postdec2,c
  2654                           
  2655                           ;ikb.c: 694: key[k].bf.ReadyToRead = 1;
  2656  000CB0  5023               	movf	ikey_parsing@k,w,c
  2657  000CB2  0D10               	mullw	16
  2658  000CB4  50F3               	movf	prodl,w,c
  2659  000CB6  0F6A               	addlw	low (_key+10)
  2660  000CB8  6ED9               	movwf	fsr2l,c
  2661  000CBA  6ADA               	clrf	fsr2h,c
  2662  000CBC  0100               	movlb	0	; () banked
  2663  000CBE  8CDF               	bsf	indf2,6,c
  2664                           
  2665                           ;ikb.c: 695: key[k].bf.AtTimeExpired_BeforeOrAfter = 0;
  2666  000CC0  5023               	movf	ikey_parsing@k,w,c
  2667  000CC2  0D10               	mullw	16
  2668  000CC4  50F3               	movf	prodl,w,c
  2669  000CC6  0F6A               	addlw	low (_key+10)
  2670  000CC8  6ED9               	movwf	fsr2l,c
  2671  000CCA  6ADA               	clrf	fsr2h,c
  2672  000CCC  9EDF               	bcf	indf2,7,c
  2673                           
  2674                           ;ikb.c: 697: key[k].sm1 = (2);
  2675  000CCE  5023               	movf	ikey_parsing@k,w,c
  2676  000CD0  0D10               	mullw	16
  2677  000CD2  50F3               	movf	prodl,w,c
  2678  000CD4  0F66               	addlw	low (_key+6)
  2679  000CD6  6ED9               	movwf	fsr2l,c
  2680  000CD8  6ADA               	clrf	fsr2h,c
  2681  000CDA  0E02               	movlw	2
  2682  000CDC  6EDF               	movwf	indf2,c
  2683  000CDE                     l3762:
  2684                           
  2685                           ;ikb.c: 698: };ikb.c: 699: };ikb.c: 702: if (key[k].counter1 >= (3000E-3/5E-3))
  2686  000CDE  5023               	movf	ikey_parsing@k,w,c
  2687  000CE0  0D10               	mullw	16
  2688  000CE2  50F3               	movf	prodl,w,c
  2689  000CE4  0F67               	addlw	low (_key+7)
  2690  000CE6  6ED9               	movwf	fsr2l,c
  2691  000CE8  6ADA               	clrf	fsr2h,c
  2692  000CEA  CFDE F013          	movff	postinc2,___lwtoft@c
  2693  000CEE  CFDD F014          	movff	postdec2,___lwtoft@c+1
  2694  000CF2  EC65  F00F         	call	___lwtoft	;wreg free
  2695  000CF6  C013  F016         	movff	?___lwtoft,___ftge@ff1
  2696  000CFA  C014  F017         	movff	?___lwtoft+1,___ftge@ff1+1
  2697  000CFE  C015  F018         	movff	?___lwtoft+2,___ftge@ff1+2
  2698  000D02  0E00               	movlw	0
  2699  000D04  6E19               	movwf	___ftge@ff2,c
  2700  000D06  0E16               	movlw	22
  2701  000D08  6E1A               	movwf	___ftge@ff2+1,c
  2702  000D0A  0E44               	movlw	68
  2703  000D0C  6E1B               	movwf	___ftge@ff2+2,c
  2704  000D0E  EC18  F00D         	call	___ftge	;wreg free
  2705  000D12  A0D8               	btfss	status,0,c
  2706  000D14  D021               	goto	l305
  2707                           
  2708                           ;ikb.c: 703: {;ikb.c: 704: key[k].counter1 = 0x0000;
  2709  000D16  5023               	movf	ikey_parsing@k,w,c
  2710  000D18  0D10               	mullw	16
  2711  000D1A  50F3               	movf	prodl,w,c
  2712  000D1C  0F67               	addlw	low (_key+7)
  2713  000D1E  6ED9               	movwf	fsr2l,c
  2714  000D20  6ADA               	clrf	fsr2h,c
  2715  000D22  0E00               	movlw	0
  2716  000D24  6EDE               	movwf	postinc2,c
  2717  000D26  0E00               	movlw	0
  2718  000D28  6EDD               	movwf	postdec2,c
  2719                           
  2720                           ;ikb.c: 706: key[k].bf.ReadyToRead = 1;
  2721  000D2A  5023               	movf	ikey_parsing@k,w,c
  2722  000D2C  0D10               	mullw	16
  2723  000D2E  50F3               	movf	prodl,w,c
  2724  000D30  0F6A               	addlw	low (_key+10)
  2725  000D32  6ED9               	movwf	fsr2l,c
  2726  000D34  6ADA               	clrf	fsr2h,c
  2727  000D36  0100               	movlb	0	; () banked
  2728  000D38  8CDF               	bsf	indf2,6,c
  2729                           
  2730                           ;ikb.c: 707: key[k].bf.AtTimeExpired_BeforeOrAfter = 1;
  2731  000D3A  5023               	movf	ikey_parsing@k,w,c
  2732  000D3C  0D10               	mullw	16
  2733  000D3E  50F3               	movf	prodl,w,c
  2734  000D40  0F6A               	addlw	low (_key+10)
  2735  000D42  6ED9               	movwf	fsr2l,c
  2736  000D44  6ADA               	clrf	fsr2h,c
  2737  000D46  8EDF               	bsf	indf2,7,c
  2738                           
  2739                           ;ikb.c: 710: key[k].sm1 = (1);
  2740  000D48  5023               	movf	ikey_parsing@k,w,c
  2741  000D4A  0D10               	mullw	16
  2742  000D4C  50F3               	movf	prodl,w,c
  2743  000D4E  0F66               	addlw	low (_key+6)
  2744  000D50  6ED9               	movwf	fsr2l,c
  2745  000D52  6ADA               	clrf	fsr2h,c
  2746  000D54  0E01               	movlw	1
  2747  000D56  6EDF               	movwf	indf2,c
  2748  000D58                     l305:
  2749                           
  2750                           ;ikb.c: 711: };ikb.c: 712: };ikb.c: 715: if (key[k].sm1 == (1))
  2751  000D58  5023               	movf	ikey_parsing@k,w,c
  2752  000D5A  0D10               	mullw	16
  2753  000D5C  50F3               	movf	prodl,w,c
  2754  000D5E  0F66               	addlw	low (_key+6)
  2755  000D60  6ED9               	movwf	fsr2l,c
  2756  000D62  6ADA               	clrf	fsr2h,c
  2757  000D64  04DE               	decf	postinc2,w,c
  2758  000D66  A4D8               	btfss	status,2,c
  2759  000D68  D011               	goto	l309
  2760                           
  2761                           ;ikb.c: 716: {;ikb.c: 717: if (key[k].bf.state == 0)
  2762  000D6A  5023               	movf	ikey_parsing@k,w,c
  2763  000D6C  0D10               	mullw	16
  2764  000D6E  50F3               	movf	prodl,w,c
  2765  000D70  0F6A               	addlw	low (_key+10)
  2766  000D72  6ED9               	movwf	fsr2l,c
  2767  000D74  6ADA               	clrf	fsr2h,c
  2768  000D76  0100               	movlb	0	; () banked
  2769  000D78  B0DF               	btfsc	indf2,0,c
  2770  000D7A  D008               	goto	l309
  2771                           
  2772                           ; BSR set to: 0
  2773                           ;ikb.c: 718: {;ikb.c: 719: key[k].sm1 = (2);
  2774  000D7C  5023               	movf	ikey_parsing@k,w,c
  2775  000D7E  0D10               	mullw	16
  2776  000D80  50F3               	movf	prodl,w,c
  2777  000D82  0F66               	addlw	low (_key+6)
  2778  000D84  6ED9               	movwf	fsr2l,c
  2779  000D86  6ADA               	clrf	fsr2h,c
  2780  000D88  0E02               	movlw	2
  2781  000D8A  6EDF               	movwf	indf2,c
  2782  000D8C                     l309:
  2783                           
  2784                           ;ikb.c: 720: };ikb.c: 721: };ikb.c: 723: if (key[k].sm1 == (2))
  2785  000D8C  5023               	movf	ikey_parsing@k,w,c
  2786  000D8E  0D10               	mullw	16
  2787  000D90  50F3               	movf	prodl,w,c
  2788  000D92  0F66               	addlw	low (_key+6)
  2789  000D94  6ED9               	movwf	fsr2l,c
  2790  000D96  6ADA               	clrf	fsr2h,c
  2791  000D98  0E02               	movlw	2
  2792  000D9A  18DE               	xorwf	postinc2,w,c
  2793  000D9C  A4D8               	btfss	status,2,c
  2794  000D9E  D011               	goto	l311
  2795                           
  2796                           ;ikb.c: 724: {;ikb.c: 725: if (key[k].bf.ReadyToRead == 0)
  2797  000DA0  5023               	movf	ikey_parsing@k,w,c
  2798  000DA2  0D10               	mullw	16
  2799  000DA4  50F3               	movf	prodl,w,c
  2800  000DA6  0F6A               	addlw	low (_key+10)
  2801  000DA8  6ED9               	movwf	fsr2l,c
  2802  000DAA  6ADA               	clrf	fsr2h,c
  2803  000DAC  0100               	movlb	0	; () banked
  2804  000DAE  BCDF               	btfsc	indf2,6,c
  2805  000DB0  D008               	goto	l311
  2806                           
  2807                           ; BSR set to: 0
  2808                           ;ikb.c: 726: {;ikb.c: 727: key[k].sm1 = (9);
  2809  000DB2  5023               	movf	ikey_parsing@k,w,c
  2810  000DB4  0D10               	mullw	16
  2811  000DB6  50F3               	movf	prodl,w,c
  2812  000DB8  0F66               	addlw	low (_key+6)
  2813  000DBA  6ED9               	movwf	fsr2l,c
  2814  000DBC  6ADA               	clrf	fsr2h,c
  2815  000DBE  0E09               	movlw	9
  2816  000DC0  6EDF               	movwf	indf2,c
  2817  000DC2                     l311:
  2818                           
  2819                           ;ikb.c: 728: };ikb.c: 729: };ikb.c: 731: if (key[k].sm1 == (9))
  2820  000DC2  5023               	movf	ikey_parsing@k,w,c
  2821  000DC4  0D10               	mullw	16
  2822  000DC6  50F3               	movf	prodl,w,c
  2823  000DC8  0F66               	addlw	low (_key+6)
  2824  000DCA  6ED9               	movwf	fsr2l,c
  2825  000DCC  6ADA               	clrf	fsr2h,c
  2826  000DCE  0E09               	movlw	9
  2827  000DD0  18DE               	xorwf	postinc2,w,c
  2828  000DD2  A4D8               	btfss	status,2,c
  2829  000DD4  D02F               	goto	l3778
  2830                           
  2831                           ;ikb.c: 732: {;ikb.c: 733: if (key[k].num_group_x > 0)
  2832  000DD6  5023               	movf	ikey_parsing@k,w,c
  2833  000DD8  0D10               	mullw	16
  2834  000DDA  50F3               	movf	prodl,w,c
  2835  000DDC  0F69               	addlw	low (_key+9)
  2836  000DDE  6ED9               	movwf	fsr2l,c
  2837  000DE0  6ADA               	clrf	fsr2h,c
  2838  000DE2  50DF               	movf	indf2,w,c
  2839  000DE4  B4D8               	btfsc	status,2,c
  2840  000DE6  D016               	goto	l314
  2841                           
  2842                           ;ikb.c: 734: {;ikb.c: 735: group_x[key[k].num_group_x] = 0;
  2843  000DE8  5023               	movf	ikey_parsing@k,w,c
  2844  000DEA  0D10               	mullw	16
  2845  000DEC  50F3               	movf	prodl,w,c
  2846  000DEE  0F69               	addlw	low (_key+9)
  2847  000DF0  6ED9               	movwf	fsr2l,c
  2848  000DF2  6ADA               	clrf	fsr2h,c
  2849  000DF4  50DF               	movf	indf2,w,c
  2850  000DF6  6E1F               	movwf	??_ikey_parsing& (0+255),c
  2851  000DF8  501F               	movf	??_ikey_parsing,w,c
  2852  000DFA  0FB0               	addlw	low _group_x
  2853  000DFC  6ED9               	movwf	fsr2l,c
  2854  000DFE  6ADA               	clrf	fsr2h,c
  2855  000E00  0E00               	movlw	0
  2856  000E02  6EDF               	movwf	indf2,c
  2857                           
  2858                           ;ikb.c: 736: key[k].bf.OwnerOfGroup = 0;
  2859  000E04  5023               	movf	ikey_parsing@k,w,c
  2860  000E06  0D10               	mullw	16
  2861  000E08  50F3               	movf	prodl,w,c
  2862  000E0A  0F6B               	addlw	low (_key+11)
  2863  000E0C  6ED9               	movwf	fsr2l,c
  2864  000E0E  6ADA               	clrf	fsr2h,c
  2865  000E10  0100               	movlb	0	; () banked
  2866  000E12  90DF               	bcf	indf2,0,c
  2867  000E14                     l314:
  2868                           
  2869                           ;ikb.c: 737: };ikb.c: 739: key[k].sm1 = (0);
  2870  000E14  5023               	movf	ikey_parsing@k,w,c
  2871  000E16  0D10               	mullw	16
  2872  000E18  50F3               	movf	prodl,w,c
  2873  000E1A  0F66               	addlw	low (_key+6)
  2874  000E1C  6ED9               	movwf	fsr2l,c
  2875  000E1E  6ADA               	clrf	fsr2h,c
  2876  000E20  0E00               	movlw	0
  2877  000E22  6EDF               	movwf	indf2,c
  2878                           
  2879                           ;ikb.c: 742: key[k].bf.InProcessing = 0;
  2880  000E24  5023               	movf	ikey_parsing@k,w,c
  2881  000E26  0D10               	mullw	16
  2882  000E28  50F3               	movf	prodl,w,c
  2883  000E2A  0F6B               	addlw	low (_key+11)
  2884  000E2C  6ED9               	movwf	fsr2l,c
  2885  000E2E  6ADA               	clrf	fsr2h,c
  2886  000E30  0100               	movlb	0	; () banked
  2887  000E32  92DF               	bcf	indf2,1,c
  2888  000E34                     l3778:
  2889  000E34  2A23               	incf	ikey_parsing@k,f,c
  2890  000E36  0E04               	movlw	4
  2891  000E38  6423               	cpfsgt	ikey_parsing@k,c
  2892  000E3A  D4EB               	goto	l3692
  2893  000E3C  0012               	return	
  2894  000E3E                     __end_of_ikey_parsing:
  2895                           	opt callstack 0
  2896                           
  2897 ;; *************** function _ikey_is_accessible *****************
  2898 ;; Defined at:
  2899 ;;		line 510 in file "../../../../../../FIRWAR/eslibrary/ikb/ikb.c"
  2900 ;; Parameters:    Size  Location     Type
  2901 ;;  k               1    wreg     unsigned char 
  2902 ;; Auto vars:     Size  Location     Type
  2903 ;;  k               1   12[COMRAM] unsigned char 
  2904 ;; Return value:  Size  Location     Type
  2905 ;;                  1    wreg      unsigned char 
  2906 ;; Registers used:
  2907 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  2908 ;; Tracked objects:
  2909 ;;		On entry : 0/0
  2910 ;;		On exit  : 0/0
  2911 ;;		Unchanged: 0/0
  2912 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2913 ;;      Params:         0       0       0       0       0       0       0       0       0
  2914 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2915 ;;      Temps:          2       0       0       0       0       0       0       0       0
  2916 ;;      Totals:         3       0       0       0       0       0       0       0       0
  2917 ;;Total ram usage:        3 bytes
  2918 ;; Hardware stack levels used:    1
  2919 ;; Hardware stack levels required when called:    5
  2920 ;; This function calls:
  2921 ;;		Nothing
  2922 ;; This function is called by:
  2923 ;;		_ikey_parsing
  2924 ;; This function uses a non-reentrant model
  2925 ;;
  2926                           
  2927                           	psect	text12
  2928  001C76                     __ptext12:
  2929                           	opt callstack 0
  2930  001C76                     _ikey_is_accessible:
  2931                           	opt callstack 23
  2932                           
  2933                           ;incstack = 0
  2934                           ;ikey_is_accessible@k stored from wreg
  2935  001C76  6E0D               	movwf	ikey_is_accessible@k,c
  2936                           
  2937                           ;ikb.c: 512: if (key[k].num_group_x != 0)
  2938  001C78  500D               	movf	ikey_is_accessible@k,w,c
  2939  001C7A  0D10               	mullw	16
  2940  001C7C  50F3               	movf	prodl,w,c
  2941  001C7E  0F69               	addlw	low (_key+9)
  2942  001C80  6ED9               	movwf	fsr2l,c
  2943  001C82  6ADA               	clrf	fsr2h,c
  2944  001C84  50DF               	movf	indf2,w,c
  2945  001C86  B4D8               	btfsc	status,2,c
  2946  001C88  D01A               	goto	l2588
  2947                           
  2948                           ;ikb.c: 513: {;ikb.c: 515: if (group_x[key[k].num_group_x] == 1)
  2949  001C8A  500D               	movf	ikey_is_accessible@k,w,c
  2950  001C8C  0D10               	mullw	16
  2951  001C8E  50F3               	movf	prodl,w,c
  2952  001C90  0F69               	addlw	low (_key+9)
  2953  001C92  6ED9               	movwf	fsr2l,c
  2954  001C94  6ADA               	clrf	fsr2h,c
  2955  001C96  50DF               	movf	indf2,w,c
  2956  001C98  6E0B               	movwf	??_ikey_is_accessible& (0+255),c
  2957  001C9A  500B               	movf	??_ikey_is_accessible,w,c
  2958  001C9C  0FB0               	addlw	low _group_x
  2959  001C9E  6ED9               	movwf	fsr2l,c
  2960  001CA0  6ADA               	clrf	fsr2h,c
  2961  001CA2  04DE               	decf	postinc2,w,c
  2962  001CA4  A4D8               	btfss	status,2,c
  2963  001CA6  D00B               	goto	l2588
  2964                           
  2965                           ;ikb.c: 516: {;ikb.c: 518: if ( !key[k].bf.OwnerOfGroup)
  2966  001CA8  500D               	movf	ikey_is_accessible@k,w,c
  2967  001CAA  0D10               	mullw	16
  2968  001CAC  50F3               	movf	prodl,w,c
  2969  001CAE  0F6B               	addlw	low (_key+11)
  2970  001CB0  6ED9               	movwf	fsr2l,c
  2971  001CB2  6ADA               	clrf	fsr2h,c
  2972  001CB4  0100               	movlb	0	; () banked
  2973  001CB6  B0DF               	btfsc	indf2,0,c
  2974  001CB8  D002               	goto	l2588
  2975                           
  2976                           ; BSR set to: 0
  2977                           ;ikb.c: 519: {;ikb.c: 520: return 0;
  2978  001CBA  0E00               	movlw	0
  2979  001CBC  0012               	return	
  2980  001CBE                     l2588:
  2981                           
  2982                           ;ikb.c: 521: };ikb.c: 522: };ikb.c: 523: };ikb.c: 524: return 1;
  2983  001CBE  0E01               	movlw	1
  2984  001CC0  0012               	return		;funcret
  2985  001CC2                     __end_of_ikey_is_accessible:
  2986                           	opt callstack 0
  2987                           
  2988 ;; *************** function ___lwtoft *****************
  2989 ;; Defined at:
  2990 ;;		line 28 in file "/opt/microchip/xc8/v2.05/pic/sources/c90/common/lwtoft.c"
  2991 ;; Parameters:    Size  Location     Type
  2992 ;;  c               2   18[COMRAM] unsigned int 
  2993 ;; Auto vars:     Size  Location     Type
  2994 ;;		None
  2995 ;; Return value:  Size  Location     Type
  2996 ;;                  3   18[COMRAM] float 
  2997 ;; Registers used:
  2998 ;;		wreg, status,2, status,0, cstack
  2999 ;; Tracked objects:
  3000 ;;		On entry : 0/0
  3001 ;;		On exit  : 0/0
  3002 ;;		Unchanged: 0/0
  3003 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3004 ;;      Params:         3       0       0       0       0       0       0       0       0
  3005 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3006 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3007 ;;      Totals:         3       0       0       0       0       0       0       0       0
  3008 ;;Total ram usage:        3 bytes
  3009 ;; Hardware stack levels used:    1
  3010 ;; Hardware stack levels required when called:    6
  3011 ;; This function calls:
  3012 ;;		___ftpack
  3013 ;; This function is called by:
  3014 ;;		_ikey_parsing
  3015 ;; This function uses a non-reentrant model
  3016 ;;
  3017                           
  3018                           	psect	text13
  3019  001ECA                     __ptext13:
  3020                           	opt callstack 0
  3021  001ECA                     ___lwtoft:
  3022                           	opt callstack 22
  3023                           
  3024                           ;incstack = 0
  3025  001ECA  C013  F00B         	movff	___lwtoft@c,___ftpack@arg
  3026  001ECE  C014  F00C         	movff	___lwtoft@c+1,___ftpack@arg+1
  3027  001ED2  6A0D               	clrf	___ftpack@arg+2,c
  3028  001ED4  0E8E               	movlw	142
  3029  001ED6  6E0E               	movwf	___ftpack@exp,c
  3030  001ED8  0E00               	movlw	0
  3031  001EDA  6E0F               	movwf	___ftpack@sign,c
  3032  001EDC  ECAA  F00B         	call	___ftpack	;wreg free
  3033  001EE0  C00B  F013         	movff	?___ftpack,?___lwtoft
  3034  001EE4  C00C  F014         	movff	?___ftpack+1,?___lwtoft+1
  3035  001EE8  C00D  F015         	movff	?___ftpack+2,?___lwtoft+2
  3036  001EEC  0012               	return		;funcret
  3037  001EEE                     __end_of___lwtoft:
  3038                           	opt callstack 0
  3039                           
  3040 ;; *************** function _ikb_init *****************
  3041 ;; Defined at:
  3042 ;;		line 217 in file "../../../../../../FIRWAR/eslibrary/ikb/ikb.c"
  3043 ;; Parameters:    Size  Location     Type
  3044 ;;		None
  3045 ;; Auto vars:     Size  Location     Type
  3046 ;;  i               1   10[COMRAM] char 
  3047 ;; Return value:  Size  Location     Type
  3048 ;;                  1    wreg      void 
  3049 ;; Registers used:
  3050 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  3051 ;; Tracked objects:
  3052 ;;		On entry : 0/0
  3053 ;;		On exit  : 3F/0
  3054 ;;		Unchanged: 0/0
  3055 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3056 ;;      Params:         0       0       0       0       0       0       0       0       0
  3057 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3058 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3059 ;;      Totals:         1       0       0       0       0       0       0       0       0
  3060 ;;Total ram usage:        1 bytes
  3061 ;; Hardware stack levels used:    1
  3062 ;; Hardware stack levels required when called:    5
  3063 ;; This function calls:
  3064 ;;		Nothing
  3065 ;; This function is called by:
  3066 ;;		_main
  3067 ;; This function uses a non-reentrant model
  3068 ;;
  3069                           
  3070                           	psect	text14
  3071  00169E                     __ptext14:
  3072                           	opt callstack 0
  3073  00169E                     _ikb_init:
  3074                           	opt callstack 25
  3075                           
  3076                           ;incstack = 0
  3077                           ;ikb.c: 219: int8_t i;;ikb.c: 389: do{TRISC |= 1<<4;}while(0);
  3078  00169E  8894               	bsf	3988,4,c	;volatile
  3079                           
  3080                           ;ikb.c: 390: do{TRISC |= 1<<5;}while(0);
  3081  0016A0  8A94               	bsf	3988,5,c	;volatile
  3082                           
  3083                           ;ikb.c: 391: do{TRISC |= 1<<6;}while(0);
  3084  0016A2  8C94               	bsf	3988,6,c	;volatile
  3085                           
  3086                           ;ikb.c: 392: do{TRISC |= 1<<7;}while(0);
  3087  0016A4  8E94               	bsf	3988,7,c	;volatile
  3088                           
  3089                           ;ikb.c: 393: do{TRISD |= 1<<4;}while(0);
  3090  0016A6  8895               	bsf	3989,4,c	;volatile
  3091                           
  3092                           ;ikb.c: 394: key[0].keyRead = keyRead_pin_key1;
  3093  0016A8  0EB4               	movlw	low _keyRead_pin_key1
  3094  0016AA  0100               	movlb	0	; () banked
  3095  0016AC  6F60               	movwf	_key& (0+255),b	;volatile
  3096  0016AE  0E1F               	movlw	high _keyRead_pin_key1
  3097  0016B0  6F61               	movwf	(_key+1)& (0+255),b	;volatile
  3098                           
  3099                           ; BSR set to: 0
  3100                           ;ikb.c: 395: key[1].keyRead = keyRead_pin_key2;
  3101  0016B2  0E78               	movlw	low _keyRead_pin_key2
  3102  0016B4  6F70               	movwf	(_key+16)& (0+255),b	;volatile
  3103  0016B6  0E1F               	movlw	high _keyRead_pin_key2
  3104  0016B8  6F71               	movwf	(_key+17)& (0+255),b	;volatile
  3105                           
  3106                           ; BSR set to: 0
  3107                           ;ikb.c: 396: key[2].keyRead = keyRead_pin_key3;
  3108  0016BA  0E6E               	movlw	low _keyRead_pin_key3
  3109  0016BC  6F80               	movwf	(_key+32)& (0+255),b	;volatile
  3110  0016BE  0E1F               	movlw	high _keyRead_pin_key3
  3111  0016C0  6F81               	movwf	(_key+33)& (0+255),b	;volatile
  3112                           
  3113                           ; BSR set to: 0
  3114                           ;ikb.c: 397: key[3].keyRead = keyRead_pin_key4;
  3115  0016C2  0EC4               	movlw	low _keyRead_pin_key4
  3116  0016C4  6F90               	movwf	(_key+48)& (0+255),b	;volatile
  3117  0016C6  0E1F               	movlw	high _keyRead_pin_key4
  3118  0016C8  6F91               	movwf	(_key+49)& (0+255),b	;volatile
  3119                           
  3120                           ; BSR set to: 0
  3121                           ;ikb.c: 398: key[4].keyRead = keyRead_pin_key5;
  3122  0016CA  0EBC               	movlw	low _keyRead_pin_key5
  3123  0016CC  6FA0               	movwf	(_key+64)& (0+255),b	;volatile
  3124  0016CE  0E1F               	movlw	high _keyRead_pin_key5
  3125  0016D0  6FA1               	movwf	(_key+65)& (0+255),b	;volatile
  3126                           
  3127                           ; BSR set to: 0
  3128                           ;ikb.c: 401: for (i=0; i<5; i++)
  3129  0016D2  0E00               	movlw	0
  3130  0016D4  6E0B               	movwf	ikb_init@i,c
  3131  0016D6                     l3118:
  3132                           
  3133                           ; BSR set to: 0
  3134                           ;ikb.c: 402: {;ikb.c: 403: key[i].bf.OnKeyPressed = 1;
  3135  0016D6  500B               	movf	ikb_init@i,w,c
  3136  0016D8  0D10               	mullw	16
  3137  0016DA  50F3               	movf	prodl,w,c
  3138  0016DC  0F6A               	addlw	low (_key+10)
  3139  0016DE  6ED9               	movwf	fsr2l,c
  3140  0016E0  6ADA               	clrf	fsr2h,c
  3141  0016E2  82DF               	bsf	indf2,1,c
  3142                           
  3143                           ;ikb.c: 404: key[i].bf.OnKeyPressedAndKeyRelease = 0;
  3144  0016E4  500B               	movf	ikb_init@i,w,c
  3145  0016E6  0D10               	mullw	16
  3146  0016E8  50F3               	movf	prodl,w,c
  3147  0016EA  0F6A               	addlw	low (_key+10)
  3148  0016EC  6ED9               	movwf	fsr2l,c
  3149  0016EE  6ADA               	clrf	fsr2h,c
  3150  0016F0  94DF               	bcf	indf2,2,c
  3151                           
  3152                           ;ikb.c: 405: key[i].bf.AtTimeExpired = 0;
  3153  0016F2  500B               	movf	ikb_init@i,w,c
  3154  0016F4  0D10               	mullw	16
  3155  0016F6  50F3               	movf	prodl,w,c
  3156  0016F8  0F6A               	addlw	low (_key+10)
  3157  0016FA  6ED9               	movwf	fsr2l,c
  3158  0016FC  6ADA               	clrf	fsr2h,c
  3159  0016FE  96DF               	bcf	indf2,3,c
  3160                           
  3161                           ;ikb.c: 406: key[i].bf.Reptt = 0;
  3162  001700  500B               	movf	ikb_init@i,w,c
  3163  001702  0D10               	mullw	16
  3164  001704  50F3               	movf	prodl,w,c
  3165  001706  0F6A               	addlw	low (_key+10)
  3166  001708  6ED9               	movwf	fsr2l,c
  3167  00170A  6ADA               	clrf	fsr2h,c
  3168  00170C  9ADF               	bcf	indf2,5,c
  3169                           
  3170                           ;ikb.c: 407: key[i].num_group_x = 0;
  3171  00170E  500B               	movf	ikb_init@i,w,c
  3172  001710  0D10               	mullw	16
  3173  001712  50F3               	movf	prodl,w,c
  3174  001714  0F69               	addlw	low (_key+9)
  3175  001716  6ED9               	movwf	fsr2l,c
  3176  001718  6ADA               	clrf	fsr2h,c
  3177  00171A  0E00               	movlw	0
  3178  00171C  6EDF               	movwf	indf2,c
  3179                           
  3180                           ;ikb.c: 408: key[i].repp.to_start= (uint16_t)500.0/5;
  3181  00171E  500B               	movf	ikb_init@i,w,c
  3182  001720  0D10               	mullw	16
  3183  001722  50F3               	movf	prodl,w,c
  3184  001724  0F6C               	addlw	low (_key+12)
  3185  001726  6ED9               	movwf	fsr2l,c
  3186  001728  6ADA               	clrf	fsr2h,c
  3187  00172A  0E64               	movlw	100
  3188  00172C  6EDE               	movwf	postinc2,c
  3189  00172E  0E00               	movlw	0
  3190  001730  6EDD               	movwf	postdec2,c
  3191                           
  3192                           ;ikb.c: 409: key[i].repp.after_start = (uint16_t)200.0/5;
  3193  001732  500B               	movf	ikb_init@i,w,c
  3194  001734  0D10               	mullw	16
  3195  001736  50F3               	movf	prodl,w,c
  3196  001738  0F6E               	addlw	low (_key+14)
  3197  00173A  6ED9               	movwf	fsr2l,c
  3198  00173C  6ADA               	clrf	fsr2h,c
  3199  00173E  0E28               	movlw	40
  3200  001740  6EDE               	movwf	postinc2,c
  3201  001742  0E00               	movlw	0
  3202  001744  6EDD               	movwf	postdec2,c
  3203                           
  3204                           ; BSR set to: 0
  3205  001746  2A0B               	incf	ikb_init@i,f,c
  3206                           
  3207                           ; BSR set to: 0
  3208  001748  500B               	movf	ikb_init@i,w,c
  3209  00174A  0A80               	xorlw	128
  3210  00174C  0F7B               	addlw	-133
  3211  00174E  B0D8               	btfsc	status,0,c
  3212  001750  0012               	return	
  3213  001752  D7C1               	goto	l3118
  3214  001754                     __end_of_ikb_init:
  3215                           	opt callstack 0
  3216                           
  3217 ;; *************** function _ikb_flush *****************
  3218 ;; Defined at:
  3219 ;;		line 419 in file "../../../../../../FIRWAR/eslibrary/ikb/ikb.c"
  3220 ;; Parameters:    Size  Location     Type
  3221 ;;		None
  3222 ;; Auto vars:     Size  Location     Type
  3223 ;;		None
  3224 ;; Return value:  Size  Location     Type
  3225 ;;                  1    wreg      void 
  3226 ;; Registers used:
  3227 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3228 ;; Tracked objects:
  3229 ;;		On entry : 3F/0
  3230 ;;		On exit  : 3F/0
  3231 ;;		Unchanged: 0/0
  3232 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3233 ;;      Params:         0       0       0       0       0       0       0       0       0
  3234 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3235 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3236 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3237 ;;Total ram usage:        0 bytes
  3238 ;; Hardware stack levels used:    1
  3239 ;; Hardware stack levels required when called:    6
  3240 ;; This function calls:
  3241 ;;		_ikey_clear_all_flag
  3242 ;; This function is called by:
  3243 ;;		_main
  3244 ;; This function uses a non-reentrant model
  3245 ;;
  3246                           
  3247                           	psect	text15
  3248  001FCA                     __ptext15:
  3249                           	opt callstack 0
  3250  001FCA                     _ikb_flush:
  3251                           	opt callstack 24
  3252                           
  3253                           ; BSR set to: 0
  3254                           ;ikb.c: 421: ikey_clear_all_flag();
  3255                           
  3256                           ; BSR set to: 0
  3257                           ;incstack = 0
  3258  001FCA  ECA4  F00F         	call	_ikey_clear_all_flag	;wreg free
  3259                           
  3260                           ; BSR set to: 0
  3261  001FCE  0012               	return		;funcret
  3262  001FD0                     __end_of_ikb_flush:
  3263                           	opt callstack 0
  3264                           
  3265 ;; *************** function _ikey_clear_all_flag *****************
  3266 ;; Defined at:
  3267 ;;		line 761 in file "../../../../../../FIRWAR/eslibrary/ikb/ikb.c"
  3268 ;; Parameters:    Size  Location     Type
  3269 ;;		None
  3270 ;; Auto vars:     Size  Location     Type
  3271 ;;  i               1   10[COMRAM] unsigned char 
  3272 ;; Return value:  Size  Location     Type
  3273 ;;                  1    wreg      void 
  3274 ;; Registers used:
  3275 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  3276 ;; Tracked objects:
  3277 ;;		On entry : 3F/0
  3278 ;;		On exit  : 3F/0
  3279 ;;		Unchanged: 0/0
  3280 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3281 ;;      Params:         0       0       0       0       0       0       0       0       0
  3282 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3283 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3284 ;;      Totals:         1       0       0       0       0       0       0       0       0
  3285 ;;Total ram usage:        1 bytes
  3286 ;; Hardware stack levels used:    1
  3287 ;; Hardware stack levels required when called:    5
  3288 ;; This function calls:
  3289 ;;		Nothing
  3290 ;; This function is called by:
  3291 ;;		_ikb_flush
  3292 ;; This function uses a non-reentrant model
  3293 ;;
  3294                           
  3295                           	psect	text16
  3296  001F48                     __ptext16:
  3297                           	opt callstack 0
  3298  001F48                     _ikey_clear_all_flag:
  3299                           	opt callstack 24
  3300                           
  3301                           ; BSR set to: 0
  3302                           ;ikb.c: 763: uint8_t i;;ikb.c: 764: for (i=0; i<5; i++)
  3303                           
  3304                           ; BSR set to: 0
  3305                           ;incstack = 0
  3306  001F48  0E00               	movlw	0
  3307  001F4A  6E0B               	movwf	ikey_clear_all_flag@i,c
  3308  001F4C                     l2962:
  3309                           
  3310                           ; BSR set to: 0
  3311                           ;ikb.c: 765: {;ikb.c: 767: key[i].bf.ReadyToRead = 0;
  3312  001F4C  500B               	movf	ikey_clear_all_flag@i,w,c
  3313  001F4E  0D10               	mullw	16
  3314  001F50  50F3               	movf	prodl,w,c
  3315  001F52  0F6A               	addlw	low (_key+10)
  3316  001F54  6ED9               	movwf	fsr2l,c
  3317  001F56  6ADA               	clrf	fsr2h,c
  3318  001F58  9CDF               	bcf	indf2,6,c
  3319                           
  3320                           ; BSR set to: 0
  3321  001F5A  2A0B               	incf	ikey_clear_all_flag@i,f,c
  3322                           
  3323                           ; BSR set to: 0
  3324  001F5C  0E04               	movlw	4
  3325  001F5E  640B               	cpfsgt	ikey_clear_all_flag@i,c
  3326  001F60  D7F5               	goto	l2962
  3327  001F62  0012               	return	
  3328  001F64                     __end_of_ikey_clear_all_flag:
  3329                           	opt callstack 0
  3330                           
  3331 ;; *************** function _disp7s_qtyDisp_writeFloat *****************
  3332 ;; Defined at:
  3333 ;;		line 213 in file "display.c"
  3334 ;; Parameters:    Size  Location     Type
  3335 ;;  f               3   59[COMRAM] float 
  3336 ;; Auto vars:     Size  Location     Type
  3337 ;;		None
  3338 ;; Return value:  Size  Location     Type
  3339 ;;                  1    wreg      void 
  3340 ;; Registers used:
  3341 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3342 ;; Tracked objects:
  3343 ;;		On entry : 3F/0
  3344 ;;		On exit  : 3F/0
  3345 ;;		Unchanged: 0/0
  3346 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3347 ;;      Params:         3       0       0       0       0       0       0       0       0
  3348 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3349 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3350 ;;      Totals:         3       0       0       0       0       0       0       0       0
  3351 ;;Total ram usage:        3 bytes
  3352 ;; Hardware stack levels used:    1
  3353 ;; Hardware stack levels required when called:    9
  3354 ;; This function calls:
  3355 ;;		_disp7s_write_f
  3356 ;; This function is called by:
  3357 ;;		_main
  3358 ;; This function uses a non-reentrant model
  3359 ;;
  3360                           
  3361                           	psect	text17
  3362  001F0C                     __ptext17:
  3363                           	opt callstack 0
  3364  001F0C                     _disp7s_qtyDisp_writeFloat:
  3365                           	opt callstack 21
  3366                           
  3367                           ; BSR set to: 0
  3368                           ;display.c: 215: disp7s_write_f(pulsonic.disp7s.qty, 3, f);
  3369                           
  3370                           ; BSR set to: 0
  3371                           ;incstack = 0
  3372  001F0C  0E3B               	movlw	low (_pulsonic+59)
  3373  001F0E  6E31               	movwf	disp7s_write_f@pDisp,c
  3374  001F10  0E01               	movlw	high (_pulsonic+59)
  3375  001F12  6E32               	movwf	disp7s_write_f@pDisp+1,c
  3376  001F14  0E03               	movlw	3
  3377  001F16  6E33               	movwf	disp7s_write_f@NUM_OF_DISP,c
  3378  001F18  C03C  F034         	movff	disp7s_qtyDisp_writeFloat@f,disp7s_write_f@num
  3379  001F1C  C03D  F035         	movff	disp7s_qtyDisp_writeFloat@f+1,disp7s_write_f@num+1
  3380  001F20  C03E  F036         	movff	disp7s_qtyDisp_writeFloat@f+2,disp7s_write_f@num+2
  3381  001F24  EC1F  F007         	call	_disp7s_write_f	;wreg free
  3382                           
  3383                           ; BSR set to: 0
  3384  001F28  0012               	return		;funcret
  3385  001F2A                     __end_of_disp7s_qtyDisp_writeFloat:
  3386                           	opt callstack 0
  3387                           
  3388 ;; *************** function _disp7s_modeDisp_writeFloat *****************
  3389 ;; Defined at:
  3390 ;;		line 217 in file "display.c"
  3391 ;; Parameters:    Size  Location     Type
  3392 ;;  f               3   59[COMRAM] float 
  3393 ;; Auto vars:     Size  Location     Type
  3394 ;;		None
  3395 ;; Return value:  Size  Location     Type
  3396 ;;                  1    wreg      void 
  3397 ;; Registers used:
  3398 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3399 ;; Tracked objects:
  3400 ;;		On entry : 0/0
  3401 ;;		On exit  : 3F/0
  3402 ;;		Unchanged: 0/0
  3403 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3404 ;;      Params:         3       0       0       0       0       0       0       0       0
  3405 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3406 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3407 ;;      Totals:         3       0       0       0       0       0       0       0       0
  3408 ;;Total ram usage:        3 bytes
  3409 ;; Hardware stack levels used:    1
  3410 ;; Hardware stack levels required when called:    9
  3411 ;; This function calls:
  3412 ;;		_disp7s_write_f
  3413 ;; This function is called by:
  3414 ;;		_main
  3415 ;; This function uses a non-reentrant model
  3416 ;;
  3417                           
  3418                           	psect	text18
  3419  001F2A                     __ptext18:
  3420                           	opt callstack 0
  3421  001F2A                     _disp7s_modeDisp_writeFloat:
  3422                           	opt callstack 21
  3423                           
  3424                           ;display.c: 219: disp7s_write_f(pulsonic.disp7s.mode, 2, f);
  3425                           
  3426                           ; BSR set to: 0
  3427                           ;incstack = 0
  3428  001F2A  0E3E               	movlw	low (_pulsonic+62)
  3429  001F2C  6E31               	movwf	disp7s_write_f@pDisp,c
  3430  001F2E  0E01               	movlw	high (_pulsonic+62)
  3431  001F30  6E32               	movwf	disp7s_write_f@pDisp+1,c
  3432  001F32  0E02               	movlw	2
  3433  001F34  6E33               	movwf	disp7s_write_f@NUM_OF_DISP,c
  3434  001F36  C03C  F034         	movff	disp7s_modeDisp_writeFloat@f,disp7s_write_f@num
  3435  001F3A  C03D  F035         	movff	disp7s_modeDisp_writeFloat@f+1,disp7s_write_f@num+1
  3436  001F3E  C03E  F036         	movff	disp7s_modeDisp_writeFloat@f+2,disp7s_write_f@num+2
  3437  001F42  EC1F  F007         	call	_disp7s_write_f	;wreg free
  3438                           
  3439                           ; BSR set to: 0
  3440  001F46  0012               	return		;funcret
  3441  001F48                     __end_of_disp7s_modeDisp_writeFloat:
  3442                           	opt callstack 0
  3443                           
  3444 ;; *************** function _disp7s_write_f *****************
  3445 ;; Defined at:
  3446 ;;		line 150 in file "display.c"
  3447 ;; Parameters:    Size  Location     Type
  3448 ;;  pDisp           2   48[COMRAM] PTR unsigned char 
  3449 ;;		 -> pulsonic.disp7s(5), pulsonic(64), 
  3450 ;;  NUM_OF_DISP     1   50[COMRAM] char 
  3451 ;;  num             3   51[COMRAM] char 
  3452 ;; Auto vars:     Size  Location     Type
  3453 ;;  buff           10    0[BANK0 ] unsigned char [10]
  3454 ;;  K10MULT         3   14[BANK0 ] unsigned char [10]
  3455 ;;  I               2   10[BANK0 ] int 
  3456 ;;  i               1   17[BANK0 ] char 
  3457 ;;  iMIN            1   13[BANK0 ] char 
  3458 ;;  iMAX            1   12[BANK0 ] char 
  3459 ;; Return value:  Size  Location     Type
  3460 ;;                  1    wreg      void 
  3461 ;; Registers used:
  3462 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3463 ;; Tracked objects:
  3464 ;;		On entry : 0/0
  3465 ;;		On exit  : 3F/0
  3466 ;;		Unchanged: 0/0
  3467 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3468 ;;      Params:         6       0       0       0       0       0       0       0       0
  3469 ;;      Locals:         0      18       0       0       0       0       0       0       0
  3470 ;;      Temps:          5       0       0       0       0       0       0       0       0
  3471 ;;      Totals:        11      18       0       0       0       0       0       0       0
  3472 ;;Total ram usage:       29 bytes
  3473 ;; Hardware stack levels used:    1
  3474 ;; Hardware stack levels required when called:    8
  3475 ;; This function calls:
  3476 ;;		___ftadd
  3477 ;;		___ftge
  3478 ;;		___ftmul
  3479 ;;		___fttol
  3480 ;;		_itoa
  3481 ;; This function is called by:
  3482 ;;		_disp7s_qtyDisp_writeFloat
  3483 ;;		_disp7s_modeDisp_writeFloat
  3484 ;; This function uses a non-reentrant model
  3485 ;;
  3486                           
  3487                           	psect	text19
  3488  000E3E                     __ptext19:
  3489                           	opt callstack 0
  3490  000E3E                     _disp7s_write_f:
  3491                           	opt callstack 21
  3492                           
  3493                           ;display.c: 152: double K10MULT;;display.c: 153: int16_t I;;display.c: 154: char buff[10
      +                          ];;display.c: 155: int8_t i;;display.c: 156: int8_t iMAX;;display.c: 157: int8_t iMIN;;d
      +                          isplay.c: 159: K10MULT = 1;
  3494                           
  3495                           ; BSR set to: 0
  3496                           ;incstack = 0
  3497  000E3E  0E00               	movlw	0
  3498  000E40  0100               	movlb	0	; () banked
  3499  000E42  6FF3               	movwf	disp7s_write_f@K10MULT& (0+255),b
  3500  000E44  0E80               	movlw	128
  3501  000E46  6FF4               	movwf	(disp7s_write_f@K10MULT+1)& (0+255),b
  3502  000E48  0E3F               	movlw	63
  3503  000E4A  6FF5               	movwf	(disp7s_write_f@K10MULT+2)& (0+255),b
  3504                           
  3505                           ; BSR set to: 0
  3506                           ;display.c: 160: i = NUM_OF_DISP;
  3507  000E4C  C033  F0F6         	movff	disp7s_write_f@NUM_OF_DISP,disp7s_write_f@i
  3508                           
  3509                           ;display.c: 161: while (i--)
  3510  000E50  D014               	goto	l3788
  3511  000E52                     l3786:
  3512                           
  3513                           ; BSR set to: 0
  3514                           ;display.c: 162: {K10MULT *=10;}
  3515  000E52  C0F3  F013         	movff	disp7s_write_f@K10MULT,___ftmul@f1
  3516  000E56  C0F4  F014         	movff	disp7s_write_f@K10MULT+1,___ftmul@f1+1
  3517  000E5A  C0F5  F015         	movff	disp7s_write_f@K10MULT+2,___ftmul@f1+2
  3518  000E5E  0E00               	movlw	0
  3519  000E60  6E16               	movwf	___ftmul@f2,c
  3520  000E62  0E20               	movlw	32
  3521  000E64  6E17               	movwf	___ftmul@f2+1,c
  3522  000E66  0E41               	movlw	65
  3523  000E68  6E18               	movwf	___ftmul@f2+2,c
  3524  000E6A  EC09  F00A         	call	___ftmul	;wreg free
  3525  000E6E  C013  F0F3         	movff	?___ftmul,disp7s_write_f@K10MULT
  3526  000E72  C014  F0F4         	movff	?___ftmul+1,disp7s_write_f@K10MULT+1
  3527  000E76  C015  F0F5         	movff	?___ftmul+2,disp7s_write_f@K10MULT+2
  3528  000E7A                     l3788:
  3529  000E7A  0100               	movlb	0	; () banked
  3530  000E7C  07F6               	decf	disp7s_write_f@i& (0+255),f,b
  3531  000E7E  29F6               	incf	disp7s_write_f@i& (0+255),w,b
  3532  000E80  A4D8               	btfss	status,2,c
  3533  000E82  D7E7               	goto	l3786
  3534                           
  3535                           ; BSR set to: 0
  3536                           ;display.c: 164: if (num >= K10MULT)
  3537  000E84  C034  F016         	movff	disp7s_write_f@num,___ftge@ff1
  3538  000E88  C035  F017         	movff	disp7s_write_f@num+1,___ftge@ff1+1
  3539  000E8C  C036  F018         	movff	disp7s_write_f@num+2,___ftge@ff1+2
  3540  000E90  C0F3  F019         	movff	disp7s_write_f@K10MULT,___ftge@ff2
  3541  000E94  C0F4  F01A         	movff	disp7s_write_f@K10MULT+1,___ftge@ff2+1
  3542  000E98  C0F5  F01B         	movff	disp7s_write_f@K10MULT+2,___ftge@ff2+2
  3543  000E9C  EC18  F00D         	call	___ftge	;wreg free
  3544  000EA0  A0D8               	btfss	status,0,c
  3545  000EA2  D014               	goto	l3794
  3546                           
  3547                           ;display.c: 165: {num= K10MULT-1;}
  3548  000EA4  C0F3  F013         	movff	disp7s_write_f@K10MULT,___ftadd@f1
  3549  000EA8  C0F4  F014         	movff	disp7s_write_f@K10MULT+1,___ftadd@f1+1
  3550  000EAC  C0F5  F015         	movff	disp7s_write_f@K10MULT+2,___ftadd@f1+2
  3551  000EB0  0E00               	movlw	0
  3552  000EB2  6E16               	movwf	___ftadd@f2,c
  3553  000EB4  0E80               	movlw	128
  3554  000EB6  6E17               	movwf	___ftadd@f2+1,c
  3555  000EB8  0EBF               	movlw	191
  3556  000EBA  6E18               	movwf	___ftadd@f2+2,c
  3557  000EBC  EC65  F008         	call	___ftadd	;wreg free
  3558  000EC0  C013  F034         	movff	?___ftadd,disp7s_write_f@num
  3559  000EC4  C014  F035         	movff	?___ftadd+1,disp7s_write_f@num+1
  3560  000EC8  C015  F036         	movff	?___ftadd+2,disp7s_write_f@num+2
  3561  000ECC                     l3794:
  3562                           
  3563                           ;display.c: 167: for (i=0; i<NUM_OF_DISP; i++)
  3564  000ECC  0E00               	movlw	0
  3565  000ECE  0100               	movlb	0	; () banked
  3566  000ED0  6FF6               	movwf	disp7s_write_f@i& (0+255),b
  3567  000ED2  D013               	goto	l3800
  3568  000ED4                     l3796:
  3569                           
  3570                           ; BSR set to: 0
  3571                           ;display.c: 168: {pDisp[i] = DISP7S_CHARS[OFF];}
  3572  000ED4  0E0B               	movlw	low _DISP7S_CHARS
  3573  000ED6  6EF6               	movwf	tblptrl,c
  3574  000ED8                     	if	1	;There is more than 1 active tblptr byte
  3575  000ED8  0E08               	movlw	high _DISP7S_CHARS
  3576  000EDA  6EF7               	movwf	tblptrh,c
  3577  000EDC                     	endif
  3578  000EDC                     	if	0	;There are less than 3 active tblptr bytes
  3579  000EDC                     	endif
  3580  000EDC  C0F6  F037         	movff	disp7s_write_f@i,??_disp7s_write_f
  3581  000EE0  6A38               	clrf	(??_disp7s_write_f+1)& (0+255),c
  3582  000EE2  BE37               	btfsc	??_disp7s_write_f& (0+255),7,c
  3583  000EE4  0638               	decf	(??_disp7s_write_f+1)& (0+255),f,c
  3584  000EE6  5037               	movf	??_disp7s_write_f,w,c
  3585  000EE8  2431               	addwf	disp7s_write_f@pDisp,w,c
  3586  000EEA  6ED9               	movwf	fsr2l,c
  3587  000EEC  5038               	movf	??_disp7s_write_f+1,w,c
  3588  000EEE  2032               	addwfc	disp7s_write_f@pDisp+1,w,c
  3589  000EF0  6EDA               	movwf	fsr2h,c
  3590  000EF2  0008               	tblrd		*
  3591  000EF4  CFF5 FFDF          	movff	tablat,indf2
  3592                           
  3593                           ; BSR set to: 0
  3594  000EF8  2BF6               	incf	disp7s_write_f@i& (0+255),f,b
  3595  000EFA                     l3800:
  3596                           
  3597                           ; BSR set to: 0
  3598  000EFA  51F6               	movf	disp7s_write_f@i& (0+255),w,b
  3599  000EFC  0A80               	xorlw	128
  3600  000EFE  6E37               	movwf	??_disp7s_write_f& (0+255),c
  3601  000F00  5033               	movf	disp7s_write_f@NUM_OF_DISP,w,c
  3602  000F02  0A80               	xorlw	128
  3603  000F04  5C37               	subwf	??_disp7s_write_f& (0+255),w,c
  3604  000F06  A0D8               	btfss	status,0,c
  3605  000F08  D7E5               	goto	l3796
  3606                           
  3607                           ; BSR set to: 0
  3608                           ;display.c: 181: K10MULT = 1;
  3609  000F0A  0E00               	movlw	0
  3610  000F0C  6FF3               	movwf	disp7s_write_f@K10MULT& (0+255),b
  3611  000F0E  0E80               	movlw	128
  3612  000F10  6FF4               	movwf	(disp7s_write_f@K10MULT+1)& (0+255),b
  3613  000F12  0E3F               	movlw	63
  3614  000F14  6FF5               	movwf	(disp7s_write_f@K10MULT+2)& (0+255),b
  3615                           
  3616                           ;display.c: 182: for (i=0; i<=NUM_OF_DISP; i++)
  3617  000F16  0E00               	movlw	0
  3618  000F18  6FF6               	movwf	disp7s_write_f@i& (0+255),b
  3619  000F1A  D095               	goto	l3832
  3620  000F1C                     l3804:
  3621                           
  3622                           ; BSR set to: 0
  3623                           ;display.c: 183: {;display.c: 184: if (num< K10MULT)
  3624  000F1C  C034  F016         	movff	disp7s_write_f@num,___ftge@ff1
  3625  000F20  C035  F017         	movff	disp7s_write_f@num+1,___ftge@ff1+1
  3626  000F24  C036  F018         	movff	disp7s_write_f@num+2,___ftge@ff1+2
  3627  000F28  C0F3  F019         	movff	disp7s_write_f@K10MULT,___ftge@ff2
  3628  000F2C  C0F4  F01A         	movff	disp7s_write_f@K10MULT+1,___ftge@ff2+1
  3629  000F30  C0F5  F01B         	movff	disp7s_write_f@K10MULT+2,___ftge@ff2+2
  3630  000F34  EC18  F00D         	call	___ftge	;wreg free
  3631  000F38  B0D8               	btfsc	status,0,c
  3632  000F3A  D06F               	goto	l3828
  3633                           
  3634                           ;display.c: 185: {;display.c: 186: if (i<NUM_OF_DISP)
  3635  000F3C  0100               	movlb	0	; () banked
  3636  000F3E  51F6               	movf	disp7s_write_f@i& (0+255),w,b
  3637  000F40  0A80               	xorlw	128
  3638  000F42  6E37               	movwf	??_disp7s_write_f& (0+255),c
  3639  000F44  5033               	movf	disp7s_write_f@NUM_OF_DISP,w,c
  3640  000F46  0A80               	xorlw	128
  3641  000F48  5C37               	subwf	??_disp7s_write_f& (0+255),w,c
  3642  000F4A  B0D8               	btfsc	status,0,c
  3643  000F4C  D055               	goto	l3822
  3644                           
  3645                           ; BSR set to: 0
  3646                           ;display.c: 187: {;display.c: 188: I = (int16_t)(num*10);
  3647  000F4E  0E00               	movlw	0
  3648  000F50  6E16               	movwf	___ftmul@f2,c
  3649  000F52  0E20               	movlw	32
  3650  000F54  6E17               	movwf	___ftmul@f2+1,c
  3651  000F56  0E41               	movlw	65
  3652  000F58  6E18               	movwf	___ftmul@f2+2,c
  3653  000F5A  C034  F013         	movff	disp7s_write_f@num,___ftmul@f1
  3654  000F5E  C035  F014         	movff	disp7s_write_f@num+1,___ftmul@f1+1
  3655  000F62  C036  F015         	movff	disp7s_write_f@num+2,___ftmul@f1+2
  3656  000F66  EC09  F00A         	call	___ftmul	;wreg free
  3657  000F6A  C013  F022         	movff	?___ftmul,___fttol@f1
  3658  000F6E  C014  F023         	movff	?___ftmul+1,___fttol@f1+1
  3659  000F72  C015  F024         	movff	?___ftmul+2,___fttol@f1+2
  3660  000F76  EC83  F00A         	call	___fttol	;wreg free
  3661  000F7A  C022  F0EF         	movff	?___fttol,disp7s_write_f@I
  3662  000F7E  C023  F0F0         	movff	?___fttol+1,disp7s_write_f@I+1
  3663                           
  3664                           ;display.c: 189: if (i==0)
  3665  000F82  0100               	movlb	0	; () banked
  3666  000F84  51F6               	movf	disp7s_write_f@i& (0+255),w,b
  3667  000F86  A4D8               	btfss	status,2,c
  3668  000F88  D01A               	goto	l3814
  3669                           
  3670                           ; BSR set to: 0
  3671                           ;display.c: 190: {;display.c: 191: pDisp[NUM_OF_DISP-2]= DISP7S_NUMS[0];
  3672  000F8A  0E01               	movlw	low _DISP7S_NUMS
  3673  000F8C  6EF6               	movwf	tblptrl,c
  3674  000F8E                     	if	1	;There is more than 1 active tblptr byte
  3675  000F8E  0E08               	movlw	high _DISP7S_NUMS
  3676  000F90  6EF7               	movwf	tblptrh,c
  3677  000F92                     	endif
  3678  000F92                     	if	0	;There are less than 3 active tblptr bytes
  3679  000F92                     	endif
  3680  000F92  C033  F037         	movff	disp7s_write_f@NUM_OF_DISP,??_disp7s_write_f
  3681  000F96  6A38               	clrf	(??_disp7s_write_f+1)& (0+255),c
  3682  000F98  BE37               	btfsc	??_disp7s_write_f& (0+255),7,c
  3683  000F9A  0638               	decf	(??_disp7s_write_f+1)& (0+255),f,c
  3684  000F9C  C031  F039         	movff	disp7s_write_f@pDisp,??_disp7s_write_f+2
  3685  000FA0  C032  F03A         	movff	disp7s_write_f@pDisp+1,??_disp7s_write_f+3
  3686  000FA4  5037               	movf	??_disp7s_write_f,w,c
  3687  000FA6  2639               	addwf	??_disp7s_write_f+2,f,c
  3688  000FA8  5038               	movf	??_disp7s_write_f+1,w,c
  3689  000FAA  223A               	addwfc	??_disp7s_write_f+3,f,c
  3690  000FAC  0EFE               	movlw	254
  3691  000FAE  2439               	addwf	??_disp7s_write_f+2,w,c
  3692  000FB0  6ED9               	movwf	fsr2l,c
  3693  000FB2  0EFF               	movlw	255
  3694  000FB4  203A               	addwfc	??_disp7s_write_f+3,w,c
  3695  000FB6  6EDA               	movwf	fsr2h,c
  3696  000FB8  0008               	tblrd		*
  3697  000FBA  CFF5 FFDF          	movff	tablat,indf2
  3698  000FBE                     l3814:
  3699                           
  3700                           ; BSR set to: 0
  3701                           ;display.c: 192: };display.c: 193: pDisp[NUM_OF_DISP-2] |= 0x80;
  3702  000FBE  C033  F037         	movff	disp7s_write_f@NUM_OF_DISP,??_disp7s_write_f
  3703  000FC2  6A38               	clrf	(??_disp7s_write_f+1)& (0+255),c
  3704  000FC4  BE37               	btfsc	??_disp7s_write_f& (0+255),7,c
  3705  000FC6  0638               	decf	(??_disp7s_write_f+1)& (0+255),f,c
  3706  000FC8  C031  F039         	movff	disp7s_write_f@pDisp,??_disp7s_write_f+2
  3707  000FCC  C032  F03A         	movff	disp7s_write_f@pDisp+1,??_disp7s_write_f+3
  3708  000FD0  5037               	movf	??_disp7s_write_f,w,c
  3709  000FD2  2639               	addwf	??_disp7s_write_f+2,f,c
  3710  000FD4  5038               	movf	??_disp7s_write_f+1,w,c
  3711  000FD6  223A               	addwfc	??_disp7s_write_f+3,f,c
  3712  000FD8  0EFE               	movlw	254
  3713  000FDA  2439               	addwf	??_disp7s_write_f+2,w,c
  3714  000FDC  6ED9               	movwf	fsr2l,c
  3715  000FDE  0EFF               	movlw	255
  3716  000FE0  203A               	addwfc	??_disp7s_write_f+3,w,c
  3717  000FE2  6EDA               	movwf	fsr2h,c
  3718  000FE4  0E00               	movlw	0
  3719  000FE6  8EDB               	bsf	plusw2,7,c
  3720                           
  3721                           ; BSR set to: 0
  3722                           ;display.c: 194: iMAX = i+1;
  3723  000FE8  29F6               	incf	disp7s_write_f@i& (0+255),w,b
  3724  000FEA  6FF1               	movwf	disp7s_write_f@iMAX& (0+255),b
  3725                           
  3726                           ; BSR set to: 0
  3727                           ;display.c: 195: iMIN = (NUM_OF_DISP-1)-i;
  3728  000FEC  51F6               	movf	disp7s_write_f@i& (0+255),w,b
  3729  000FEE  5C33               	subwf	disp7s_write_f@NUM_OF_DISP,w,c
  3730  000FF0  6E37               	movwf	??_disp7s_write_f& (0+255),c
  3731  000FF2  0437               	decf	??_disp7s_write_f,w,c
  3732  000FF4  6FF2               	movwf	disp7s_write_f@iMIN& (0+255),b
  3733                           
  3734                           ;display.c: 196: break;
  3735  000FF6  D02F               	goto	u4490
  3736  000FF8                     l3822:
  3737                           
  3738                           ; BSR set to: 0
  3739                           ;display.c: 198: else;display.c: 199: {;display.c: 200: I = (int16_t)(num);
  3740  000FF8  C034  F022         	movff	disp7s_write_f@num,___fttol@f1
  3741  000FFC  C035  F023         	movff	disp7s_write_f@num+1,___fttol@f1+1
  3742  001000  C036  F024         	movff	disp7s_write_f@num+2,___fttol@f1+2
  3743  001004  EC83  F00A         	call	___fttol	;wreg free
  3744  001008  C022  F0EF         	movff	?___fttol,disp7s_write_f@I
  3745  00100C  C023  F0F0         	movff	?___fttol+1,disp7s_write_f@I+1
  3746                           
  3747                           ;display.c: 201: iMAX = i;
  3748  001010  C0F6  F0F1         	movff	disp7s_write_f@i,disp7s_write_f@iMAX
  3749                           
  3750                           ;display.c: 202: iMIN = 0;
  3751  001014  0E00               	movlw	0
  3752  001016  0100               	movlb	0	; () banked
  3753  001018  6FF2               	movwf	disp7s_write_f@iMIN& (0+255),b
  3754  00101A                     l3828:
  3755                           
  3756                           ;display.c: 203: };display.c: 204: };display.c: 205: K10MULT *= 10;
  3757  00101A  C0F3  F013         	movff	disp7s_write_f@K10MULT,___ftmul@f1
  3758  00101E  C0F4  F014         	movff	disp7s_write_f@K10MULT+1,___ftmul@f1+1
  3759  001022  C0F5  F015         	movff	disp7s_write_f@K10MULT+2,___ftmul@f1+2
  3760  001026  0E00               	movlw	0
  3761  001028  6E16               	movwf	___ftmul@f2,c
  3762  00102A  0E20               	movlw	32
  3763  00102C  6E17               	movwf	___ftmul@f2+1,c
  3764  00102E  0E41               	movlw	65
  3765  001030  6E18               	movwf	___ftmul@f2+2,c
  3766  001032  EC09  F00A         	call	___ftmul	;wreg free
  3767  001036  C013  F0F3         	movff	?___ftmul,disp7s_write_f@K10MULT
  3768  00103A  C014  F0F4         	movff	?___ftmul+1,disp7s_write_f@K10MULT+1
  3769  00103E  C015  F0F5         	movff	?___ftmul+2,disp7s_write_f@K10MULT+2
  3770  001042  0100               	movlb	0	; () banked
  3771  001044  2BF6               	incf	disp7s_write_f@i& (0+255),f,b
  3772  001046                     l3832:
  3773                           
  3774                           ; BSR set to: 0
  3775  001046  5033               	movf	disp7s_write_f@NUM_OF_DISP,w,c
  3776  001048  0A80               	xorlw	128
  3777  00104A  6E37               	movwf	??_disp7s_write_f& (0+255),c
  3778  00104C  51F6               	movf	disp7s_write_f@i& (0+255),w,b
  3779  00104E  0A80               	xorlw	128
  3780  001050  5C37               	subwf	??_disp7s_write_f& (0+255),w,c
  3781  001052  B0D8               	btfsc	status,0,c
  3782  001054  D763               	goto	l3804
  3783  001056                     u4490:
  3784                           
  3785                           ; BSR set to: 0
  3786                           ;display.c: 206: };display.c: 208: itoa(buff, I, 10);
  3787  001056  0EE5               	movlw	low disp7s_write_f@buff
  3788  001058  6E1A               	movwf	itoa@buf,c
  3789  00105A  C0EF  F01B         	movff	disp7s_write_f@I,itoa@val
  3790  00105E  C0F0  F01C         	movff	disp7s_write_f@I+1,itoa@val+1
  3791  001062  0E00               	movlw	0
  3792  001064  6E1E               	movwf	itoa@base+1,c
  3793  001066  0E0A               	movlw	10
  3794  001068  6E1D               	movwf	itoa@base,c
  3795  00106A  EC4C  F00F         	call	_itoa	;wreg free
  3796                           
  3797                           ;display.c: 210: for (i=0; i<iMAX; i++)
  3798  00106E  0E00               	movlw	0
  3799  001070  0100               	movlb	0	; () banked
  3800  001072  6FF6               	movwf	disp7s_write_f@i& (0+255),b
  3801  001074  D021               	goto	l3844
  3802  001076                     l3838:
  3803                           
  3804                           ; BSR set to: 0
  3805                           ;display.c: 211: {pDisp[iMIN++] |= DISP7S_NUMS[ buff[i] - 0x30 ];}
  3806  001076  51F6               	movf	disp7s_write_f@i& (0+255),w,b
  3807  001078  0FE5               	addlw	low disp7s_write_f@buff
  3808  00107A  6ED9               	movwf	fsr2l,c
  3809  00107C  6ADA               	clrf	fsr2h,c
  3810  00107E  50DF               	movf	indf2,w,c
  3811  001080  6E37               	movwf	??_disp7s_write_f& (0+255),c
  3812  001082  0ED0               	movlw	208
  3813  001084  2637               	addwf	??_disp7s_write_f,f,c
  3814  001086  5037               	movf	??_disp7s_write_f,w,c
  3815  001088  0F01               	addlw	low _DISP7S_NUMS
  3816  00108A  6E38               	movwf	(??_disp7s_write_f+1)& (0+255),c
  3817  00108C  C038  FFF6         	movff	??_disp7s_write_f+1,tblptrl
  3818  001090                     	if	1	;There is more than 1 active tblptr byte
  3819  001090  0E08               	movlw	high __smallconst
  3820  001092  6EF7               	movwf	tblptrh,c
  3821  001094                     	endif
  3822  001094                     	if	0	;tblptru may be non-zero
  3823  001094                     	endif
  3824  001094                     	if	0	;tblptru may be non-zero
  3825  001094                     	endif
  3826  001094  0008               	tblrd		*
  3827  001096  CFF5 F039          	movff	tablat,??_disp7s_write_f+2
  3828  00109A  C0F2  F03A         	movff	disp7s_write_f@iMIN,??_disp7s_write_f+3
  3829  00109E  6A3B               	clrf	(??_disp7s_write_f+4)& (0+255),c
  3830  0010A0  BE3A               	btfsc	(??_disp7s_write_f+3)& (0+255),7,c
  3831  0010A2  063B               	decf	(??_disp7s_write_f+4)& (0+255),f,c
  3832  0010A4  503A               	movf	??_disp7s_write_f+3,w,c
  3833  0010A6  2431               	addwf	disp7s_write_f@pDisp,w,c
  3834  0010A8  6ED9               	movwf	fsr2l,c
  3835  0010AA  503B               	movf	??_disp7s_write_f+4,w,c
  3836  0010AC  2032               	addwfc	disp7s_write_f@pDisp+1,w,c
  3837  0010AE  6EDA               	movwf	fsr2h,c
  3838  0010B0  5039               	movf	??_disp7s_write_f+2,w,c
  3839  0010B2  12DF               	iorwf	indf2,f,c
  3840                           
  3841                           ; BSR set to: 0
  3842  0010B4  2BF2               	incf	disp7s_write_f@iMIN& (0+255),f,b
  3843                           
  3844                           ; BSR set to: 0
  3845  0010B6  2BF6               	incf	disp7s_write_f@i& (0+255),f,b
  3846  0010B8                     l3844:
  3847                           
  3848                           ; BSR set to: 0
  3849  0010B8  51F6               	movf	disp7s_write_f@i& (0+255),w,b
  3850  0010BA  0A80               	xorlw	128
  3851  0010BC  6E37               	movwf	??_disp7s_write_f& (0+255),c
  3852  0010BE  51F1               	movf	disp7s_write_f@iMAX& (0+255),w,b
  3853  0010C0  0A80               	xorlw	128
  3854  0010C2  5C37               	subwf	??_disp7s_write_f& (0+255),w,c
  3855  0010C4  B0D8               	btfsc	status,0,c
  3856  0010C6  0012               	return	
  3857  0010C8  D7D6               	goto	l3838
  3858  0010CA                     __end_of_disp7s_write_f:
  3859                           	opt callstack 0
  3860                           
  3861 ;; *************** function _itoa *****************
  3862 ;; Defined at:
  3863 ;;		line 4 in file "/opt/microchip/xc8/v2.05/pic/sources/c90/common/itoa.c"
  3864 ;; Parameters:    Size  Location     Type
  3865 ;;  buf             1   25[COMRAM] PTR unsigned char 
  3866 ;;		 -> disp7s_write_f@buff(10), 
  3867 ;;  val             2   26[COMRAM] int 
  3868 ;;  base            2   28[COMRAM] int 
  3869 ;; Auto vars:     Size  Location     Type
  3870 ;;  cp              1    0        PTR unsigned char 
  3871 ;;		 -> disp7s_write_f@buff(10), 
  3872 ;; Return value:  Size  Location     Type
  3873 ;;                  1    wreg      PTR unsigned char 
  3874 ;; Registers used:
  3875 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3876 ;; Tracked objects:
  3877 ;;		On entry : 3F/0
  3878 ;;		On exit  : 0/0
  3879 ;;		Unchanged: 0/0
  3880 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3881 ;;      Params:         5       0       0       0       0       0       0       0       0
  3882 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3883 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3884 ;;      Totals:         6       0       0       0       0       0       0       0       0
  3885 ;;Total ram usage:        6 bytes
  3886 ;; Hardware stack levels used:    1
  3887 ;; Hardware stack levels required when called:    7
  3888 ;; This function calls:
  3889 ;;		_utoa
  3890 ;; This function is called by:
  3891 ;;		_disp7s_write_f
  3892 ;; This function uses a non-reentrant model
  3893 ;;
  3894                           
  3895                           	psect	text20
  3896  001E98                     __ptext20:
  3897                           	opt callstack 0
  3898  001E98                     _itoa:
  3899                           	opt callstack 21
  3900                           
  3901                           ; BSR set to: 0
  3902                           
  3903                           ; BSR set to: 0
  3904                           ;incstack = 0
  3905  001E98  AE1C               	btfss	itoa@val+1,7,c
  3906  001E9A  D00A               	goto	l3496
  3907                           
  3908                           ; BSR set to: 0
  3909  001E9C  501A               	movf	itoa@buf,w,c
  3910  001E9E  6ED9               	movwf	fsr2l,c
  3911  001EA0  6ADA               	clrf	fsr2h,c
  3912  001EA2  0E2D               	movlw	45
  3913  001EA4  6EDF               	movwf	indf2,c
  3914                           
  3915                           ; BSR set to: 0
  3916  001EA6  2A1A               	incf	itoa@buf,f,c
  3917                           
  3918                           ; BSR set to: 0
  3919  001EA8  6C1B               	negf	itoa@val,c
  3920  001EAA  1E1C               	comf	itoa@val+1,f,c
  3921  001EAC  B0D8               	btfsc	status,0,c
  3922  001EAE  2A1C               	incf	itoa@val+1,f,c
  3923  001EB0                     l3496:
  3924                           
  3925                           ; BSR set to: 0
  3926  001EB0  C01A  F012         	movff	itoa@buf,utoa@buf
  3927  001EB4  C01B  F013         	movff	itoa@val,utoa@val
  3928  001EB8  C01C  F014         	movff	itoa@val+1,utoa@val+1
  3929  001EBC  C01D  F015         	movff	itoa@base,utoa@base
  3930  001EC0  C01E  F016         	movff	itoa@base+1,utoa@base+1
  3931  001EC4  EC51  F00C         	call	_utoa	;wreg free
  3932  001EC8  0012               	return		;funcret
  3933  001ECA                     __end_of_itoa:
  3934                           	opt callstack 0
  3935                           
  3936 ;; *************** function _utoa *****************
  3937 ;; Defined at:
  3938 ;;		line 17 in file "/opt/microchip/xc8/v2.05/pic/sources/c90/common/itoa.c"
  3939 ;; Parameters:    Size  Location     Type
  3940 ;;  buf             1   17[COMRAM] PTR unsigned char 
  3941 ;;		 -> disp7s_write_f@buff(10), 
  3942 ;;  val             2   18[COMRAM] unsigned int 
  3943 ;;  base            2   20[COMRAM] int 
  3944 ;; Auto vars:     Size  Location     Type
  3945 ;;  v               2   22[COMRAM] unsigned int 
  3946 ;;  c               1   24[COMRAM] unsigned char 
  3947 ;; Return value:  Size  Location     Type
  3948 ;;                  1    wreg      PTR unsigned char 
  3949 ;; Registers used:
  3950 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3951 ;; Tracked objects:
  3952 ;;		On entry : 3F/0
  3953 ;;		On exit  : 0/0
  3954 ;;		Unchanged: 0/0
  3955 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3956 ;;      Params:         5       0       0       0       0       0       0       0       0
  3957 ;;      Locals:         3       0       0       0       0       0       0       0       0
  3958 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3959 ;;      Totals:         8       0       0       0       0       0       0       0       0
  3960 ;;Total ram usage:        8 bytes
  3961 ;; Hardware stack levels used:    1
  3962 ;; Hardware stack levels required when called:    6
  3963 ;; This function calls:
  3964 ;;		___lwdiv
  3965 ;;		___lwmod
  3966 ;; This function is called by:
  3967 ;;		_itoa
  3968 ;; This function uses a non-reentrant model
  3969 ;;
  3970                           
  3971                           	psect	text21
  3972  0018A2                     __ptext21:
  3973                           	opt callstack 0
  3974  0018A2                     _utoa:
  3975                           	opt callstack 21
  3976                           
  3977                           ; BSR set to: 0
  3978                           
  3979                           ;incstack = 0
  3980  0018A2  C013  F017         	movff	utoa@val,utoa@v
  3981  0018A6  C014  F018         	movff	utoa@val+1,utoa@v+1
  3982  0018AA                     l3460:
  3983  0018AA  C017  F00B         	movff	utoa@v,___lwdiv@dividend
  3984  0018AE  C018  F00C         	movff	utoa@v+1,___lwdiv@dividend+1
  3985  0018B2  C015  F00D         	movff	utoa@base,___lwdiv@divisor
  3986  0018B6  C016  F00E         	movff	utoa@base+1,___lwdiv@divisor+1
  3987  0018BA  EC12  F00E         	call	___lwdiv	;wreg free
  3988  0018BE  C00B  F017         	movff	?___lwdiv,utoa@v
  3989  0018C2  C00C  F018         	movff	?___lwdiv+1,utoa@v+1
  3990  0018C6  2A12               	incf	utoa@buf,f,c
  3991  0018C8  5017               	movf	utoa@v,w,c
  3992  0018CA  1018               	iorwf	utoa@v+1,w,c
  3993  0018CC  A4D8               	btfss	status,2,c
  3994  0018CE  D7ED               	goto	l3460
  3995  0018D0  5012               	movf	utoa@buf,w,c
  3996  0018D2  6ED9               	movwf	fsr2l,c
  3997  0018D4  6ADA               	clrf	fsr2h,c
  3998  0018D6  0E00               	movlw	0
  3999  0018D8  6EDF               	movwf	indf2,c
  4000  0018DA  0612               	decf	utoa@buf,f,c
  4001  0018DC                     l3470:
  4002  0018DC  C013  F00B         	movff	utoa@val,___lwmod@dividend
  4003  0018E0  C014  F00C         	movff	utoa@val+1,___lwmod@dividend+1
  4004  0018E4  C015  F00D         	movff	utoa@base,___lwmod@divisor
  4005  0018E8  C016  F00E         	movff	utoa@base+1,___lwmod@divisor+1
  4006  0018EC  ECCE  F00E         	call	___lwmod	;wreg free
  4007  0018F0  500B               	movf	?___lwmod,w,c
  4008  0018F2  6E19               	movwf	utoa@c,c
  4009  0018F4  C013  F00B         	movff	utoa@val,___lwdiv@dividend
  4010  0018F8  C014  F00C         	movff	utoa@val+1,___lwdiv@dividend+1
  4011  0018FC  C015  F00D         	movff	utoa@base,___lwdiv@divisor
  4012  001900  C016  F00E         	movff	utoa@base+1,___lwdiv@divisor+1
  4013  001904  EC12  F00E         	call	___lwdiv	;wreg free
  4014  001908  C00B  F013         	movff	?___lwdiv,utoa@val
  4015  00190C  C00C  F014         	movff	?___lwdiv+1,utoa@val+1
  4016  001910  0E09               	movlw	9
  4017  001912  6419               	cpfsgt	utoa@c,c
  4018  001914  D002               	goto	l1408
  4019  001916  0E07               	movlw	7
  4020  001918  2619               	addwf	utoa@c,f,c
  4021  00191A                     l1408:
  4022  00191A  0E30               	movlw	48
  4023  00191C  2619               	addwf	utoa@c,f,c
  4024  00191E  5012               	movf	utoa@buf,w,c
  4025  001920  6ED9               	movwf	fsr2l,c
  4026  001922  6ADA               	clrf	fsr2h,c
  4027  001924  C019  FFDF         	movff	utoa@c,indf2
  4028  001928  0612               	decf	utoa@buf,f,c
  4029  00192A  5013               	movf	utoa@val,w,c
  4030  00192C  1014               	iorwf	utoa@val+1,w,c
  4031  00192E  A4D8               	btfss	status,2,c
  4032  001930  D7D5               	goto	l3470
  4033                           
  4034                           ;	Return value of _utoa is never used
  4035  001932  2A12               	incf	utoa@buf,f,c
  4036  001934  0012               	return		;funcret
  4037  001936                     __end_of_utoa:
  4038                           	opt callstack 0
  4039                           
  4040 ;; *************** function ___lwmod *****************
  4041 ;; Defined at:
  4042 ;;		line 7 in file "/opt/microchip/xc8/v2.05/pic/sources/c90/common/lwmod.c"
  4043 ;; Parameters:    Size  Location     Type
  4044 ;;  dividend        2   10[COMRAM] unsigned int 
  4045 ;;  divisor         2   12[COMRAM] unsigned int 
  4046 ;; Auto vars:     Size  Location     Type
  4047 ;;  counter         1   14[COMRAM] unsigned char 
  4048 ;; Return value:  Size  Location     Type
  4049 ;;                  2   10[COMRAM] unsigned int 
  4050 ;; Registers used:
  4051 ;;		wreg, status,2, status,0
  4052 ;; Tracked objects:
  4053 ;;		On entry : 0/0
  4054 ;;		On exit  : 0/0
  4055 ;;		Unchanged: 0/0
  4056 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4057 ;;      Params:         4       0       0       0       0       0       0       0       0
  4058 ;;      Locals:         1       0       0       0       0       0       0       0       0
  4059 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4060 ;;      Totals:         5       0       0       0       0       0       0       0       0
  4061 ;;Total ram usage:        5 bytes
  4062 ;; Hardware stack levels used:    1
  4063 ;; Hardware stack levels required when called:    5
  4064 ;; This function calls:
  4065 ;;		Nothing
  4066 ;; This function is called by:
  4067 ;;		_utoa
  4068 ;; This function uses a non-reentrant model
  4069 ;;
  4070                           
  4071                           	psect	text22
  4072  001D9C                     __ptext22:
  4073                           	opt callstack 0
  4074  001D9C                     ___lwmod:
  4075                           	opt callstack 21
  4076                           
  4077                           ;incstack = 0
  4078  001D9C  500D               	movf	___lwmod@divisor,w,c
  4079  001D9E  100E               	iorwf	___lwmod@divisor+1,w,c
  4080  001DA0  B4D8               	btfsc	status,2,c
  4081  001DA2  D018               	goto	l1226
  4082  001DA4  0E01               	movlw	1
  4083  001DA6  6E0F               	movwf	___lwmod@counter,c
  4084  001DA8  D004               	goto	l3412
  4085  001DAA                     l3410:
  4086  001DAA  90D8               	bcf	status,0,c
  4087  001DAC  360D               	rlcf	___lwmod@divisor,f,c
  4088  001DAE  360E               	rlcf	___lwmod@divisor+1,f,c
  4089  001DB0  2A0F               	incf	___lwmod@counter,f,c
  4090  001DB2                     l3412:
  4091  001DB2  AE0E               	btfss	___lwmod@divisor+1,7,c
  4092  001DB4  D7FA               	goto	l3410
  4093  001DB6                     u3550:
  4094  001DB6  500D               	movf	___lwmod@divisor,w,c
  4095  001DB8  5C0B               	subwf	___lwmod@dividend,w,c
  4096  001DBA  500E               	movf	___lwmod@divisor+1,w,c
  4097  001DBC  580C               	subwfb	___lwmod@dividend+1,w,c
  4098  001DBE  A0D8               	btfss	status,0,c
  4099  001DC0  D004               	goto	l3418
  4100  001DC2  500D               	movf	___lwmod@divisor,w,c
  4101  001DC4  5E0B               	subwf	___lwmod@dividend,f,c
  4102  001DC6  500E               	movf	___lwmod@divisor+1,w,c
  4103  001DC8  5A0C               	subwfb	___lwmod@dividend+1,f,c
  4104  001DCA                     l3418:
  4105  001DCA  90D8               	bcf	status,0,c
  4106  001DCC  320E               	rrcf	___lwmod@divisor+1,f,c
  4107  001DCE  320D               	rrcf	___lwmod@divisor,f,c
  4108  001DD0  2E0F               	decfsz	___lwmod@counter,f,c
  4109  001DD2  D7F1               	goto	u3550
  4110  001DD4                     l1226:
  4111  001DD4  C00B  F00B         	movff	___lwmod@dividend,?___lwmod
  4112  001DD8  C00C  F00C         	movff	___lwmod@dividend+1,?___lwmod+1
  4113  001DDC  0012               	return		;funcret
  4114  001DDE                     __end_of___lwmod:
  4115                           	opt callstack 0
  4116                           
  4117 ;; *************** function ___lwdiv *****************
  4118 ;; Defined at:
  4119 ;;		line 7 in file "/opt/microchip/xc8/v2.05/pic/sources/c90/common/lwdiv.c"
  4120 ;; Parameters:    Size  Location     Type
  4121 ;;  dividend        2   10[COMRAM] unsigned int 
  4122 ;;  divisor         2   12[COMRAM] unsigned int 
  4123 ;; Auto vars:     Size  Location     Type
  4124 ;;  quotient        2   15[COMRAM] unsigned int 
  4125 ;;  counter         1   14[COMRAM] unsigned char 
  4126 ;; Return value:  Size  Location     Type
  4127 ;;                  2   10[COMRAM] unsigned int 
  4128 ;; Registers used:
  4129 ;;		wreg, status,2, status,0
  4130 ;; Tracked objects:
  4131 ;;		On entry : 0/0
  4132 ;;		On exit  : 0/0
  4133 ;;		Unchanged: 0/0
  4134 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4135 ;;      Params:         4       0       0       0       0       0       0       0       0
  4136 ;;      Locals:         3       0       0       0       0       0       0       0       0
  4137 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4138 ;;      Totals:         7       0       0       0       0       0       0       0       0
  4139 ;;Total ram usage:        7 bytes
  4140 ;; Hardware stack levels used:    1
  4141 ;; Hardware stack levels required when called:    5
  4142 ;; This function calls:
  4143 ;;		Nothing
  4144 ;; This function is called by:
  4145 ;;		_utoa
  4146 ;; This function uses a non-reentrant model
  4147 ;;
  4148                           
  4149                           	psect	text23
  4150  001C24                     __ptext23:
  4151                           	opt callstack 0
  4152  001C24                     ___lwdiv:
  4153                           	opt callstack 21
  4154                           
  4155                           ;incstack = 0
  4156  001C24  0E00               	movlw	0
  4157  001C26  6E11               	movwf	___lwdiv@quotient+1,c
  4158  001C28  0E00               	movlw	0
  4159  001C2A  6E10               	movwf	___lwdiv@quotient,c
  4160  001C2C  500D               	movf	___lwdiv@divisor,w,c
  4161  001C2E  100E               	iorwf	___lwdiv@divisor+1,w,c
  4162  001C30  B4D8               	btfsc	status,2,c
  4163  001C32  D01C               	goto	l1216
  4164  001C34  0E01               	movlw	1
  4165  001C36  6E0F               	movwf	___lwdiv@counter,c
  4166  001C38  D004               	goto	l3392
  4167  001C3A                     l3390:
  4168  001C3A  90D8               	bcf	status,0,c
  4169  001C3C  360D               	rlcf	___lwdiv@divisor,f,c
  4170  001C3E  360E               	rlcf	___lwdiv@divisor+1,f,c
  4171  001C40  2A0F               	incf	___lwdiv@counter,f,c
  4172  001C42                     l3392:
  4173  001C42  AE0E               	btfss	___lwdiv@divisor+1,7,c
  4174  001C44  D7FA               	goto	l3390
  4175  001C46                     u3520:
  4176  001C46  90D8               	bcf	status,0,c
  4177  001C48  3610               	rlcf	___lwdiv@quotient,f,c
  4178  001C4A  3611               	rlcf	___lwdiv@quotient+1,f,c
  4179  001C4C  500D               	movf	___lwdiv@divisor,w,c
  4180  001C4E  5C0B               	subwf	___lwdiv@dividend,w,c
  4181  001C50  500E               	movf	___lwdiv@divisor+1,w,c
  4182  001C52  580C               	subwfb	___lwdiv@dividend+1,w,c
  4183  001C54  A0D8               	btfss	status,0,c
  4184  001C56  D005               	goto	l3402
  4185  001C58  500D               	movf	___lwdiv@divisor,w,c
  4186  001C5A  5E0B               	subwf	___lwdiv@dividend,f,c
  4187  001C5C  500E               	movf	___lwdiv@divisor+1,w,c
  4188  001C5E  5A0C               	subwfb	___lwdiv@dividend+1,f,c
  4189  001C60  8010               	bsf	___lwdiv@quotient,0,c
  4190  001C62                     l3402:
  4191  001C62  90D8               	bcf	status,0,c
  4192  001C64  320E               	rrcf	___lwdiv@divisor+1,f,c
  4193  001C66  320D               	rrcf	___lwdiv@divisor,f,c
  4194  001C68  2E0F               	decfsz	___lwdiv@counter,f,c
  4195  001C6A  D7ED               	goto	u3520
  4196  001C6C                     l1216:
  4197  001C6C  C010  F00B         	movff	___lwdiv@quotient,?___lwdiv
  4198  001C70  C011  F00C         	movff	___lwdiv@quotient+1,?___lwdiv+1
  4199  001C74  0012               	return		;funcret
  4200  001C76                     __end_of___lwdiv:
  4201                           	opt callstack 0
  4202                           
  4203 ;; *************** function ___fttol *****************
  4204 ;; Defined at:
  4205 ;;		line 44 in file "/opt/microchip/xc8/v2.05/pic/sources/c90/common/fttol.c"
  4206 ;; Parameters:    Size  Location     Type
  4207 ;;  f1              3   33[COMRAM] float 
  4208 ;; Auto vars:     Size  Location     Type
  4209 ;;  lval            4   43[COMRAM] unsigned long 
  4210 ;;  exp1            1   47[COMRAM] unsigned char 
  4211 ;;  sign1           1   42[COMRAM] unsigned char 
  4212 ;; Return value:  Size  Location     Type
  4213 ;;                  4   33[COMRAM] long 
  4214 ;; Registers used:
  4215 ;;		wreg, status,2, status,0
  4216 ;; Tracked objects:
  4217 ;;		On entry : 0/0
  4218 ;;		On exit  : 0/0
  4219 ;;		Unchanged: 0/0
  4220 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4221 ;;      Params:         4       0       0       0       0       0       0       0       0
  4222 ;;      Locals:         6       0       0       0       0       0       0       0       0
  4223 ;;      Temps:          5       0       0       0       0       0       0       0       0
  4224 ;;      Totals:        15       0       0       0       0       0       0       0       0
  4225 ;;Total ram usage:       15 bytes
  4226 ;; Hardware stack levels used:    1
  4227 ;; Hardware stack levels required when called:    5
  4228 ;; This function calls:
  4229 ;;		Nothing
  4230 ;; This function is called by:
  4231 ;;		_disp7s_write_f
  4232 ;; This function uses a non-reentrant model
  4233 ;;
  4234                           
  4235                           	psect	text24
  4236  001506                     __ptext24:
  4237                           	opt callstack 0
  4238  001506                     ___fttol:
  4239                           	opt callstack 23
  4240                           
  4241                           ;incstack = 0
  4242  001506  C024  F026         	movff	___fttol@f1+2,??___fttol
  4243  00150A  6A27               	clrf	(??___fttol+1)& (0+255),c
  4244  00150C  6A28               	clrf	(??___fttol+2)& (0+255),c
  4245  00150E  3423               	rlcf	___fttol@f1+1,w,c
  4246  001510  3626               	rlcf	??___fttol& (0+255),f,c
  4247  001512  E301               	bnc	u3991
  4248  001514  8027               	bsf	(??___fttol+1)& (0+255),0,c
  4249  001516                     u3991:
  4250  001516  5026               	movf	??___fttol,w,c
  4251  001518  6E30               	movwf	___fttol@exp1,c
  4252  00151A  5030               	movf	___fttol@exp1,w,c
  4253  00151C  A4D8               	btfss	status,2,c
  4254  00151E  D009               	goto	l3642
  4255  001520                     u4000:
  4256  001520  0E00               	movlw	0
  4257  001522  6E22               	movwf	?___fttol,c
  4258  001524  0E00               	movlw	0
  4259  001526  6E23               	movwf	?___fttol+1,c
  4260  001528  0E00               	movlw	0
  4261  00152A  6E24               	movwf	?___fttol+2,c
  4262  00152C  0E00               	movlw	0
  4263  00152E  6E25               	movwf	?___fttol+3,c
  4264  001530  0012               	return	
  4265  001532                     l3642:
  4266  001532  0E17               	movlw	23
  4267  001534  6E26               	movwf	??___fttol& (0+255),c
  4268  001536  C022  F027         	movff	___fttol@f1,??___fttol+1
  4269  00153A  C023  F028         	movff	___fttol@f1+1,??___fttol+2
  4270  00153E  C024  F029         	movff	___fttol@f1+2,??___fttol+3
  4271  001542  2826               	incf	??___fttol,w,c
  4272  001544  6E2A               	movwf	(??___fttol+4)& (0+255),c
  4273  001546  D004               	goto	u4010
  4274  001548                     u4015:
  4275  001548  90D8               	bcf	status,0,c
  4276  00154A  3229               	rrcf	??___fttol+3,f,c
  4277  00154C  3228               	rrcf	??___fttol+2,f,c
  4278  00154E  3227               	rrcf	??___fttol+1,f,c
  4279  001550                     u4010:
  4280  001550  2E2A               	decfsz	(??___fttol+4)& (0+255),f,c
  4281  001552  D7FA               	goto	u4015
  4282  001554  5027               	movf	??___fttol+1,w,c
  4283  001556  6E2B               	movwf	___fttol@sign1,c
  4284  001558  8E23               	bsf	___fttol@f1+1,7,c
  4285  00155A  0EFF               	movlw	255
  4286  00155C  1622               	andwf	___fttol@f1,f,c
  4287  00155E  0EFF               	movlw	255
  4288  001560  1623               	andwf	___fttol@f1+1,f,c
  4289  001562  0E00               	movlw	0
  4290  001564  1624               	andwf	___fttol@f1+2,f,c
  4291  001566  5022               	movf	___fttol@f1,w,c
  4292  001568  6E2C               	movwf	___fttol@lval,c
  4293  00156A  5023               	movf	___fttol@f1+1,w,c
  4294  00156C  6E2D               	movwf	___fttol@lval+1,c
  4295  00156E  5024               	movf	___fttol@f1+2,w,c
  4296  001570  6E2E               	movwf	___fttol@lval+2,c
  4297  001572  6A2F               	clrf	___fttol@lval+3,c
  4298  001574  0E8E               	movlw	142
  4299  001576  5E30               	subwf	___fttol@exp1,f,c
  4300  001578  AE30               	btfss	___fttol@exp1,7,c
  4301  00157A  D00D               	goto	l3664
  4302  00157C  5030               	movf	___fttol@exp1,w,c
  4303  00157E  0A80               	xorlw	128
  4304  001580  0F8F               	addlw	143
  4305  001582  A0D8               	btfss	status,0,c
  4306  001584  D7CD               	goto	u4000
  4307  001586                     l3660:
  4308  001586  90D8               	bcf	status,0,c
  4309  001588  322F               	rrcf	___fttol@lval+3,f,c
  4310  00158A  322E               	rrcf	___fttol@lval+2,f,c
  4311  00158C  322D               	rrcf	___fttol@lval+1,f,c
  4312  00158E  322C               	rrcf	___fttol@lval,f,c
  4313  001590  3E30               	incfsz	___fttol@exp1,f,c
  4314  001592  D7F9               	goto	l3660
  4315  001594  D00D               	goto	u4050
  4316  001596                     l3664:
  4317  001596  0E17               	movlw	23
  4318  001598  6430               	cpfsgt	___fttol@exp1,c
  4319  00159A  D007               	goto	l3672
  4320  00159C  D7C1               	goto	u4000
  4321  00159E                     l3670:
  4322  00159E  90D8               	bcf	status,0,c
  4323  0015A0  362C               	rlcf	___fttol@lval,f,c
  4324  0015A2  362D               	rlcf	___fttol@lval+1,f,c
  4325  0015A4  362E               	rlcf	___fttol@lval+2,f,c
  4326  0015A6  362F               	rlcf	___fttol@lval+3,f,c
  4327  0015A8  0630               	decf	___fttol@exp1,f,c
  4328  0015AA                     l3672:
  4329  0015AA  5030               	movf	___fttol@exp1,w,c
  4330  0015AC  A4D8               	btfss	status,2,c
  4331  0015AE  D7F7               	goto	l3670
  4332  0015B0                     u4050:
  4333  0015B0  502B               	movf	___fttol@sign1,w,c
  4334  0015B2  B4D8               	btfsc	status,2,c
  4335  0015B4  D008               	goto	l3678
  4336  0015B6  1E2F               	comf	___fttol@lval+3,f,c
  4337  0015B8  1E2E               	comf	___fttol@lval+2,f,c
  4338  0015BA  1E2D               	comf	___fttol@lval+1,f,c
  4339  0015BC  6C2C               	negf	___fttol@lval,c
  4340  0015BE  0E00               	movlw	0
  4341  0015C0  222D               	addwfc	___fttol@lval+1,f,c
  4342  0015C2  222E               	addwfc	___fttol@lval+2,f,c
  4343  0015C4  222F               	addwfc	___fttol@lval+3,f,c
  4344  0015C6                     l3678:
  4345  0015C6  C02C  F022         	movff	___fttol@lval,?___fttol
  4346  0015CA  C02D  F023         	movff	___fttol@lval+1,?___fttol+1
  4347  0015CE  C02E  F024         	movff	___fttol@lval+2,?___fttol+2
  4348  0015D2  C02F  F025         	movff	___fttol@lval+3,?___fttol+3
  4349  0015D6  0012               	return		;funcret
  4350  0015D8                     __end_of___fttol:
  4351                           	opt callstack 0
  4352                           
  4353 ;; *************** function ___ftmul *****************
  4354 ;; Defined at:
  4355 ;;		line 62 in file "/opt/microchip/xc8/v2.05/pic/sources/c90/common/ftmul.c"
  4356 ;; Parameters:    Size  Location     Type
  4357 ;;  f1              3   18[COMRAM] float 
  4358 ;;  f2              3   21[COMRAM] float 
  4359 ;; Auto vars:     Size  Location     Type
  4360 ;;  f3_as_produc    3   28[COMRAM] unsigned um
  4361 ;;  sign            1   32[COMRAM] unsigned char 
  4362 ;;  cntr            1   31[COMRAM] unsigned char 
  4363 ;;  exp             1   27[COMRAM] unsigned char 
  4364 ;; Return value:  Size  Location     Type
  4365 ;;                  3   18[COMRAM] float 
  4366 ;; Registers used:
  4367 ;;		wreg, status,2, status,0, cstack
  4368 ;; Tracked objects:
  4369 ;;		On entry : 0/0
  4370 ;;		On exit  : 0/0
  4371 ;;		Unchanged: 0/0
  4372 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4373 ;;      Params:         6       0       0       0       0       0       0       0       0
  4374 ;;      Locals:         6       0       0       0       0       0       0       0       0
  4375 ;;      Temps:          3       0       0       0       0       0       0       0       0
  4376 ;;      Totals:        15       0       0       0       0       0       0       0       0
  4377 ;;Total ram usage:       15 bytes
  4378 ;; Hardware stack levels used:    1
  4379 ;; Hardware stack levels required when called:    6
  4380 ;; This function calls:
  4381 ;;		___ftpack
  4382 ;; This function is called by:
  4383 ;;		_disp7s_write_f
  4384 ;; This function uses a non-reentrant model
  4385 ;;
  4386                           
  4387                           	psect	text25
  4388  001412                     __ptext25:
  4389                           	opt callstack 0
  4390  001412                     ___ftmul:
  4391                           	opt callstack 22
  4392                           
  4393                           ;incstack = 0
  4394  001412  C015  F019         	movff	___ftmul@f1+2,??___ftmul
  4395  001416  6A1A               	clrf	(??___ftmul+1)& (0+255),c
  4396  001418  6A1B               	clrf	(??___ftmul+2)& (0+255),c
  4397  00141A  3414               	rlcf	___ftmul@f1+1,w,c
  4398  00141C  3619               	rlcf	??___ftmul& (0+255),f,c
  4399  00141E  E301               	bnc	u3901
  4400  001420  801A               	bsf	(??___ftmul+1)& (0+255),0,c
  4401  001422                     u3901:
  4402  001422  5019               	movf	??___ftmul,w,c
  4403  001424  6E1C               	movwf	___ftmul@exp,c
  4404  001426  501C               	movf	___ftmul@exp,w,c
  4405  001428  A4D8               	btfss	status,2,c
  4406  00142A  D007               	goto	l3576
  4407  00142C  0E00               	movlw	0
  4408  00142E  6E13               	movwf	?___ftmul,c
  4409  001430  0E00               	movlw	0
  4410  001432  6E14               	movwf	?___ftmul+1,c
  4411  001434  0E00               	movlw	0
  4412  001436  6E15               	movwf	?___ftmul+2,c
  4413  001438  0012               	return	
  4414  00143A                     l3576:
  4415  00143A  C018  F019         	movff	___ftmul@f2+2,??___ftmul
  4416  00143E  6A1A               	clrf	(??___ftmul+1)& (0+255),c
  4417  001440  6A1B               	clrf	(??___ftmul+2)& (0+255),c
  4418  001442  3417               	rlcf	___ftmul@f2+1,w,c
  4419  001444  3619               	rlcf	??___ftmul& (0+255),f,c
  4420  001446  E301               	bnc	u3921
  4421  001448  801A               	bsf	(??___ftmul+1)& (0+255),0,c
  4422  00144A                     u3921:
  4423  00144A  5019               	movf	??___ftmul,w,c
  4424  00144C  6E21               	movwf	___ftmul@sign,c
  4425  00144E  5021               	movf	___ftmul@sign,w,c
  4426  001450  A4D8               	btfss	status,2,c
  4427  001452  D007               	goto	l3582
  4428  001454  0E00               	movlw	0
  4429  001456  6E13               	movwf	?___ftmul,c
  4430  001458  0E00               	movlw	0
  4431  00145A  6E14               	movwf	?___ftmul+1,c
  4432  00145C  0E00               	movlw	0
  4433  00145E  6E15               	movwf	?___ftmul+2,c
  4434  001460  0012               	return	
  4435  001462                     l3582:
  4436  001462  5021               	movf	___ftmul@sign,w,c
  4437  001464  0F7B               	addlw	123
  4438  001466  261C               	addwf	___ftmul@exp,f,c
  4439  001468  C015  F021         	movff	___ftmul@f1+2,___ftmul@sign
  4440  00146C  5018               	movf	___ftmul@f2+2,w,c
  4441  00146E  1A21               	xorwf	___ftmul@sign,f,c
  4442  001470  0E80               	movlw	128
  4443  001472  1621               	andwf	___ftmul@sign,f,c
  4444  001474  8E14               	bsf	___ftmul@f1+1,7,c
  4445  001476  8E17               	bsf	___ftmul@f2+1,7,c
  4446  001478  0EFF               	movlw	255
  4447  00147A  1616               	andwf	___ftmul@f2,f,c
  4448  00147C  0EFF               	movlw	255
  4449  00147E  1617               	andwf	___ftmul@f2+1,f,c
  4450  001480  0E00               	movlw	0
  4451  001482  1618               	andwf	___ftmul@f2+2,f,c
  4452  001484  0E00               	movlw	0
  4453  001486  6E1D               	movwf	___ftmul@f3_as_product,c
  4454  001488  0E00               	movlw	0
  4455  00148A  6E1E               	movwf	___ftmul@f3_as_product+1,c
  4456  00148C  0E00               	movlw	0
  4457  00148E  6E1F               	movwf	___ftmul@f3_as_product+2,c
  4458  001490  0E07               	movlw	7
  4459  001492  6E20               	movwf	___ftmul@cntr,c
  4460  001494                     l3596:
  4461  001494  A013               	btfss	___ftmul@f1,0,c
  4462  001496  D006               	goto	l3600
  4463  001498  5016               	movf	___ftmul@f2,w,c
  4464  00149A  261D               	addwf	___ftmul@f3_as_product,f,c
  4465  00149C  5017               	movf	___ftmul@f2+1,w,c
  4466  00149E  221E               	addwfc	___ftmul@f3_as_product+1,f,c
  4467  0014A0  5018               	movf	___ftmul@f2+2,w,c
  4468  0014A2  221F               	addwfc	___ftmul@f3_as_product+2,f,c
  4469  0014A4                     l3600:
  4470  0014A4  90D8               	bcf	status,0,c
  4471  0014A6  3215               	rrcf	___ftmul@f1+2,f,c
  4472  0014A8  3214               	rrcf	___ftmul@f1+1,f,c
  4473  0014AA  3213               	rrcf	___ftmul@f1,f,c
  4474  0014AC  90D8               	bcf	status,0,c
  4475  0014AE  3616               	rlcf	___ftmul@f2,f,c
  4476  0014B0  3617               	rlcf	___ftmul@f2+1,f,c
  4477  0014B2  3618               	rlcf	___ftmul@f2+2,f,c
  4478  0014B4  2E20               	decfsz	___ftmul@cntr,f,c
  4479  0014B6  D7EE               	goto	l3596
  4480  0014B8  0E09               	movlw	9
  4481  0014BA  6E20               	movwf	___ftmul@cntr,c
  4482  0014BC                     l3606:
  4483  0014BC  A013               	btfss	___ftmul@f1,0,c
  4484  0014BE  D006               	goto	l3610
  4485  0014C0  5016               	movf	___ftmul@f2,w,c
  4486  0014C2  261D               	addwf	___ftmul@f3_as_product,f,c
  4487  0014C4  5017               	movf	___ftmul@f2+1,w,c
  4488  0014C6  221E               	addwfc	___ftmul@f3_as_product+1,f,c
  4489  0014C8  5018               	movf	___ftmul@f2+2,w,c
  4490  0014CA  221F               	addwfc	___ftmul@f3_as_product+2,f,c
  4491  0014CC                     l3610:
  4492  0014CC  90D8               	bcf	status,0,c
  4493  0014CE  3215               	rrcf	___ftmul@f1+2,f,c
  4494  0014D0  3214               	rrcf	___ftmul@f1+1,f,c
  4495  0014D2  3213               	rrcf	___ftmul@f1,f,c
  4496  0014D4  90D8               	bcf	status,0,c
  4497  0014D6  321F               	rrcf	___ftmul@f3_as_product+2,f,c
  4498  0014D8  321E               	rrcf	___ftmul@f3_as_product+1,f,c
  4499  0014DA  321D               	rrcf	___ftmul@f3_as_product,f,c
  4500  0014DC  2E20               	decfsz	___ftmul@cntr,f,c
  4501  0014DE  D7EE               	goto	l3606
  4502  0014E0  C01D  F00B         	movff	___ftmul@f3_as_product,___ftpack@arg
  4503  0014E4  C01E  F00C         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  4504  0014E8  C01F  F00D         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  4505  0014EC  C01C  F00E         	movff	___ftmul@exp,___ftpack@exp
  4506  0014F0  C021  F00F         	movff	___ftmul@sign,___ftpack@sign
  4507  0014F4  ECAA  F00B         	call	___ftpack	;wreg free
  4508  0014F8  C00B  F013         	movff	?___ftpack,?___ftmul
  4509  0014FC  C00C  F014         	movff	?___ftpack+1,?___ftmul+1
  4510  001500  C00D  F015         	movff	?___ftpack+2,?___ftmul+2
  4511  001504  0012               	return		;funcret
  4512  001506                     __end_of___ftmul:
  4513                           	opt callstack 0
  4514                           
  4515 ;; *************** function ___ftge *****************
  4516 ;; Defined at:
  4517 ;;		line 4 in file "/opt/microchip/xc8/v2.05/pic/sources/c90/common/ftge.c"
  4518 ;; Parameters:    Size  Location     Type
  4519 ;;  ff1             3   21[COMRAM] float 
  4520 ;;  ff2             3   24[COMRAM] float 
  4521 ;; Auto vars:     Size  Location     Type
  4522 ;;		None
  4523 ;; Return value:  Size  Location     Type
  4524 ;;		None               void
  4525 ;; Registers used:
  4526 ;;		wreg, status,2, status,0
  4527 ;; Tracked objects:
  4528 ;;		On entry : 0/0
  4529 ;;		On exit  : 0/0
  4530 ;;		Unchanged: 0/0
  4531 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4532 ;;      Params:         6       0       0       0       0       0       0       0       0
  4533 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4534 ;;      Temps:          3       0       0       0       0       0       0       0       0
  4535 ;;      Totals:         9       0       0       0       0       0       0       0       0
  4536 ;;Total ram usage:        9 bytes
  4537 ;; Hardware stack levels used:    1
  4538 ;; Hardware stack levels required when called:    5
  4539 ;; This function calls:
  4540 ;;		Nothing
  4541 ;; This function is called by:
  4542 ;;		_ikey_parsing
  4543 ;;		_disp7s_write_f
  4544 ;; This function uses a non-reentrant model
  4545 ;;
  4546                           
  4547                           	psect	text26
  4548  001A30                     __ptext26:
  4549                           	opt callstack 0
  4550  001A30                     ___ftge:
  4551                           	opt callstack 23
  4552                           
  4553                           ;incstack = 0
  4554  001A30  AE18               	btfss	___ftge@ff1+2,7,c
  4555  001A32  D00F               	goto	l3622
  4556  001A34  0E00               	movlw	0
  4557  001A36  6E1C               	movwf	??___ftge& (0+255),c
  4558  001A38  0E00               	movlw	0
  4559  001A3A  6E1D               	movwf	(??___ftge+1)& (0+255),c
  4560  001A3C  0E80               	movlw	128
  4561  001A3E  6E1E               	movwf	(??___ftge+2)& (0+255),c
  4562  001A40  5016               	movf	___ftge@ff1,w,c
  4563  001A42  5C1C               	subwf	??___ftge,w,c
  4564  001A44  6E16               	movwf	___ftge@ff1,c
  4565  001A46  5017               	movf	___ftge@ff1+1,w,c
  4566  001A48  581D               	subwfb	??___ftge+1,w,c
  4567  001A4A  6E17               	movwf	___ftge@ff1+1,c
  4568  001A4C  5018               	movf	___ftge@ff1+2,w,c
  4569  001A4E  581E               	subwfb	??___ftge+2,w,c
  4570  001A50  6E18               	movwf	___ftge@ff1+2,c
  4571  001A52                     l3622:
  4572  001A52  AE1B               	btfss	___ftge@ff2+2,7,c
  4573  001A54  D00F               	goto	l3626
  4574  001A56  0E00               	movlw	0
  4575  001A58  6E1C               	movwf	??___ftge& (0+255),c
  4576  001A5A  0E00               	movlw	0
  4577  001A5C  6E1D               	movwf	(??___ftge+1)& (0+255),c
  4578  001A5E  0E80               	movlw	128
  4579  001A60  6E1E               	movwf	(??___ftge+2)& (0+255),c
  4580  001A62  5019               	movf	___ftge@ff2,w,c
  4581  001A64  5C1C               	subwf	??___ftge,w,c
  4582  001A66  6E19               	movwf	___ftge@ff2,c
  4583  001A68  501A               	movf	___ftge@ff2+1,w,c
  4584  001A6A  581D               	subwfb	??___ftge+1,w,c
  4585  001A6C  6E1A               	movwf	___ftge@ff2+1,c
  4586  001A6E  501B               	movf	___ftge@ff2+2,w,c
  4587  001A70  581E               	subwfb	??___ftge+2,w,c
  4588  001A72  6E1B               	movwf	___ftge@ff2+2,c
  4589  001A74                     l3626:
  4590  001A74  0E00               	movlw	0
  4591  001A76  1A16               	xorwf	___ftge@ff1,f,c
  4592  001A78  0E00               	movlw	0
  4593  001A7A  1A17               	xorwf	___ftge@ff1+1,f,c
  4594  001A7C  0E80               	movlw	128
  4595  001A7E  1A18               	xorwf	___ftge@ff1+2,f,c
  4596  001A80  0E00               	movlw	0
  4597  001A82  1A19               	xorwf	___ftge@ff2,f,c
  4598  001A84  0E00               	movlw	0
  4599  001A86  1A1A               	xorwf	___ftge@ff2+1,f,c
  4600  001A88  0E80               	movlw	128
  4601  001A8A  1A1B               	xorwf	___ftge@ff2+2,f,c
  4602  001A8C  5019               	movf	___ftge@ff2,w,c
  4603  001A8E  5C16               	subwf	___ftge@ff1,w,c
  4604  001A90  501A               	movf	___ftge@ff2+1,w,c
  4605  001A92  5817               	subwfb	___ftge@ff1+1,w,c
  4606  001A94  501B               	movf	___ftge@ff2+2,w,c
  4607  001A96  5818               	subwfb	___ftge@ff1+2,w,c
  4608  001A98  B0D8               	btfsc	status,0,c
  4609  001A9A  D002               	goto	l3632
  4610  001A9C  90D8               	bcf	status,0,c
  4611  001A9E  0012               	return	
  4612  001AA0                     l3632:
  4613  001AA0  80D8               	bsf	status,0,c
  4614  001AA2  0012               	return		;funcret
  4615  001AA4                     __end_of___ftge:
  4616                           	opt callstack 0
  4617                           
  4618 ;; *************** function ___ftadd *****************
  4619 ;; Defined at:
  4620 ;;		line 86 in file "/opt/microchip/xc8/v2.05/pic/sources/c90/common/ftadd.c"
  4621 ;; Parameters:    Size  Location     Type
  4622 ;;  f1              3   18[COMRAM] float 
  4623 ;;  f2              3   21[COMRAM] float 
  4624 ;; Auto vars:     Size  Location     Type
  4625 ;;  exp1            1   29[COMRAM] unsigned char 
  4626 ;;  exp2            1   28[COMRAM] unsigned char 
  4627 ;;  sign            1   27[COMRAM] unsigned char 
  4628 ;; Return value:  Size  Location     Type
  4629 ;;                  3   18[COMRAM] float 
  4630 ;; Registers used:
  4631 ;;		wreg, status,2, status,0, cstack
  4632 ;; Tracked objects:
  4633 ;;		On entry : 0/0
  4634 ;;		On exit  : 0/0
  4635 ;;		Unchanged: 0/0
  4636 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4637 ;;      Params:         6       0       0       0       0       0       0       0       0
  4638 ;;      Locals:         3       0       0       0       0       0       0       0       0
  4639 ;;      Temps:          3       0       0       0       0       0       0       0       0
  4640 ;;      Totals:        12       0       0       0       0       0       0       0       0
  4641 ;;Total ram usage:       12 bytes
  4642 ;; Hardware stack levels used:    1
  4643 ;; Hardware stack levels required when called:    6
  4644 ;; This function calls:
  4645 ;;		___ftpack
  4646 ;; This function is called by:
  4647 ;;		_disp7s_write_f
  4648 ;; This function uses a non-reentrant model
  4649 ;;
  4650                           
  4651                           	psect	text27
  4652  0010CA                     __ptext27:
  4653                           	opt callstack 0
  4654  0010CA                     ___ftadd:
  4655                           	opt callstack 22
  4656                           
  4657                           ;incstack = 0
  4658  0010CA  C015  F019         	movff	___ftadd@f1+2,??___ftadd
  4659  0010CE  6A1A               	clrf	(??___ftadd+1)& (0+255),c
  4660  0010D0  6A1B               	clrf	(??___ftadd+2)& (0+255),c
  4661  0010D2  3414               	rlcf	___ftadd@f1+1,w,c
  4662  0010D4  3619               	rlcf	??___ftadd& (0+255),f,c
  4663  0010D6  E301               	bnc	u3691
  4664  0010D8  801A               	bsf	(??___ftadd+1)& (0+255),0,c
  4665  0010DA                     u3691:
  4666  0010DA  5019               	movf	??___ftadd,w,c
  4667  0010DC  6E1E               	movwf	___ftadd@exp1,c
  4668  0010DE  C018  F019         	movff	___ftadd@f2+2,??___ftadd
  4669  0010E2  6A1A               	clrf	(??___ftadd+1)& (0+255),c
  4670  0010E4  6A1B               	clrf	(??___ftadd+2)& (0+255),c
  4671  0010E6  3417               	rlcf	___ftadd@f2+1,w,c
  4672  0010E8  3619               	rlcf	??___ftadd& (0+255),f,c
  4673  0010EA  E301               	bnc	u3701
  4674  0010EC  801A               	bsf	(??___ftadd+1)& (0+255),0,c
  4675  0010EE                     u3701:
  4676  0010EE  5019               	movf	??___ftadd,w,c
  4677  0010F0  6E1D               	movwf	___ftadd@exp2,c
  4678  0010F2  501E               	movf	___ftadd@exp1,w,c
  4679  0010F4  B4D8               	btfsc	status,2,c
  4680  0010F6  D00A               	goto	u3730
  4681  0010F8  501D               	movf	___ftadd@exp2,w,c
  4682  0010FA  5C1E               	subwf	___ftadd@exp1,w,c
  4683  0010FC  B0D8               	btfsc	status,0,c
  4684  0010FE  D00D               	goto	l3508
  4685  001100  501E               	movf	___ftadd@exp1,w,c
  4686  001102  5C1D               	subwf	___ftadd@exp2,w,c
  4687  001104  6E19               	movwf	??___ftadd& (0+255),c
  4688  001106  0E18               	movlw	24
  4689  001108  6419               	cpfsgt	??___ftadd,c
  4690  00110A  D007               	goto	l3508
  4691  00110C                     u3730:
  4692  00110C  C016  F013         	movff	___ftadd@f2,?___ftadd
  4693  001110  C017  F014         	movff	___ftadd@f2+1,?___ftadd+1
  4694  001114  C018  F015         	movff	___ftadd@f2+2,?___ftadd+2
  4695  001118  0012               	return	
  4696  00111A                     l3508:
  4697  00111A  501D               	movf	___ftadd@exp2,w,c
  4698  00111C  B4D8               	btfsc	status,2,c
  4699  00111E  D00A               	goto	u3760
  4700  001120  501E               	movf	___ftadd@exp1,w,c
  4701  001122  5C1D               	subwf	___ftadd@exp2,w,c
  4702  001124  B0D8               	btfsc	status,0,c
  4703  001126  D00D               	goto	l3514
  4704  001128  501D               	movf	___ftadd@exp2,w,c
  4705  00112A  5C1E               	subwf	___ftadd@exp1,w,c
  4706  00112C  6E19               	movwf	??___ftadd& (0+255),c
  4707  00112E  0E18               	movlw	24
  4708  001130  6419               	cpfsgt	??___ftadd,c
  4709  001132  D007               	goto	l3514
  4710  001134                     u3760:
  4711  001134  C013  F013         	movff	___ftadd@f1,?___ftadd
  4712  001138  C014  F014         	movff	___ftadd@f1+1,?___ftadd+1
  4713  00113C  C015  F015         	movff	___ftadd@f1+2,?___ftadd+2
  4714  001140  0012               	return	
  4715  001142                     l3514:
  4716  001142  0E06               	movlw	6
  4717  001144  6E1C               	movwf	___ftadd@sign,c
  4718  001146  BE15               	btfsc	___ftadd@f1+2,7,c
  4719  001148  8E1C               	bsf	___ftadd@sign,7,c
  4720  00114A  BE18               	btfsc	___ftadd@f2+2,7,c
  4721  00114C  8C1C               	bsf	___ftadd@sign,6,c
  4722  00114E  8E14               	bsf	___ftadd@f1+1,7,c
  4723  001150  0EFF               	movlw	255
  4724  001152  1613               	andwf	___ftadd@f1,f,c
  4725  001154  0EFF               	movlw	255
  4726  001156  1614               	andwf	___ftadd@f1+1,f,c
  4727  001158  0E00               	movlw	0
  4728  00115A  1615               	andwf	___ftadd@f1+2,f,c
  4729  00115C  8E17               	bsf	___ftadd@f2+1,7,c
  4730  00115E  0EFF               	movlw	255
  4731  001160  1616               	andwf	___ftadd@f2,f,c
  4732  001162  0EFF               	movlw	255
  4733  001164  1617               	andwf	___ftadd@f2+1,f,c
  4734  001166  0E00               	movlw	0
  4735  001168  1618               	andwf	___ftadd@f2+2,f,c
  4736  00116A  501D               	movf	___ftadd@exp2,w,c
  4737  00116C  5C1E               	subwf	___ftadd@exp1,w,c
  4738  00116E  B0D8               	btfsc	status,0,c
  4739  001170  D01B               	goto	l3540
  4740  001172                     u3790:
  4741  001172  90D8               	bcf	status,0,c
  4742  001174  3616               	rlcf	___ftadd@f2,f,c
  4743  001176  3617               	rlcf	___ftadd@f2+1,f,c
  4744  001178  3618               	rlcf	___ftadd@f2+2,f,c
  4745  00117A  061D               	decf	___ftadd@exp2,f,c
  4746  00117C  501E               	movf	___ftadd@exp1,w,c
  4747  00117E  181D               	xorwf	___ftadd@exp2,w,c
  4748  001180  B4D8               	btfsc	status,2,c
  4749  001182  D00D               	goto	l3538
  4750  001184  061C               	decf	___ftadd@sign,f,c
  4751  001186  C01C  F019         	movff	___ftadd@sign,??___ftadd
  4752  00118A  0E07               	movlw	7
  4753  00118C  1619               	andwf	??___ftadd,f,c
  4754  00118E  B4D8               	btfsc	status,2,c
  4755  001190  D006               	goto	l3538
  4756  001192  D7EF               	goto	u3790
  4757  001194                     l3536:
  4758  001194  90D8               	bcf	status,0,c
  4759  001196  3215               	rrcf	___ftadd@f1+2,f,c
  4760  001198  3214               	rrcf	___ftadd@f1+1,f,c
  4761  00119A  3213               	rrcf	___ftadd@f1,f,c
  4762  00119C  2A1E               	incf	___ftadd@exp1,f,c
  4763  00119E                     l3538:
  4764  00119E  501D               	movf	___ftadd@exp2,w,c
  4765  0011A0  181E               	xorwf	___ftadd@exp1,w,c
  4766  0011A2  B4D8               	btfsc	status,2,c
  4767  0011A4  D01F               	goto	u3860
  4768  0011A6  D7F6               	goto	l3536
  4769  0011A8                     l3540:
  4770  0011A8  501E               	movf	___ftadd@exp1,w,c
  4771  0011AA  5C1D               	subwf	___ftadd@exp2,w,c
  4772  0011AC  B0D8               	btfsc	status,0,c
  4773  0011AE  D01A               	goto	u3860
  4774  0011B0                     u3830:
  4775  0011B0  90D8               	bcf	status,0,c
  4776  0011B2  3613               	rlcf	___ftadd@f1,f,c
  4777  0011B4  3614               	rlcf	___ftadd@f1+1,f,c
  4778  0011B6  3615               	rlcf	___ftadd@f1+2,f,c
  4779  0011B8  061E               	decf	___ftadd@exp1,f,c
  4780  0011BA  501E               	movf	___ftadd@exp1,w,c
  4781  0011BC  181D               	xorwf	___ftadd@exp2,w,c
  4782  0011BE  B4D8               	btfsc	status,2,c
  4783  0011C0  D00D               	goto	l3550
  4784  0011C2  061C               	decf	___ftadd@sign,f,c
  4785  0011C4  C01C  F019         	movff	___ftadd@sign,??___ftadd
  4786  0011C8  0E07               	movlw	7
  4787  0011CA  1619               	andwf	??___ftadd,f,c
  4788  0011CC  B4D8               	btfsc	status,2,c
  4789  0011CE  D006               	goto	l3550
  4790  0011D0  D7EF               	goto	u3830
  4791  0011D2                     l3548:
  4792  0011D2  90D8               	bcf	status,0,c
  4793  0011D4  3218               	rrcf	___ftadd@f2+2,f,c
  4794  0011D6  3217               	rrcf	___ftadd@f2+1,f,c
  4795  0011D8  3216               	rrcf	___ftadd@f2,f,c
  4796  0011DA  2A1D               	incf	___ftadd@exp2,f,c
  4797  0011DC                     l3550:
  4798  0011DC  501D               	movf	___ftadd@exp2,w,c
  4799  0011DE  181E               	xorwf	___ftadd@exp1,w,c
  4800  0011E0  A4D8               	btfss	status,2,c
  4801  0011E2  D7F7               	goto	l3548
  4802  0011E4                     u3860:
  4803  0011E4  AE1C               	btfss	___ftadd@sign,7,c
  4804  0011E6  D00C               	goto	l1067
  4805  0011E8  0EFF               	movlw	255
  4806  0011EA  1A13               	xorwf	___ftadd@f1,f,c
  4807  0011EC  0EFF               	movlw	255
  4808  0011EE  1A14               	xorwf	___ftadd@f1+1,f,c
  4809  0011F0  0EFF               	movlw	255
  4810  0011F2  1A15               	xorwf	___ftadd@f1+2,f,c
  4811  0011F4  0E01               	movlw	1
  4812  0011F6  2613               	addwf	___ftadd@f1,f,c
  4813  0011F8  0E00               	movlw	0
  4814  0011FA  2214               	addwfc	___ftadd@f1+1,f,c
  4815  0011FC  0E00               	movlw	0
  4816  0011FE  2215               	addwfc	___ftadd@f1+2,f,c
  4817  001200                     l1067:
  4818  001200  AC1C               	btfss	___ftadd@sign,6,c
  4819  001202  D00C               	goto	l3556
  4820  001204  0EFF               	movlw	255
  4821  001206  1A16               	xorwf	___ftadd@f2,f,c
  4822  001208  0EFF               	movlw	255
  4823  00120A  1A17               	xorwf	___ftadd@f2+1,f,c
  4824  00120C  0EFF               	movlw	255
  4825  00120E  1A18               	xorwf	___ftadd@f2+2,f,c
  4826  001210  0E01               	movlw	1
  4827  001212  2616               	addwf	___ftadd@f2,f,c
  4828  001214  0E00               	movlw	0
  4829  001216  2217               	addwfc	___ftadd@f2+1,f,c
  4830  001218  0E00               	movlw	0
  4831  00121A  2218               	addwfc	___ftadd@f2+2,f,c
  4832  00121C                     l3556:
  4833  00121C  0E00               	movlw	0
  4834  00121E  6E1C               	movwf	___ftadd@sign,c
  4835  001220  5013               	movf	___ftadd@f1,w,c
  4836  001222  2616               	addwf	___ftadd@f2,f,c
  4837  001224  5014               	movf	___ftadd@f1+1,w,c
  4838  001226  2217               	addwfc	___ftadd@f2+1,f,c
  4839  001228  5015               	movf	___ftadd@f1+2,w,c
  4840  00122A  2218               	addwfc	___ftadd@f2+2,f,c
  4841  00122C  AE18               	btfss	___ftadd@f2+2,7,c
  4842  00122E  D00E               	goto	l3566
  4843  001230  0EFF               	movlw	255
  4844  001232  1A16               	xorwf	___ftadd@f2,f,c
  4845  001234  0EFF               	movlw	255
  4846  001236  1A17               	xorwf	___ftadd@f2+1,f,c
  4847  001238  0EFF               	movlw	255
  4848  00123A  1A18               	xorwf	___ftadd@f2+2,f,c
  4849  00123C  0E01               	movlw	1
  4850  00123E  2616               	addwf	___ftadd@f2,f,c
  4851  001240  0E00               	movlw	0
  4852  001242  2217               	addwfc	___ftadd@f2+1,f,c
  4853  001244  0E00               	movlw	0
  4854  001246  2218               	addwfc	___ftadd@f2+2,f,c
  4855  001248  0E01               	movlw	1
  4856  00124A  6E1C               	movwf	___ftadd@sign,c
  4857  00124C                     l3566:
  4858  00124C  C016  F00B         	movff	___ftadd@f2,___ftpack@arg
  4859  001250  C017  F00C         	movff	___ftadd@f2+1,___ftpack@arg+1
  4860  001254  C018  F00D         	movff	___ftadd@f2+2,___ftpack@arg+2
  4861  001258  C01E  F00E         	movff	___ftadd@exp1,___ftpack@exp
  4862  00125C  C01C  F00F         	movff	___ftadd@sign,___ftpack@sign
  4863  001260  ECAA  F00B         	call	___ftpack	;wreg free
  4864  001264  C00B  F013         	movff	?___ftpack,?___ftadd
  4865  001268  C00C  F014         	movff	?___ftpack+1,?___ftadd+1
  4866  00126C  C00D  F015         	movff	?___ftpack+2,?___ftadd+2
  4867  001270  0012               	return		;funcret
  4868  001272                     __end_of___ftadd:
  4869                           	opt callstack 0
  4870                           
  4871 ;; *************** function ___ftpack *****************
  4872 ;; Defined at:
  4873 ;;		line 62 in file "/opt/microchip/xc8/v2.05/pic/sources/c90/common/float.c"
  4874 ;; Parameters:    Size  Location     Type
  4875 ;;  arg             3   10[COMRAM] unsigned um
  4876 ;;  exp             1   13[COMRAM] unsigned char 
  4877 ;;  sign            1   14[COMRAM] unsigned char 
  4878 ;; Auto vars:     Size  Location     Type
  4879 ;;		None
  4880 ;; Return value:  Size  Location     Type
  4881 ;;                  3   10[COMRAM] float 
  4882 ;; Registers used:
  4883 ;;		wreg, status,2, status,0
  4884 ;; Tracked objects:
  4885 ;;		On entry : 0/0
  4886 ;;		On exit  : 0/0
  4887 ;;		Unchanged: 0/0
  4888 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4889 ;;      Params:         5       0       0       0       0       0       0       0       0
  4890 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4891 ;;      Temps:          3       0       0       0       0       0       0       0       0
  4892 ;;      Totals:         8       0       0       0       0       0       0       0       0
  4893 ;;Total ram usage:        8 bytes
  4894 ;; Hardware stack levels used:    1
  4895 ;; Hardware stack levels required when called:    5
  4896 ;; This function calls:
  4897 ;;		Nothing
  4898 ;; This function is called by:
  4899 ;;		___ftadd
  4900 ;;		___ftmul
  4901 ;;		___lwtoft
  4902 ;; This function uses a non-reentrant model
  4903 ;;
  4904                           
  4905                           	psect	text28
  4906  001754                     __ptext28:
  4907                           	opt callstack 0
  4908  001754                     ___ftpack:
  4909                           	opt callstack 22
  4910                           
  4911                           ;incstack = 0
  4912  001754  500E               	movf	___ftpack@exp,w,c
  4913  001756  B4D8               	btfsc	status,2,c
  4914  001758  D005               	goto	u3580
  4915  00175A  500B               	movf	___ftpack@arg,w,c
  4916  00175C  100C               	iorwf	___ftpack@arg+1,w,c
  4917  00175E  100D               	iorwf	___ftpack@arg+2,w,c
  4918  001760  A4D8               	btfss	status,2,c
  4919  001762  D00C               	goto	l3432
  4920  001764                     u3580:
  4921  001764  0E00               	movlw	0
  4922  001766  6E0B               	movwf	?___ftpack,c
  4923  001768  0E00               	movlw	0
  4924  00176A  6E0C               	movwf	?___ftpack+1,c
  4925  00176C  0E00               	movlw	0
  4926  00176E  6E0D               	movwf	?___ftpack+2,c
  4927  001770  0012               	return	
  4928  001772                     l3430:
  4929  001772  2A0E               	incf	___ftpack@exp,f,c
  4930  001774  90D8               	bcf	status,0,c
  4931  001776  320D               	rrcf	___ftpack@arg+2,f,c
  4932  001778  320C               	rrcf	___ftpack@arg+1,f,c
  4933  00177A  320B               	rrcf	___ftpack@arg,f,c
  4934  00177C                     l3432:
  4935  00177C  0E00               	movlw	0
  4936  00177E  140B               	andwf	___ftpack@arg,w,c
  4937  001780  6E10               	movwf	??___ftpack& (0+255),c
  4938  001782  0E00               	movlw	0
  4939  001784  140C               	andwf	___ftpack@arg+1,w,c
  4940  001786  6E11               	movwf	(??___ftpack+1)& (0+255),c
  4941  001788  0EFE               	movlw	254
  4942  00178A  140D               	andwf	___ftpack@arg+2,w,c
  4943  00178C  6E12               	movwf	(??___ftpack+2)& (0+255),c
  4944  00178E  5010               	movf	??___ftpack,w,c
  4945  001790  1011               	iorwf	??___ftpack+1,w,c
  4946  001792  1012               	iorwf	??___ftpack+2,w,c
  4947  001794  B4D8               	btfsc	status,2,c
  4948  001796  D00C               	goto	l3438
  4949  001798  D7EC               	goto	l3430
  4950  00179A                     l3434:
  4951  00179A  2A0E               	incf	___ftpack@exp,f,c
  4952  00179C  0E01               	movlw	1
  4953  00179E  260B               	addwf	___ftpack@arg,f,c
  4954  0017A0  0E00               	movlw	0
  4955  0017A2  220C               	addwfc	___ftpack@arg+1,f,c
  4956  0017A4  0E00               	movlw	0
  4957  0017A6  220D               	addwfc	___ftpack@arg+2,f,c
  4958  0017A8  90D8               	bcf	status,0,c
  4959  0017AA  320D               	rrcf	___ftpack@arg+2,f,c
  4960  0017AC  320C               	rrcf	___ftpack@arg+1,f,c
  4961  0017AE  320B               	rrcf	___ftpack@arg,f,c
  4962  0017B0                     l3438:
  4963  0017B0  0E00               	movlw	0
  4964  0017B2  140B               	andwf	___ftpack@arg,w,c
  4965  0017B4  6E10               	movwf	??___ftpack& (0+255),c
  4966  0017B6  0E00               	movlw	0
  4967  0017B8  140C               	andwf	___ftpack@arg+1,w,c
  4968  0017BA  6E11               	movwf	(??___ftpack+1)& (0+255),c
  4969  0017BC  0EFF               	movlw	255
  4970  0017BE  140D               	andwf	___ftpack@arg+2,w,c
  4971  0017C0  6E12               	movwf	(??___ftpack+2)& (0+255),c
  4972  0017C2  5010               	movf	??___ftpack,w,c
  4973  0017C4  1011               	iorwf	??___ftpack+1,w,c
  4974  0017C6  1012               	iorwf	??___ftpack+2,w,c
  4975  0017C8  B4D8               	btfsc	status,2,c
  4976  0017CA  D006               	goto	l3442
  4977  0017CC  D7E6               	goto	l3434
  4978  0017CE                     l3440:
  4979  0017CE  060E               	decf	___ftpack@exp,f,c
  4980  0017D0  90D8               	bcf	status,0,c
  4981  0017D2  360B               	rlcf	___ftpack@arg,f,c
  4982  0017D4  360C               	rlcf	___ftpack@arg+1,f,c
  4983  0017D6  360D               	rlcf	___ftpack@arg+2,f,c
  4984  0017D8                     l3442:
  4985  0017D8  BE0C               	btfsc	___ftpack@arg+1,7,c
  4986  0017DA  D003               	goto	u3620
  4987  0017DC  0E02               	movlw	2
  4988  0017DE  600E               	cpfslt	___ftpack@exp,c
  4989  0017E0  D7F6               	goto	l3440
  4990  0017E2                     u3620:
  4991  0017E2  A00E               	btfss	___ftpack@exp,0,c
  4992  0017E4  9E0C               	bcf	___ftpack@arg+1,7,c
  4993  0017E6  90D8               	bcf	status,0,c
  4994  0017E8  320E               	rrcf	___ftpack@exp,f,c
  4995  0017EA  500E               	movf	___ftpack@exp,w,c
  4996  0017EC  120D               	iorwf	___ftpack@arg+2,f,c
  4997  0017EE  500F               	movf	___ftpack@sign,w,c
  4998  0017F0  A4D8               	btfss	status,2,c
  4999  0017F2  8E0D               	bsf	___ftpack@arg+2,7,c
  5000  0017F4  C00B  F00B         	movff	___ftpack@arg,?___ftpack
  5001  0017F8  C00C  F00C         	movff	___ftpack@arg+1,?___ftpack+1
  5002  0017FC  C00D  F00D         	movff	___ftpack@arg+2,?___ftpack+2
  5003  001800  0012               	return		;funcret
  5004  001802                     __end_of___ftpack:
  5005                           	opt callstack 0
  5006                           
  5007 ;; *************** function _disp7s_job *****************
  5008 ;; Defined at:
  5009 ;;		line 128 in file "display.c"
  5010 ;; Parameters:    Size  Location     Type
  5011 ;;		None
  5012 ;; Auto vars:     Size  Location     Type
  5013 ;;  pq              1   20[COMRAM] char 
  5014 ;; Return value:  Size  Location     Type
  5015 ;;                  1    wreg      void 
  5016 ;; Registers used:
  5017 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
  5018 ;; Tracked objects:
  5019 ;;		On entry : 0/0
  5020 ;;		On exit  : 0/0
  5021 ;;		Unchanged: 0/0
  5022 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5023 ;;      Params:         0       0       0       0       0       0       0       0       0
  5024 ;;      Locals:         1       0       0       0       0       0       0       0       0
  5025 ;;      Temps:          2       0       0       0       0       0       0       0       0
  5026 ;;      Totals:         3       0       0       0       0       0       0       0       0
  5027 ;;Total ram usage:        3 bytes
  5028 ;; Hardware stack levels used:    1
  5029 ;; Hardware stack levels required when called:    7
  5030 ;; This function calls:
  5031 ;;		_disp7s_mux0_off
  5032 ;;		_disp7s_mux0_on
  5033 ;;		_disp7s_mux1_off
  5034 ;;		_disp7s_mux1_on
  5035 ;;		_disp7s_mux2_off
  5036 ;;		_disp7s_mux2_on
  5037 ;;		_disp7s_mux3_off
  5038 ;;		_disp7s_mux3_on
  5039 ;;		_disp7s_mux4_off
  5040 ;;		_disp7s_mux4_on
  5041 ;;		_disp7s_mux_Q
  5042 ;; This function is called by:
  5043 ;;		_main
  5044 ;; This function uses a non-reentrant model
  5045 ;;
  5046                           
  5047                           	psect	text29
  5048  0019B8                     __ptext29:
  5049                           	opt callstack 0
  5050  0019B8                     _disp7s_job:
  5051                           	opt callstack 23
  5052                           
  5053                           ;display.c: 134: pq= q-1;
  5054                           
  5055                           ;incstack = 0
  5056  0019B8  0449               	decf	disp7s_job@q,w,c
  5057  0019BA  6E15               	movwf	disp7s_job@pq,c
  5058                           
  5059                           ;display.c: 135: if (pq<0)
  5060  0019BC  AE15               	btfss	disp7s_job@pq,7,c
  5061  0019BE  D002               	goto	l3180
  5062                           
  5063                           ;display.c: 136: {pq=(2 + 3)-1;}
  5064  0019C0  0E04               	movlw	4
  5065  0019C2  6E15               	movwf	disp7s_job@pq,c
  5066  0019C4                     l3180:
  5067                           
  5068                           ;display.c: 137: disp7s_mux[pq].Qonoff[0]();
  5069  0019C4  5015               	movf	disp7s_job@pq,w,c
  5070  0019C6  0D04               	mullw	4
  5071  0019C8  50F3               	movf	prodl,w,c
  5072  0019CA  0FC7               	addlw	low _disp7s_mux
  5073  0019CC  6ED9               	movwf	fsr2l,c
  5074  0019CE  6ADA               	clrf	fsr2h,c
  5075  0019D0  D801               	call	u3168
  5076  0019D2  D00A               	goto	u3169
  5077  0019D4                     u3168:
  5078  0019D4  0005               	push	
  5079  0019D6  6EFA               	movwf	pclath,c
  5080  0019D8  50DE               	movf	postinc2,w,c
  5081  0019DA  6EFD               	movwf	tosl,c
  5082  0019DC  50DE               	movf	postinc2,w,c
  5083  0019DE  6EFE               	movwf	tosh,c
  5084  0019E0  50F8               	movf	tblptru,w,c
  5085  0019E2  6EFF               	movwf	tosu,c
  5086  0019E4  50FA               	movf	pclath,w,c
  5087  0019E6  0012               	return		;indir
  5088  0019E8                     u3169:
  5089                           
  5090                           ;display.c: 139: if (q < 2)
  5091  0019E8  5049               	movf	disp7s_job@q,w,c
  5092  0019EA  0A80               	xorlw	128
  5093  0019EC  0F7E               	addlw	-130
  5094  0019EE  B0D8               	btfsc	status,0,c
  5095  0019F0  D007               	goto	l3186
  5096                           
  5097                           ;display.c: 140: {LATB = pulsonic.disp7s.mode[q];}
  5098  0019F2  0E3E               	movlw	low (_pulsonic+62)
  5099  0019F4  2449               	addwf	disp7s_job@q,w,c
  5100  0019F6  6ED9               	movwf	fsr2l,c
  5101  0019F8  6ADA               	clrf	fsr2h,c
  5102  0019FA  0E01               	movlw	high (_pulsonic+62)
  5103  0019FC  22DA               	addwfc	fsr2h,f,c
  5104  0019FE  D00B               	goto	L4
  5105  001A00                     l3186:
  5106                           
  5107                           ;display.c: 141: else;display.c: 142: {LATB = pulsonic.disp7s.qty[q-2];}
  5108  001A00  C049  F013         	movff	disp7s_job@q,??_disp7s_job
  5109  001A04  6A14               	clrf	(??_disp7s_job+1)& (0+255),c
  5110  001A06  BE13               	btfsc	??_disp7s_job& (0+255),7,c
  5111  001A08  0614               	decf	(??_disp7s_job+1)& (0+255),f,c
  5112  001A0A  0E39               	movlw	low (_pulsonic+57)
  5113  001A0C  2413               	addwf	??_disp7s_job,w,c
  5114  001A0E  6ED9               	movwf	fsr2l,c
  5115  001A10  0E01               	movlw	high (_pulsonic+57)
  5116  001A12  2014               	addwfc	??_disp7s_job+1,w,c
  5117  001A14  6EDA               	movwf	fsr2h,c
  5118  001A16                     L4:
  5119  001A16  50DF               	movf	indf2,w,c
  5120  001A18  6E8A               	movwf	3978,c	;volatile
  5121                           
  5122                           ;display.c: 144: disp7s_mux_Q(q);
  5123  001A1A  5049               	movf	disp7s_job@q,w,c
  5124  001A1C  EC01  F00C         	call	_disp7s_mux_Q
  5125                           
  5126                           ;display.c: 146: if (++q == (2 + 3))
  5127  001A20  2A49               	incf	disp7s_job@q,f,c
  5128  001A22  0E05               	movlw	5
  5129  001A24  1849               	xorwf	disp7s_job@q,w,c
  5130  001A26  A4D8               	btfss	status,2,c
  5131  001A28  0012               	return	
  5132                           
  5133                           ;display.c: 147: {q=0x0;}
  5134  001A2A  0E00               	movlw	0
  5135  001A2C  6E49               	movwf	disp7s_job@q,c
  5136  001A2E  0012               	return		;funcret
  5137  001A30                     __end_of_disp7s_job:
  5138                           	opt callstack 0
  5139                           
  5140 ;; *************** function _disp7s_mux_Q *****************
  5141 ;; Defined at:
  5142 ;;		line 97 in file "display.c"
  5143 ;; Parameters:    Size  Location     Type
  5144 ;;  q               1    wreg     char 
  5145 ;; Auto vars:     Size  Location     Type
  5146 ;;  q               1   16[COMRAM] char 
  5147 ;;  i               1   17[COMRAM] char 
  5148 ;; Return value:  Size  Location     Type
  5149 ;;                  1    wreg      void 
  5150 ;; Registers used:
  5151 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
  5152 ;; Tracked objects:
  5153 ;;		On entry : 0/0
  5154 ;;		On exit  : 0/0
  5155 ;;		Unchanged: 0/0
  5156 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5157 ;;      Params:         0       0       0       0       0       0       0       0       0
  5158 ;;      Locals:         2       0       0       0       0       0       0       0       0
  5159 ;;      Temps:          6       0       0       0       0       0       0       0       0
  5160 ;;      Totals:         8       0       0       0       0       0       0       0       0
  5161 ;;Total ram usage:        8 bytes
  5162 ;; Hardware stack levels used:    1
  5163 ;; Hardware stack levels required when called:    6
  5164 ;; This function calls:
  5165 ;;		_disp7s_mux0_off
  5166 ;;		_disp7s_mux0_on
  5167 ;;		_disp7s_mux1_off
  5168 ;;		_disp7s_mux1_on
  5169 ;;		_disp7s_mux2_off
  5170 ;;		_disp7s_mux2_on
  5171 ;;		_disp7s_mux3_off
  5172 ;;		_disp7s_mux3_on
  5173 ;;		_disp7s_mux4_off
  5174 ;;		_disp7s_mux4_on
  5175 ;; This function is called by:
  5176 ;;		_disp7s_job
  5177 ;; This function uses a non-reentrant model
  5178 ;;
  5179                           
  5180                           	psect	text30
  5181  001802                     __ptext30:
  5182                           	opt callstack 0
  5183  001802                     _disp7s_mux_Q:
  5184                           	opt callstack 23
  5185                           
  5186                           ;incstack = 0
  5187                           ;disp7s_mux_Q@q stored from wreg
  5188  001802  6E11               	movwf	disp7s_mux_Q@q,c
  5189                           
  5190                           ;display.c: 99: int8_t i;;display.c: 100: for (i=0; i< (2 + 3); i++)
  5191  001804  0E00               	movlw	0
  5192  001806  6E12               	movwf	disp7s_mux_Q@i,c
  5193  001808                     l3026:
  5194                           
  5195                           ;display.c: 101: {;display.c: 102: if ( (1<<i) & (1<<q) )
  5196  001808  C011  F00B         	movff	disp7s_mux_Q@q,??_disp7s_mux_Q
  5197  00180C  0E01               	movlw	1
  5198  00180E  6E0C               	movwf	(??_disp7s_mux_Q+1)& (0+255),c
  5199  001810  0E00               	movlw	0
  5200  001812  6E0D               	movwf	(??_disp7s_mux_Q+2)& (0+255),c
  5201  001814  2A0B               	incf	??_disp7s_mux_Q,f,c
  5202  001816  D003               	goto	u2974
  5203  001818                     u2975:
  5204  001818  90D8               	bcf	status,0,c
  5205  00181A  360C               	rlcf	??_disp7s_mux_Q+1,f,c
  5206  00181C  360D               	rlcf	??_disp7s_mux_Q+2,f,c
  5207  00181E                     u2974:
  5208  00181E  2E0B               	decfsz	??_disp7s_mux_Q,f,c
  5209  001820  D7FB               	goto	u2975
  5210  001822  C012  F00E         	movff	disp7s_mux_Q@i,??_disp7s_mux_Q+3
  5211  001826  0E01               	movlw	1
  5212  001828  6E0F               	movwf	(??_disp7s_mux_Q+4)& (0+255),c
  5213  00182A  0E00               	movlw	0
  5214  00182C  6E10               	movwf	(??_disp7s_mux_Q+5)& (0+255),c
  5215  00182E  2A0E               	incf	??_disp7s_mux_Q+3,f,c
  5216  001830  D003               	goto	u2984
  5217  001832                     u2985:
  5218  001832  90D8               	bcf	status,0,c
  5219  001834  360F               	rlcf	??_disp7s_mux_Q+4,f,c
  5220  001836  3610               	rlcf	??_disp7s_mux_Q+5,f,c
  5221  001838                     u2984:
  5222  001838  2E0E               	decfsz	??_disp7s_mux_Q+3,f,c
  5223  00183A  D7FB               	goto	u2985
  5224  00183C  500C               	movf	??_disp7s_mux_Q+1,w,c
  5225  00183E  160F               	andwf	??_disp7s_mux_Q+4,f,c
  5226  001840  500D               	movf	??_disp7s_mux_Q+2,w,c
  5227  001842  1610               	andwf	??_disp7s_mux_Q+5,f,c
  5228  001844  500F               	movf	??_disp7s_mux_Q+4,w,c
  5229  001846  1010               	iorwf	??_disp7s_mux_Q+5,w,c
  5230  001848  B4D8               	btfsc	status,2,c
  5231  00184A  D012               	goto	l3030
  5232                           
  5233                           ;display.c: 103: disp7s_mux[i].Qonoff[1]();
  5234  00184C  5012               	movf	disp7s_mux_Q@i,w,c
  5235  00184E  0D04               	mullw	4
  5236  001850  50F3               	movf	prodl,w,c
  5237  001852  0FC9               	addlw	low (_disp7s_mux+2)
  5238  001854  6ED9               	movwf	fsr2l,c
  5239  001856  6ADA               	clrf	fsr2h,c
  5240  001858  D801               	call	u3008
  5241  00185A  D01C               	goto	u3019
  5242  00185C                     u3008:
  5243  00185C  0005               	push	
  5244  00185E  6EFA               	movwf	pclath,c
  5245  001860  50DE               	movf	postinc2,w,c
  5246  001862  6EFD               	movwf	tosl,c
  5247  001864  50DE               	movf	postinc2,w,c
  5248  001866  6EFE               	movwf	tosh,c
  5249  001868  50F8               	movf	tblptru,w,c
  5250  00186A  6EFF               	movwf	tosu,c
  5251  00186C  50FA               	movf	pclath,w,c
  5252  00186E  0012               	return		;indir
  5253  001870                     l3030:
  5254                           
  5255                           ;display.c: 104: else;display.c: 105: disp7s_mux[i].Qonoff[0]();
  5256  001870  5012               	movf	disp7s_mux_Q@i,w,c
  5257  001872  0D04               	mullw	4
  5258  001874  50F3               	movf	prodl,w,c
  5259  001876  0FC7               	addlw	low _disp7s_mux
  5260  001878  6ED9               	movwf	fsr2l,c
  5261  00187A  6ADA               	clrf	fsr2h,c
  5262  00187C  D801               	call	u3018
  5263  00187E  D00A               	goto	u3019
  5264  001880                     u3018:
  5265  001880  0005               	push	
  5266  001882  6EFA               	movwf	pclath,c
  5267  001884  50DE               	movf	postinc2,w,c
  5268  001886  6EFD               	movwf	tosl,c
  5269  001888  50DE               	movf	postinc2,w,c
  5270  00188A  6EFE               	movwf	tosh,c
  5271  00188C  50F8               	movf	tblptru,w,c
  5272  00188E  6EFF               	movwf	tosu,c
  5273  001890  50FA               	movf	pclath,w,c
  5274  001892  0012               	return		;indir
  5275  001894                     u3019:
  5276  001894  2A12               	incf	disp7s_mux_Q@i,f,c
  5277  001896  5012               	movf	disp7s_mux_Q@i,w,c
  5278  001898  0A80               	xorlw	128
  5279  00189A  0F7B               	addlw	-133
  5280  00189C  B0D8               	btfsc	status,0,c
  5281  00189E  0012               	return	
  5282  0018A0  D7B3               	goto	l3026
  5283  0018A2                     __end_of_disp7s_mux_Q:
  5284                           	opt callstack 0
  5285                           
  5286 ;; *************** function _disp7s_init *****************
  5287 ;; Defined at:
  5288 ;;		line 112 in file "display.c"
  5289 ;; Parameters:    Size  Location     Type
  5290 ;;		None
  5291 ;; Auto vars:     Size  Location     Type
  5292 ;;  i               1   11[COMRAM] char 
  5293 ;; Return value:  Size  Location     Type
  5294 ;;                  1    wreg      void 
  5295 ;; Registers used:
  5296 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5297 ;; Tracked objects:
  5298 ;;		On entry : 3F/0
  5299 ;;		On exit  : 0/0
  5300 ;;		Unchanged: 0/0
  5301 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5302 ;;      Params:         0       0       0       0       0       0       0       0       0
  5303 ;;      Locals:         1       0       0       0       0       0       0       0       0
  5304 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5305 ;;      Totals:         1       0       0       0       0       0       0       0       0
  5306 ;;Total ram usage:        1 bytes
  5307 ;; Hardware stack levels used:    1
  5308 ;; Hardware stack levels required when called:    7
  5309 ;; This function calls:
  5310 ;;		_disp7s_mux_init
  5311 ;; This function is called by:
  5312 ;;		_main
  5313 ;; This function uses a non-reentrant model
  5314 ;;
  5315                           
  5316                           	psect	text31
  5317  001B6E                     __ptext31:
  5318                           	opt callstack 0
  5319  001B6E                     _disp7s_init:
  5320                           	opt callstack 23
  5321                           
  5322                           ; BSR set to: 0
  5323                           ;display.c: 114: int8_t i;;display.c: 115: for (i=0; i<2; i++)
  5324                           
  5325                           ;incstack = 0
  5326  001B6E  0E00               	movlw	0
  5327  001B70  6E0C               	movwf	disp7s_init@i,c
  5328  001B72                     l3130:
  5329                           
  5330                           ; BSR set to: 0
  5331                           ;display.c: 116: {pulsonic.disp7s.mode[i] = DISP7S_CHARS[OFF];}
  5332  001B72  0E0B               	movlw	low _DISP7S_CHARS
  5333  001B74  6EF6               	movwf	tblptrl,c
  5334  001B76                     	if	1	;There is more than 1 active tblptr byte
  5335  001B76  0E08               	movlw	high _DISP7S_CHARS
  5336  001B78  6EF7               	movwf	tblptrh,c
  5337  001B7A                     	endif
  5338  001B7A                     	if	0	;There are less than 3 active tblptr bytes
  5339  001B7A                     	endif
  5340  001B7A  0E3E               	movlw	low (_pulsonic+62)
  5341  001B7C  240C               	addwf	disp7s_init@i,w,c
  5342  001B7E  6ED9               	movwf	fsr2l,c
  5343  001B80  6ADA               	clrf	fsr2h,c
  5344  001B82  0E01               	movlw	high (_pulsonic+62)
  5345  001B84  22DA               	addwfc	fsr2h,f,c
  5346  001B86  0008               	tblrd		*
  5347  001B88  CFF5 FFDF          	movff	tablat,indf2
  5348                           
  5349                           ; BSR set to: 0
  5350  001B8C  2A0C               	incf	disp7s_init@i,f,c
  5351                           
  5352                           ; BSR set to: 0
  5353  001B8E  500C               	movf	disp7s_init@i,w,c
  5354  001B90  0A80               	xorlw	128
  5355  001B92  0F7E               	addlw	-130
  5356  001B94  A0D8               	btfss	status,0,c
  5357  001B96  D7ED               	goto	l3130
  5358                           
  5359                           ; BSR set to: 0
  5360                           ;display.c: 118: for (i=0; i<3; i++)
  5361  001B98  0E00               	movlw	0
  5362  001B9A  6E0C               	movwf	disp7s_init@i,c
  5363  001B9C                     l3142:
  5364                           
  5365                           ; BSR set to: 0
  5366                           ;display.c: 119: {pulsonic.disp7s.qty[i] = DISP7S_CHARS[OFF];}
  5367  001B9C  0E0B               	movlw	low _DISP7S_CHARS
  5368  001B9E  6EF6               	movwf	tblptrl,c
  5369  001BA0                     	if	1	;There is more than 1 active tblptr byte
  5370  001BA0  0E08               	movlw	high _DISP7S_CHARS
  5371  001BA2  6EF7               	movwf	tblptrh,c
  5372  001BA4                     	endif
  5373  001BA4                     	if	0	;There are less than 3 active tblptr bytes
  5374  001BA4                     	endif
  5375  001BA4  0E3B               	movlw	low (_pulsonic+59)
  5376  001BA6  240C               	addwf	disp7s_init@i,w,c
  5377  001BA8  6ED9               	movwf	fsr2l,c
  5378  001BAA  6ADA               	clrf	fsr2h,c
  5379  001BAC  0E01               	movlw	high (_pulsonic+59)
  5380  001BAE  22DA               	addwfc	fsr2h,f,c
  5381  001BB0  0008               	tblrd		*
  5382  001BB2  CFF5 FFDF          	movff	tablat,indf2
  5383                           
  5384                           ; BSR set to: 0
  5385  001BB6  2A0C               	incf	disp7s_init@i,f,c
  5386                           
  5387                           ; BSR set to: 0
  5388  001BB8  500C               	movf	disp7s_init@i,w,c
  5389  001BBA  0A80               	xorlw	128
  5390  001BBC  0F7D               	addlw	-131
  5391  001BBE  A0D8               	btfss	status,0,c
  5392  001BC0  D7ED               	goto	l3142
  5393                           
  5394                           ; BSR set to: 0
  5395                           ;display.c: 121: TRISB = 0x00;
  5396  001BC2  0E00               	movlw	0
  5397  001BC4  6E93               	movwf	3987,c	;volatile
  5398                           
  5399                           ; BSR set to: 0
  5400                           ;display.c: 122: disp7s_mux_init();
  5401  001BC6  EC10  F00F         	call	_disp7s_mux_init	;wreg free
  5402  001BCA  0012               	return		;funcret
  5403  001BCC                     __end_of_disp7s_init:
  5404                           	opt callstack 0
  5405                           
  5406 ;; *************** function _disp7s_mux_init *****************
  5407 ;; Defined at:
  5408 ;;		line 83 in file "display.c"
  5409 ;; Parameters:    Size  Location     Type
  5410 ;;		None
  5411 ;; Auto vars:     Size  Location     Type
  5412 ;;  i               1   10[COMRAM] char 
  5413 ;; Return value:  Size  Location     Type
  5414 ;;                  1    wreg      void 
  5415 ;; Registers used:
  5416 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
  5417 ;; Tracked objects:
  5418 ;;		On entry : 3F/0
  5419 ;;		On exit  : 0/0
  5420 ;;		Unchanged: 0/0
  5421 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5422 ;;      Params:         0       0       0       0       0       0       0       0       0
  5423 ;;      Locals:         1       0       0       0       0       0       0       0       0
  5424 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5425 ;;      Totals:         1       0       0       0       0       0       0       0       0
  5426 ;;Total ram usage:        1 bytes
  5427 ;; Hardware stack levels used:    1
  5428 ;; Hardware stack levels required when called:    6
  5429 ;; This function calls:
  5430 ;;		_disp7s_mux0_off
  5431 ;;		_disp7s_mux0_on
  5432 ;;		_disp7s_mux1_off
  5433 ;;		_disp7s_mux1_on
  5434 ;;		_disp7s_mux2_off
  5435 ;;		_disp7s_mux2_on
  5436 ;;		_disp7s_mux3_off
  5437 ;;		_disp7s_mux3_on
  5438 ;;		_disp7s_mux4_off
  5439 ;;		_disp7s_mux4_on
  5440 ;; This function is called by:
  5441 ;;		_disp7s_init
  5442 ;; This function uses a non-reentrant model
  5443 ;;
  5444                           
  5445                           	psect	text32
  5446  001E20                     __ptext32:
  5447                           	opt callstack 0
  5448  001E20                     _disp7s_mux_init:
  5449                           	opt callstack 23
  5450                           
  5451                           ; BSR set to: 0
  5452                           ;display.c: 85: int8_t i;;display.c: 86: for (i=0; i< (2 + 3); i++)
  5453                           
  5454                           ;incstack = 0
  5455  001E20  0E00               	movlw	0
  5456  001E22  6E0B               	movwf	disp7s_mux_init@i,c
  5457  001E24                     l3012:
  5458                           
  5459                           ;display.c: 87: {;display.c: 88: disp7s_mux[i].Qonoff[0]();
  5460  001E24  500B               	movf	disp7s_mux_init@i,w,c
  5461  001E26  0D04               	mullw	4
  5462  001E28  50F3               	movf	prodl,w,c
  5463  001E2A  0FC7               	addlw	low _disp7s_mux
  5464  001E2C  6ED9               	movwf	fsr2l,c
  5465  001E2E  6ADA               	clrf	fsr2h,c
  5466  001E30  D801               	call	u2958
  5467  001E32  D00A               	goto	u2959
  5468  001E34                     u2958:
  5469  001E34  0005               	push	
  5470  001E36  6EFA               	movwf	pclath,c
  5471  001E38  50DE               	movf	postinc2,w,c
  5472  001E3A  6EFD               	movwf	tosl,c
  5473  001E3C  50DE               	movf	postinc2,w,c
  5474  001E3E  6EFE               	movwf	tosh,c
  5475  001E40  50F8               	movf	tblptru,w,c
  5476  001E42  6EFF               	movwf	tosu,c
  5477  001E44  50FA               	movf	pclath,w,c
  5478  001E46  0012               	return		;indir
  5479  001E48                     u2959:
  5480  001E48  2A0B               	incf	disp7s_mux_init@i,f,c
  5481  001E4A  500B               	movf	disp7s_mux_init@i,w,c
  5482  001E4C  0A80               	xorlw	128
  5483  001E4E  0F7B               	addlw	-133
  5484  001E50  A0D8               	btfss	status,0,c
  5485  001E52  D7E8               	goto	l3012
  5486  001E54  9092               	bcf	3986,0,c	;volatile
  5487                           
  5488                           ;display.c: 91: do{TRISA &= ~(1<<1);}while(0);
  5489  001E56  9292               	bcf	3986,1,c	;volatile
  5490                           
  5491                           ;display.c: 92: do{TRISA &= ~(1<<2);}while(0);
  5492  001E58  9492               	bcf	3986,2,c	;volatile
  5493                           
  5494                           ;display.c: 93: do{TRISA &= ~(1<<3);}while(0);
  5495  001E5A  9692               	bcf	3986,3,c	;volatile
  5496                           
  5497                           ;display.c: 94: do{TRISA &= ~(1<<4);}while(0);
  5498  001E5C  9892               	bcf	3986,4,c	;volatile
  5499  001E5E  0012               	return		;funcret
  5500  001E60                     __end_of_disp7s_mux_init:
  5501                           	opt callstack 0
  5502                           
  5503 ;; *************** function _disp7s_mux4_off *****************
  5504 ;; Defined at:
  5505 ;;		line 41 in file "display.c"
  5506 ;; Parameters:    Size  Location     Type
  5507 ;;		None
  5508 ;; Auto vars:     Size  Location     Type
  5509 ;;		None
  5510 ;; Return value:  Size  Location     Type
  5511 ;;                  1    wreg      void 
  5512 ;; Registers used:
  5513 ;;		status,2, status,0
  5514 ;; Tracked objects:
  5515 ;;		On entry : 0/0
  5516 ;;		On exit  : 0/0
  5517 ;;		Unchanged: 0/0
  5518 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5519 ;;      Params:         0       0       0       0       0       0       0       0       0
  5520 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5521 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5522 ;;      Totals:         0       0       0       0       0       0       0       0       0
  5523 ;;Total ram usage:        0 bytes
  5524 ;; Hardware stack levels used:    1
  5525 ;; Hardware stack levels required when called:    5
  5526 ;; This function calls:
  5527 ;;		Nothing
  5528 ;; This function is called by:
  5529 ;;		_disp7s_mux_init
  5530 ;;		_disp7s_mux_Q
  5531 ;;		_disp7s_job
  5532 ;; This function uses a non-reentrant model
  5533 ;;
  5534                           
  5535                           	psect	text33
  5536  001FD0                     __ptext33:
  5537                           	opt callstack 0
  5538  001FD0                     _disp7s_mux4_off:
  5539                           	opt callstack 23
  5540                           
  5541                           ;incstack = 0
  5542                           ;display.c: 43: do{LATA |= 1<<4;}while(0);
  5543  001FD0  8889               	bsf	3977,4,c	;volatile
  5544  001FD2  0012               	return		;funcret
  5545  001FD4                     __end_of_disp7s_mux4_off:
  5546                           	opt callstack 0
  5547                           
  5548 ;; *************** function _disp7s_mux3_on *****************
  5549 ;; Defined at:
  5550 ;;		line 36 in file "display.c"
  5551 ;; Parameters:    Size  Location     Type
  5552 ;;		None
  5553 ;; Auto vars:     Size  Location     Type
  5554 ;;		None
  5555 ;; Return value:  Size  Location     Type
  5556 ;;                  1    wreg      void 
  5557 ;; Registers used:
  5558 ;;		status,2, status,0
  5559 ;; Tracked objects:
  5560 ;;		On entry : 0/0
  5561 ;;		On exit  : 0/0
  5562 ;;		Unchanged: 0/0
  5563 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5564 ;;      Params:         0       0       0       0       0       0       0       0       0
  5565 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5566 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5567 ;;      Totals:         0       0       0       0       0       0       0       0       0
  5568 ;;Total ram usage:        0 bytes
  5569 ;; Hardware stack levels used:    1
  5570 ;; Hardware stack levels required when called:    5
  5571 ;; This function calls:
  5572 ;;		Nothing
  5573 ;; This function is called by:
  5574 ;;		_disp7s_mux_init
  5575 ;;		_disp7s_mux_Q
  5576 ;;		_disp7s_job
  5577 ;; This function uses a non-reentrant model
  5578 ;;
  5579                           
  5580                           	psect	text34
  5581  001FD4                     __ptext34:
  5582                           	opt callstack 0
  5583  001FD4                     _disp7s_mux3_on:
  5584                           	opt callstack 23
  5585                           
  5586                           ;incstack = 0
  5587                           ;display.c: 38: do{LATA &= ~(1<<3);}while(0);
  5588  001FD4  9689               	bcf	3977,3,c	;volatile
  5589  001FD6  0012               	return		;funcret
  5590  001FD8                     __end_of_disp7s_mux3_on:
  5591                           	opt callstack 0
  5592                           
  5593 ;; *************** function _disp7s_mux3_off *****************
  5594 ;; Defined at:
  5595 ;;		line 32 in file "display.c"
  5596 ;; Parameters:    Size  Location     Type
  5597 ;;		None
  5598 ;; Auto vars:     Size  Location     Type
  5599 ;;		None
  5600 ;; Return value:  Size  Location     Type
  5601 ;;                  1    wreg      void 
  5602 ;; Registers used:
  5603 ;;		status,2, status,0
  5604 ;; Tracked objects:
  5605 ;;		On entry : 0/0
  5606 ;;		On exit  : 0/0
  5607 ;;		Unchanged: 0/0
  5608 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5609 ;;      Params:         0       0       0       0       0       0       0       0       0
  5610 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5611 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5612 ;;      Totals:         0       0       0       0       0       0       0       0       0
  5613 ;;Total ram usage:        0 bytes
  5614 ;; Hardware stack levels used:    1
  5615 ;; Hardware stack levels required when called:    5
  5616 ;; This function calls:
  5617 ;;		Nothing
  5618 ;; This function is called by:
  5619 ;;		_disp7s_mux_init
  5620 ;;		_disp7s_mux_Q
  5621 ;;		_disp7s_job
  5622 ;; This function uses a non-reentrant model
  5623 ;;
  5624                           
  5625                           	psect	text35
  5626  001FD8                     __ptext35:
  5627                           	opt callstack 0
  5628  001FD8                     _disp7s_mux3_off:
  5629                           	opt callstack 23
  5630                           
  5631                           ;incstack = 0
  5632                           ;display.c: 34: do{LATA |= 1<<3;}while(0);
  5633  001FD8  8689               	bsf	3977,3,c	;volatile
  5634  001FDA  0012               	return		;funcret
  5635  001FDC                     __end_of_disp7s_mux3_off:
  5636                           	opt callstack 0
  5637                           
  5638 ;; *************** function _disp7s_mux2_on *****************
  5639 ;; Defined at:
  5640 ;;		line 27 in file "display.c"
  5641 ;; Parameters:    Size  Location     Type
  5642 ;;		None
  5643 ;; Auto vars:     Size  Location     Type
  5644 ;;		None
  5645 ;; Return value:  Size  Location     Type
  5646 ;;                  1    wreg      void 
  5647 ;; Registers used:
  5648 ;;		status,2, status,0
  5649 ;; Tracked objects:
  5650 ;;		On entry : 0/0
  5651 ;;		On exit  : 0/0
  5652 ;;		Unchanged: 0/0
  5653 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5654 ;;      Params:         0       0       0       0       0       0       0       0       0
  5655 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5656 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5657 ;;      Totals:         0       0       0       0       0       0       0       0       0
  5658 ;;Total ram usage:        0 bytes
  5659 ;; Hardware stack levels used:    1
  5660 ;; Hardware stack levels required when called:    5
  5661 ;; This function calls:
  5662 ;;		Nothing
  5663 ;; This function is called by:
  5664 ;;		_disp7s_mux_init
  5665 ;;		_disp7s_mux_Q
  5666 ;;		_disp7s_job
  5667 ;; This function uses a non-reentrant model
  5668 ;;
  5669                           
  5670                           	psect	text36
  5671  001FDC                     __ptext36:
  5672                           	opt callstack 0
  5673  001FDC                     _disp7s_mux2_on:
  5674                           	opt callstack 23
  5675                           
  5676                           ;incstack = 0
  5677                           ;display.c: 29: do{LATA &= ~(1<<2);}while(0);
  5678  001FDC  9489               	bcf	3977,2,c	;volatile
  5679  001FDE  0012               	return		;funcret
  5680  001FE0                     __end_of_disp7s_mux2_on:
  5681                           	opt callstack 0
  5682                           
  5683 ;; *************** function _disp7s_mux2_off *****************
  5684 ;; Defined at:
  5685 ;;		line 23 in file "display.c"
  5686 ;; Parameters:    Size  Location     Type
  5687 ;;		None
  5688 ;; Auto vars:     Size  Location     Type
  5689 ;;		None
  5690 ;; Return value:  Size  Location     Type
  5691 ;;                  1    wreg      void 
  5692 ;; Registers used:
  5693 ;;		status,2, status,0
  5694 ;; Tracked objects:
  5695 ;;		On entry : 0/0
  5696 ;;		On exit  : 0/0
  5697 ;;		Unchanged: 0/0
  5698 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5699 ;;      Params:         0       0       0       0       0       0       0       0       0
  5700 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5701 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5702 ;;      Totals:         0       0       0       0       0       0       0       0       0
  5703 ;;Total ram usage:        0 bytes
  5704 ;; Hardware stack levels used:    1
  5705 ;; Hardware stack levels required when called:    5
  5706 ;; This function calls:
  5707 ;;		Nothing
  5708 ;; This function is called by:
  5709 ;;		_disp7s_mux_init
  5710 ;;		_disp7s_mux_Q
  5711 ;;		_disp7s_job
  5712 ;; This function uses a non-reentrant model
  5713 ;;
  5714                           
  5715                           	psect	text37
  5716  001FE0                     __ptext37:
  5717                           	opt callstack 0
  5718  001FE0                     _disp7s_mux2_off:
  5719                           	opt callstack 23
  5720                           
  5721                           ;incstack = 0
  5722                           ;display.c: 25: do{LATA |= 1<<2;}while(0);
  5723  001FE0  8489               	bsf	3977,2,c	;volatile
  5724  001FE2  0012               	return		;funcret
  5725  001FE4                     __end_of_disp7s_mux2_off:
  5726                           	opt callstack 0
  5727                           
  5728 ;; *************** function _disp7s_mux1_on *****************
  5729 ;; Defined at:
  5730 ;;		line 18 in file "display.c"
  5731 ;; Parameters:    Size  Location     Type
  5732 ;;		None
  5733 ;; Auto vars:     Size  Location     Type
  5734 ;;		None
  5735 ;; Return value:  Size  Location     Type
  5736 ;;                  1    wreg      void 
  5737 ;; Registers used:
  5738 ;;		status,2, status,0
  5739 ;; Tracked objects:
  5740 ;;		On entry : 0/0
  5741 ;;		On exit  : 0/0
  5742 ;;		Unchanged: 0/0
  5743 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5744 ;;      Params:         0       0       0       0       0       0       0       0       0
  5745 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5746 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5747 ;;      Totals:         0       0       0       0       0       0       0       0       0
  5748 ;;Total ram usage:        0 bytes
  5749 ;; Hardware stack levels used:    1
  5750 ;; Hardware stack levels required when called:    5
  5751 ;; This function calls:
  5752 ;;		Nothing
  5753 ;; This function is called by:
  5754 ;;		_disp7s_mux_init
  5755 ;;		_disp7s_mux_Q
  5756 ;;		_disp7s_job
  5757 ;; This function uses a non-reentrant model
  5758 ;;
  5759                           
  5760                           	psect	text38
  5761  001FE4                     __ptext38:
  5762                           	opt callstack 0
  5763  001FE4                     _disp7s_mux1_on:
  5764                           	opt callstack 23
  5765                           
  5766                           ;incstack = 0
  5767                           ;display.c: 20: do{LATA &= ~(1<<1);}while(0);
  5768  001FE4  9289               	bcf	3977,1,c	;volatile
  5769  001FE6  0012               	return		;funcret
  5770  001FE8                     __end_of_disp7s_mux1_on:
  5771                           	opt callstack 0
  5772                           
  5773 ;; *************** function _disp7s_mux1_off *****************
  5774 ;; Defined at:
  5775 ;;		line 14 in file "display.c"
  5776 ;; Parameters:    Size  Location     Type
  5777 ;;		None
  5778 ;; Auto vars:     Size  Location     Type
  5779 ;;		None
  5780 ;; Return value:  Size  Location     Type
  5781 ;;                  1    wreg      void 
  5782 ;; Registers used:
  5783 ;;		status,2, status,0
  5784 ;; Tracked objects:
  5785 ;;		On entry : 0/0
  5786 ;;		On exit  : 0/0
  5787 ;;		Unchanged: 0/0
  5788 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5789 ;;      Params:         0       0       0       0       0       0       0       0       0
  5790 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5791 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5792 ;;      Totals:         0       0       0       0       0       0       0       0       0
  5793 ;;Total ram usage:        0 bytes
  5794 ;; Hardware stack levels used:    1
  5795 ;; Hardware stack levels required when called:    5
  5796 ;; This function calls:
  5797 ;;		Nothing
  5798 ;; This function is called by:
  5799 ;;		_disp7s_mux_init
  5800 ;;		_disp7s_mux_Q
  5801 ;;		_disp7s_job
  5802 ;; This function uses a non-reentrant model
  5803 ;;
  5804                           
  5805                           	psect	text39
  5806  001FE8                     __ptext39:
  5807                           	opt callstack 0
  5808  001FE8                     _disp7s_mux1_off:
  5809                           	opt callstack 23
  5810                           
  5811                           ;incstack = 0
  5812                           ;display.c: 16: do{LATA |= 1<<1;}while(0);
  5813  001FE8  8289               	bsf	3977,1,c	;volatile
  5814  001FEA  0012               	return		;funcret
  5815  001FEC                     __end_of_disp7s_mux1_off:
  5816                           	opt callstack 0
  5817                           
  5818 ;; *************** function _disp7s_mux0_on *****************
  5819 ;; Defined at:
  5820 ;;		line 9 in file "display.c"
  5821 ;; Parameters:    Size  Location     Type
  5822 ;;		None
  5823 ;; Auto vars:     Size  Location     Type
  5824 ;;		None
  5825 ;; Return value:  Size  Location     Type
  5826 ;;                  1    wreg      void 
  5827 ;; Registers used:
  5828 ;;		status,2, status,0
  5829 ;; Tracked objects:
  5830 ;;		On entry : 0/0
  5831 ;;		On exit  : 0/0
  5832 ;;		Unchanged: 0/0
  5833 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5834 ;;      Params:         0       0       0       0       0       0       0       0       0
  5835 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5836 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5837 ;;      Totals:         0       0       0       0       0       0       0       0       0
  5838 ;;Total ram usage:        0 bytes
  5839 ;; Hardware stack levels used:    1
  5840 ;; Hardware stack levels required when called:    5
  5841 ;; This function calls:
  5842 ;;		Nothing
  5843 ;; This function is called by:
  5844 ;;		_disp7s_mux_init
  5845 ;;		_disp7s_mux_Q
  5846 ;;		_disp7s_job
  5847 ;; This function uses a non-reentrant model
  5848 ;;
  5849                           
  5850                           	psect	text40
  5851  001FEC                     __ptext40:
  5852                           	opt callstack 0
  5853  001FEC                     _disp7s_mux0_on:
  5854                           	opt callstack 23
  5855                           
  5856                           ;incstack = 0
  5857                           ;display.c: 11: do{LATA &= ~(1<<0);}while(0);
  5858  001FEC  9089               	bcf	3977,0,c	;volatile
  5859  001FEE  0012               	return		;funcret
  5860  001FF0                     __end_of_disp7s_mux0_on:
  5861                           	opt callstack 0
  5862                           
  5863 ;; *************** function _disp7s_mux0_off *****************
  5864 ;; Defined at:
  5865 ;;		line 5 in file "display.c"
  5866 ;; Parameters:    Size  Location     Type
  5867 ;;		None
  5868 ;; Auto vars:     Size  Location     Type
  5869 ;;		None
  5870 ;; Return value:  Size  Location     Type
  5871 ;;                  1    wreg      void 
  5872 ;; Registers used:
  5873 ;;		status,2, status,0
  5874 ;; Tracked objects:
  5875 ;;		On entry : 0/0
  5876 ;;		On exit  : 0/0
  5877 ;;		Unchanged: 0/0
  5878 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5879 ;;      Params:         0       0       0       0       0       0       0       0       0
  5880 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5881 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5882 ;;      Totals:         0       0       0       0       0       0       0       0       0
  5883 ;;Total ram usage:        0 bytes
  5884 ;; Hardware stack levels used:    1
  5885 ;; Hardware stack levels required when called:    5
  5886 ;; This function calls:
  5887 ;;		Nothing
  5888 ;; This function is called by:
  5889 ;;		_disp7s_mux_init
  5890 ;;		_disp7s_mux_Q
  5891 ;;		_disp7s_job
  5892 ;; This function uses a non-reentrant model
  5893 ;;
  5894                           
  5895                           	psect	text41
  5896  001FF0                     __ptext41:
  5897                           	opt callstack 0
  5898  001FF0                     _disp7s_mux0_off:
  5899                           	opt callstack 23
  5900                           
  5901                           ;incstack = 0
  5902                           ;display.c: 7: do{LATA |= 1<<0;}while(0);
  5903  001FF0  8089               	bsf	3977,0,c	;volatile
  5904  001FF2  0012               	return		;funcret
  5905  001FF4                     __end_of_disp7s_mux0_off:
  5906                           	opt callstack 0
  5907                           
  5908 ;; *************** function _disp7s_mux4_on *****************
  5909 ;; Defined at:
  5910 ;;		line 45 in file "display.c"
  5911 ;; Parameters:    Size  Location     Type
  5912 ;;		None
  5913 ;; Auto vars:     Size  Location     Type
  5914 ;;		None
  5915 ;; Return value:  Size  Location     Type
  5916 ;;                  1    wreg      void 
  5917 ;; Registers used:
  5918 ;;		status,2, status,0
  5919 ;; Tracked objects:
  5920 ;;		On entry : 0/0
  5921 ;;		On exit  : 0/0
  5922 ;;		Unchanged: 0/0
  5923 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5924 ;;      Params:         0       0       0       0       0       0       0       0       0
  5925 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5926 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5927 ;;      Totals:         0       0       0       0       0       0       0       0       0
  5928 ;;Total ram usage:        0 bytes
  5929 ;; Hardware stack levels used:    1
  5930 ;; Hardware stack levels required when called:    5
  5931 ;; This function calls:
  5932 ;;		Nothing
  5933 ;; This function is called by:
  5934 ;;		_disp7s_mux_init
  5935 ;;		_disp7s_mux_Q
  5936 ;;		_disp7s_job
  5937 ;; This function uses a non-reentrant model
  5938 ;;
  5939                           
  5940                           	psect	text42
  5941  001FF4                     __ptext42:
  5942                           	opt callstack 0
  5943  001FF4                     _disp7s_mux4_on:
  5944                           	opt callstack 23
  5945                           
  5946                           ;incstack = 0
  5947                           ;display.c: 47: do{LATA &= ~(1<<4);}while(0);
  5948  001FF4  9889               	bcf	3977,4,c	;volatile
  5949  001FF6  0012               	return		;funcret
  5950  001FF8                     __end_of_disp7s_mux4_on:
  5951                           	opt callstack 0
  5952                           
  5953 ;; *************** function _INTERRUPCION *****************
  5954 ;; Defined at:
  5955 ;;		line 225 in file "main.c"
  5956 ;; Parameters:    Size  Location     Type
  5957 ;;		None
  5958 ;; Auto vars:     Size  Location     Type
  5959 ;;		None
  5960 ;; Return value:  Size  Location     Type
  5961 ;;                  1    wreg      void 
  5962 ;; Registers used:
  5963 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
  5964 ;; Tracked objects:
  5965 ;;		On entry : 0/0
  5966 ;;		On exit  : 0/0
  5967 ;;		Unchanged: 0/0
  5968 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5969 ;;      Params:         0       0       0       0       0       0       0       0       0
  5970 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5971 ;;      Temps:          6       0       0       0       0       0       0       0       0
  5972 ;;      Totals:         6       0       0       0       0       0       0       0       0
  5973 ;;Total ram usage:        6 bytes
  5974 ;; Hardware stack levels used:    1
  5975 ;; Hardware stack levels required when called:    4
  5976 ;; This function calls:
  5977 ;;		_mpap_job
  5978 ;; This function is called by:
  5979 ;;		Interrupt level 2
  5980 ;; This function uses a non-reentrant model
  5981 ;;
  5982                           
  5983                           	psect	intcode
  5984  000008                     __pintcode:
  5985                           	opt callstack 0
  5986  000008                     _INTERRUPCION:
  5987                           	opt callstack 21
  5988                           
  5989                           ;incstack = 0
  5990  000008  8250               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  5991  00000A  ED86  F00E         	call	int_func,f	;refresh shadow registers
  5992                           
  5993                           	psect	intcode_body
  5994  001D0C                     __pintcode_body:
  5995                           	opt callstack 21
  5996  001D0C                     int_func:
  5997                           	opt callstack 21
  5998  001D0C  0006               	pop		; remove dummy address from shadow register refresh
  5999  001D0E  CFFA F005          	movff	pclath,??_INTERRUPCION
  6000  001D12  CFFB F006          	movff	pclatu,??_INTERRUPCION+1
  6001  001D16  CFD9 F007          	movff	fsr2l,??_INTERRUPCION+2
  6002  001D1A  CFDA F008          	movff	fsr2h,??_INTERRUPCION+3
  6003  001D1E  CFF3 F009          	movff	prodl,??_INTERRUPCION+4
  6004  001D22  CFF4 F00A          	movff	prodh,??_INTERRUPCION+5
  6005                           
  6006                           ;main.c: 227: if (TMR0IF)
  6007  001D26  A4F2               	btfss	4082,2,c	;volatile
  6008  001D28  D007               	goto	i2l125
  6009                           
  6010                           ;main.c: 228: {;main.c: 229: isr_flag.f1ms = 1;
  6011  001D2A  804E               	bsf	_isr_flag,0,c	;volatile
  6012                           
  6013                           ;main.c: 230: mpap_job();
  6014  001D2C  EC61  F00E         	call	_mpap_job	;wreg free
  6015                           
  6016                           ;main.c: 232: TMR0IF = 0;
  6017  001D30  94F2               	bcf	4082,2,c	;volatile
  6018                           
  6019                           ;main.c: 233: TMR0H = (uint8_t)((uint16_t)((1UL<<16) - ( 1.0E-3 *48000000UL / (256*4)) )
      +                           >> 8);
  6020  001D32  68D7               	setf	4055,c	;volatile
  6021                           
  6022                           ;main.c: 234: TMR0L = (uint8_t)((uint16_t)((1UL<<16) - ( 1.0E-3 *48000000UL / (256*4)) )
      +                          );
  6023  001D34  0ED1               	movlw	209
  6024  001D36  6ED6               	movwf	4054,c	;volatile
  6025  001D38                     i2l125:
  6026  001D38  C00A  FFF4         	movff	??_INTERRUPCION+5,prodh
  6027  001D3C  C009  FFF3         	movff	??_INTERRUPCION+4,prodl
  6028  001D40  C008  FFDA         	movff	??_INTERRUPCION+3,fsr2h
  6029  001D44  C007  FFD9         	movff	??_INTERRUPCION+2,fsr2l
  6030  001D48  C006  FFFB         	movff	??_INTERRUPCION+1,pclatu
  6031  001D4C  C005  FFFA         	movff	??_INTERRUPCION,pclath
  6032  001D50  9250               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  6033  001D52  0011               	retfie		f
  6034  001D54                     __end_of_INTERRUPCION:
  6035                           	opt callstack 0
  6036                           
  6037 ;; *************** function _mpap_job *****************
  6038 ;; Defined at:
  6039 ;;		line 140 in file "mpap.c"
  6040 ;; Parameters:    Size  Location     Type
  6041 ;;		None
  6042 ;; Auto vars:     Size  Location     Type
  6043 ;;  cod_ret         1    0        char 
  6044 ;; Return value:  Size  Location     Type
  6045 ;;                  1    wreg      char 
  6046 ;; Registers used:
  6047 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
  6048 ;; Tracked objects:
  6049 ;;		On entry : 0/0
  6050 ;;		On exit  : 0/0
  6051 ;;		Unchanged: 0/0
  6052 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6053 ;;      Params:         0       0       0       0       0       0       0       0       0
  6054 ;;      Locals:         1       0       0       0       0       0       0       0       0
  6055 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6056 ;;      Totals:         1       0       0       0       0       0       0       0       0
  6057 ;;Total ram usage:        1 bytes
  6058 ;; Hardware stack levels used:    1
  6059 ;; Hardware stack levels required when called:    3
  6060 ;; This function calls:
  6061 ;;		__mpap_off
  6062 ;;		_mpap_homming
  6063 ;;		_mpap_normal_mode
  6064 ;; This function is called by:
  6065 ;;		_INTERRUPCION
  6066 ;; This function uses a non-reentrant model
  6067 ;;
  6068                           
  6069                           	psect	text44
  6070  001CC2                     __ptext44:
  6071                           	opt callstack 0
  6072  001CC2                     _mpap_job:
  6073                           	opt callstack 21
  6074                           
  6075                           ;mpap.c: 142: int8_t cod_ret;;mpap.c: 144: if (mpap.mode == MPAP_HOMMING_MODE)
  6076                           
  6077                           ;incstack = 0
  6078  001CC2  0E02               	movlw	2
  6079  001CC4  1848               	xorwf	_mpap+7,w,c	;volatile
  6080  001CC6  A4D8               	btfss	status,2,c
  6081  001CC8  D003               	goto	i2l3282
  6082  001CCA  ECE6  F00D         	call	_mpap_homming	;wreg free
  6083  001CCE  0012               	return	
  6084  001CD0                     i2l3282:
  6085                           
  6086                           ;mpap.c: 147: else if (mpap.mode == MPAP_NORMAL_MODE)
  6087  001CD0  0E03               	movlw	3
  6088  001CD2  1848               	xorwf	_mpap+7,w,c	;volatile
  6089  001CD4  A4D8               	btfss	status,2,c
  6090  001CD6  D003               	goto	i2l3286
  6091  001CD8  ECAA  F00E         	call	_mpap_normal_mode	;wreg free
  6092  001CDC  0012               	return	
  6093  001CDE                     i2l3286:
  6094                           
  6095                           ;mpap.c: 150: else if (mpap.mode == MPAP_STALL_MODE)
  6096  001CDE  0448               	decf	_mpap+7,w,c	;volatile
  6097  001CE0  A4D8               	btfss	status,2,c
  6098  001CE2  0012               	return	
  6099                           
  6100                           ;mpap.c: 151: {;mpap.c: 152: mpap.numSteps_tomove = 0x00;
  6101  001CE4  0E00               	movlw	0
  6102  001CE6  6E46               	movwf	_mpap+5,c	;volatile
  6103  001CE8  0E00               	movlw	0
  6104  001CEA  6E45               	movwf	_mpap+4,c	;volatile
  6105                           
  6106                           ;mpap.c: 153: mpap_off();
  6107  001CEC  D801               	call	i2u344_48
  6108  001CEE  D00B               	goto	i2u344_49
  6109  001CF0                     i2u344_48:
  6110  001CF0  0005               	push	
  6111  001CF2  0100               	movlb	0	; () banked
  6112  001CF4  6EFA               	movwf	pclath,c
  6113  001CF6  51E3               	movf	_mpap_off& (0+255),w,b
  6114  001CF8  6EFD               	movwf	tosl,c
  6115  001CFA  51E4               	movf	(_mpap_off+1)& (0+255),w,b
  6116  001CFC  6EFE               	movwf	tosh,c
  6117  001CFE  50F8               	movf	tblptru,w,c
  6118  001D00  6EFF               	movwf	tosu,c
  6119  001D02  50FA               	movf	pclath,w,c
  6120  001D04  0012               	return		;indir
  6121  001D06                     i2u344_49:
  6122                           
  6123                           ; BSR set to: 0
  6124                           ;mpap.c: 155: mpap.mode = MPAP_IDLE_MODE;
  6125  001D06  0E00               	movlw	0
  6126  001D08  6E48               	movwf	_mpap+7,c	;volatile
  6127  001D0A  0012               	return	
  6128  001D0C                     __end_of_mpap_job:
  6129                           	opt callstack 0
  6130                           
  6131 ;; *************** function _mpap_normal_mode *****************
  6132 ;; Defined at:
  6133 ;;		line 120 in file "mpap.c"
  6134 ;; Parameters:    Size  Location     Type
  6135 ;;		None
  6136 ;; Auto vars:     Size  Location     Type
  6137 ;;  cod_ret         1    1[COMRAM] char 
  6138 ;; Return value:  Size  Location     Type
  6139 ;;                  1    wreg      char 
  6140 ;; Registers used:
  6141 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
  6142 ;; Tracked objects:
  6143 ;;		On entry : 0/0
  6144 ;;		On exit  : 0/0
  6145 ;;		Unchanged: 0/0
  6146 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6147 ;;      Params:         0       0       0       0       0       0       0       0       0
  6148 ;;      Locals:         1       0       0       0       0       0       0       0       0
  6149 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6150 ;;      Totals:         1       0       0       0       0       0       0       0       0
  6151 ;;Total ram usage:        1 bytes
  6152 ;; Hardware stack levels used:    1
  6153 ;; Hardware stack levels required when called:    2
  6154 ;; This function calls:
  6155 ;;		_mpap_do1step
  6156 ;; This function is called by:
  6157 ;;		_mpap_job
  6158 ;; This function uses a non-reentrant model
  6159 ;;
  6160                           
  6161                           	psect	text45
  6162  001D54                     __ptext45:
  6163                           	opt callstack 0
  6164  001D54                     _mpap_normal_mode:
  6165                           	opt callstack 21
  6166                           
  6167                           ;mpap.c: 122: int8_t cod_ret = 0;
  6168                           
  6169                           ;incstack = 0
  6170  001D54  0E00               	movlw	0
  6171  001D56  6E02               	movwf	mpap_normal_mode@cod_ret,c
  6172                           
  6173                           ;mpap.c: 123: if (mpap.numSteps_tomove!=0)
  6174  001D58  5045               	movf	_mpap+4,w,c	;volatile
  6175  001D5A  1046               	iorwf	_mpap+5,w,c	;volatile
  6176  001D5C  B4D8               	btfsc	status,2,c
  6177  001D5E  D01C               	goto	i2l440
  6178                           
  6179                           ;mpap.c: 124: {;mpap.c: 125: mpap_do1step(mpap.KI);
  6180  001D60  5047               	movf	_mpap+6,w,c	;volatile
  6181  001D62  ECEF  F00E         	call	_mpap_do1step
  6182                           
  6183                           ;mpap.c: 127: mpap.counter_steps+= mpap.KI;
  6184  001D66  5047               	movf	_mpap+6,w,c	;volatile
  6185  001D68  2643               	addwf	_mpap+2,f,c	;volatile
  6186  001D6A  0E00               	movlw	0
  6187  001D6C  BE47               	btfsc	_mpap+6,7,c	;volatile
  6188  001D6E  0EFF               	movlw	255
  6189  001D70  2244               	addwfc	_mpap+3,f,c	;volatile
  6190                           
  6191                           ;mpap.c: 129: mpap.numSteps_current+= mpap.KI;
  6192  001D72  5047               	movf	_mpap+6,w,c	;volatile
  6193  001D74  2641               	addwf	_mpap,f,c	;volatile
  6194  001D76  0E00               	movlw	0
  6195  001D78  BE47               	btfsc	_mpap+6,7,c	;volatile
  6196  001D7A  0EFF               	movlw	255
  6197  001D7C  2242               	addwfc	_mpap+1,f,c	;volatile
  6198                           
  6199                           ;mpap.c: 131: if ( mpap.counter_steps== mpap.numSteps_tomove)
  6200  001D7E  5045               	movf	_mpap+4,w,c	;volatile
  6201  001D80  1843               	xorwf	_mpap+2,w,c	;volatile
  6202  001D82  E10A               	bnz	i2l440
  6203  001D84  5046               	movf	_mpap+5,w,c	;volatile
  6204  001D86  1844               	xorwf	_mpap+3,w,c	;volatile
  6205  001D88  A4D8               	btfss	status,2,c
  6206  001D8A  D006               	goto	i2l440
  6207                           
  6208                           ;mpap.c: 132: {;mpap.c: 133: mpap.numSteps_tomove = 0;
  6209  001D8C  0E00               	movlw	0
  6210  001D8E  6E46               	movwf	_mpap+5,c	;volatile
  6211  001D90  0E00               	movlw	0
  6212  001D92  6E45               	movwf	_mpap+4,c	;volatile
  6213                           
  6214                           ;mpap.c: 134: cod_ret = 1;
  6215  001D94  0E01               	movlw	1
  6216  001D96  6E02               	movwf	mpap_normal_mode@cod_ret,c
  6217  001D98                     i2l440:
  6218                           
  6219                           ;mpap.c: 135: };mpap.c: 136: };mpap.c: 137: return cod_ret;
  6220  001D98  5002               	movf	mpap_normal_mode@cod_ret,w,c
  6221  001D9A  0012               	return		;funcret
  6222  001D9C                     __end_of_mpap_normal_mode:
  6223                           	opt callstack 0
  6224                           
  6225 ;; *************** function _mpap_homming *****************
  6226 ;; Defined at:
  6227 ;;		line 96 in file "mpap.c"
  6228 ;; Parameters:    Size  Location     Type
  6229 ;;		None
  6230 ;; Auto vars:     Size  Location     Type
  6231 ;;  cod_ret         1    2[COMRAM] char 
  6232 ;; Return value:  Size  Location     Type
  6233 ;;                  1    wreg      char 
  6234 ;; Registers used:
  6235 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
  6236 ;; Tracked objects:
  6237 ;;		On entry : 0/0
  6238 ;;		On exit  : 0/0
  6239 ;;		Unchanged: 0/0
  6240 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6241 ;;      Params:         0       0       0       0       0       0       0       0       0
  6242 ;;      Locals:         1       0       0       0       0       0       0       0       0
  6243 ;;      Temps:          1       0       0       0       0       0       0       0       0
  6244 ;;      Totals:         2       0       0       0       0       0       0       0       0
  6245 ;;Total ram usage:        2 bytes
  6246 ;; Hardware stack levels used:    1
  6247 ;; Hardware stack levels required when called:    2
  6248 ;; This function calls:
  6249 ;;		_mpap_do1step
  6250 ;; This function is called by:
  6251 ;;		_mpap_job
  6252 ;; This function uses a non-reentrant model
  6253 ;;
  6254                           
  6255                           	psect	text46
  6256  001BCC                     __ptext46:
  6257                           	opt callstack 0
  6258  001BCC                     _mpap_homming:
  6259                           	opt callstack 21
  6260                           
  6261                           ;mpap.c: 98: int8_t cod_ret = 0;
  6262                           
  6263                           ;incstack = 0
  6264  001BCC  0E00               	movlw	0
  6265  001BCE  6E03               	movwf	mpap_homming@cod_ret,c
  6266                           
  6267                           ;mpap.c: 99: if (mpap.numSteps_tomove!=0)
  6268  001BD0  5045               	movf	_mpap+4,w,c	;volatile
  6269  001BD2  1046               	iorwf	_mpap+5,w,c	;volatile
  6270  001BD4  B4D8               	btfsc	status,2,c
  6271  001BD6  D024               	goto	i2l434
  6272                           
  6273                           ;mpap.c: 100: {;mpap.c: 101: mpap_do1step(mpap.KI);
  6274  001BD8  5047               	movf	_mpap+6,w,c	;volatile
  6275  001BDA  ECEF  F00E         	call	_mpap_do1step
  6276                           
  6277                           ;mpap.c: 103: mpap.counter_steps+= mpap.KI;
  6278  001BDE  5047               	movf	_mpap+6,w,c	;volatile
  6279  001BE0  2643               	addwf	_mpap+2,f,c	;volatile
  6280  001BE2  0E00               	movlw	0
  6281  001BE4  BE47               	btfsc	_mpap+6,7,c	;volatile
  6282  001BE6  0EFF               	movlw	255
  6283  001BE8  2244               	addwfc	_mpap+3,f,c	;volatile
  6284                           
  6285                           ;mpap.c: 105: if (((PORTE & (1<<1))>>1) == 0)
  6286  001BEA  CF84 F002          	movff	3972,??_mpap_homming	;volatile
  6287  001BEE  90D8               	bcf	status,0,c
  6288  001BF0  3202               	rrcf	??_mpap_homming,f,c
  6289  001BF2  B002               	btfsc	??_mpap_homming,0,c
  6290  001BF4  D006               	goto	i2l2982
  6291                           
  6292                           ;mpap.c: 106: {;mpap.c: 107: mpap.numSteps_tomove = 0x0000;
  6293  001BF6  0E00               	movlw	0
  6294  001BF8  6E46               	movwf	_mpap+5,c	;volatile
  6295  001BFA  0E00               	movlw	0
  6296  001BFC  6E45               	movwf	_mpap+4,c	;volatile
  6297                           
  6298                           ;mpap.c: 108: cod_ret = 1;
  6299  001BFE  0E01               	movlw	1
  6300  001C00  6E03               	movwf	mpap_homming@cod_ret,c
  6301  001C02                     i2l2982:
  6302                           
  6303                           ;mpap.c: 109: };mpap.c: 110: if ( mpap.counter_steps == mpap.numSteps_tomove)
  6304  001C02  5045               	movf	_mpap+4,w,c	;volatile
  6305  001C04  1843               	xorwf	_mpap+2,w,c	;volatile
  6306  001C06  E10C               	bnz	i2l434
  6307  001C08  5046               	movf	_mpap+5,w,c	;volatile
  6308  001C0A  1844               	xorwf	_mpap+3,w,c	;volatile
  6309  001C0C  A4D8               	btfss	status,2,c
  6310  001C0E  D008               	goto	i2l434
  6311                           
  6312                           ;mpap.c: 111: {;mpap.c: 112: mpap.numSteps_tomove = 0x0000;
  6313  001C10  0E00               	movlw	0
  6314  001C12  6E46               	movwf	_mpap+5,c	;volatile
  6315  001C14  0E00               	movlw	0
  6316  001C16  6E45               	movwf	_mpap+4,c	;volatile
  6317                           
  6318                           ;mpap.c: 113: cod_ret = 1;
  6319  001C18  0E01               	movlw	1
  6320  001C1A  6E03               	movwf	mpap_homming@cod_ret,c
  6321                           
  6322                           ;mpap.c: 114: pulsonic.errors.flag.mpap_home_sensor = 1;
  6323  001C1C  0101               	movlb	1	; () banked
  6324  001C1E  813A               	bsf	(_pulsonic+58)& (0+255),0,b
  6325  001C20                     i2l434:
  6326                           
  6327                           ;mpap.c: 115: };mpap.c: 116: };mpap.c: 117: return cod_ret;
  6328  001C20  5003               	movf	mpap_homming@cod_ret,w,c
  6329  001C22  0012               	return		;funcret
  6330  001C24                     __end_of_mpap_homming:
  6331                           	opt callstack 0
  6332                           
  6333 ;; *************** function _mpap_do1step *****************
  6334 ;; Defined at:
  6335 ;;		line 76 in file "mpap.c"
  6336 ;; Parameters:    Size  Location     Type
  6337 ;;  KI              1    wreg     char 
  6338 ;; Auto vars:     Size  Location     Type
  6339 ;;  KI              1    0[COMRAM] char 
  6340 ;; Return value:  Size  Location     Type
  6341 ;;                  1    wreg      void 
  6342 ;; Registers used:
  6343 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
  6344 ;; Tracked objects:
  6345 ;;		On entry : 0/0
  6346 ;;		On exit  : 0/0
  6347 ;;		Unchanged: 0/0
  6348 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6349 ;;      Params:         0       0       0       0       0       0       0       0       0
  6350 ;;      Locals:         1       0       0       0       0       0       0       0       0
  6351 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6352 ;;      Totals:         1       0       0       0       0       0       0       0       0
  6353 ;;Total ram usage:        1 bytes
  6354 ;; Hardware stack levels used:    1
  6355 ;; Hardware stack levels required when called:    1
  6356 ;; This function calls:
  6357 ;;		__mpap_step1
  6358 ;;		__mpap_step2
  6359 ;;		__mpap_step3
  6360 ;;		__mpap_step4
  6361 ;; This function is called by:
  6362 ;;		_mpap_homming
  6363 ;;		_mpap_normal_mode
  6364 ;; This function uses a non-reentrant model
  6365 ;;
  6366                           
  6367                           	psect	text47
  6368  001DDE                     __ptext47:
  6369                           	opt callstack 0
  6370  001DDE                     _mpap_do1step:
  6371                           	opt callstack 21
  6372                           
  6373                           ;incstack = 0
  6374                           ;mpap_do1step@KI stored from wreg
  6375  001DDE  6E01               	movwf	mpap_do1step@KI,c
  6376                           
  6377                           ;mpap.c: 78: static int8_t i = -1;;mpap.c: 80: i= i + KI;
  6378  001DE0  504F               	movf	mpap_do1step@i,w,c
  6379  001DE2  2401               	addwf	mpap_do1step@KI,w,c
  6380  001DE4  6E4F               	movwf	mpap_do1step@i,c
  6381                           
  6382                           ;mpap.c: 82: if (i>3){i=0;}
  6383  001DE6  504F               	movf	mpap_do1step@i,w,c
  6384  001DE8  0A80               	xorlw	128
  6385  001DEA  0F7C               	addlw	-132
  6386  001DEC  A0D8               	btfss	status,0,c
  6387  001DEE  D002               	goto	i2l2596
  6388  001DF0  0E00               	movlw	0
  6389  001DF2  6E4F               	movwf	mpap_do1step@i,c
  6390  001DF4                     i2l2596:
  6391                           
  6392                           ;mpap.c: 83: if (i<0){i=3;}
  6393  001DF4  AE4F               	btfss	mpap_do1step@i,7,c
  6394  001DF6  D002               	goto	i2l2600
  6395  001DF8  0E03               	movlw	3
  6396  001DFA  6E4F               	movwf	mpap_do1step@i,c
  6397  001DFC                     i2l2600:
  6398                           
  6399                           ;mpap.c: 85: mpap_step[i]();
  6400  001DFC  504F               	movf	mpap_do1step@i,w,c
  6401  001DFE  0D02               	mullw	2
  6402  001E00  50F3               	movf	prodl,w,c
  6403  001E02  0FDB               	addlw	low _mpap_step
  6404  001E04  6ED9               	movwf	fsr2l,c
  6405  001E06  6ADA               	clrf	fsr2h,c
  6406  001E08  D801               	call	i2u198_48
  6407  001E0A  0012               	return	
  6408  001E0C                     i2u198_48:
  6409  001E0C  0005               	push	
  6410  001E0E  6EFA               	movwf	pclath,c
  6411  001E10  50DE               	movf	postinc2,w,c
  6412  001E12  6EFD               	movwf	tosl,c
  6413  001E14  50DE               	movf	postinc2,w,c
  6414  001E16  6EFE               	movwf	tosh,c
  6415  001E18  50F8               	movf	tblptru,w,c
  6416  001E1A  6EFF               	movwf	tosu,c
  6417  001E1C  50FA               	movf	pclath,w,c
  6418  001E1E  0012               	return		;indir
  6419  001E20                     __end_of_mpap_do1step:
  6420                           	opt callstack 0
  6421                           
  6422 ;; *************** function __mpap_step3 *****************
  6423 ;; Defined at:
  6424 ;;		line 21 in file "mpap.c"
  6425 ;; Parameters:    Size  Location     Type
  6426 ;;		None
  6427 ;; Auto vars:     Size  Location     Type
  6428 ;;		None
  6429 ;; Return value:  Size  Location     Type
  6430 ;;                  1    wreg      void 
  6431 ;; Registers used:
  6432 ;;		status,2, status,0
  6433 ;; Tracked objects:
  6434 ;;		On entry : 0/0
  6435 ;;		On exit  : 0/0
  6436 ;;		Unchanged: 0/0
  6437 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6438 ;;      Params:         0       0       0       0       0       0       0       0       0
  6439 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6440 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6441 ;;      Totals:         0       0       0       0       0       0       0       0       0
  6442 ;;Total ram usage:        0 bytes
  6443 ;; Hardware stack levels used:    1
  6444 ;; This function calls:
  6445 ;;		Nothing
  6446 ;; This function is called by:
  6447 ;;		_mpap_do1step
  6448 ;; This function uses a non-reentrant model
  6449 ;;
  6450                           
  6451                           	psect	text48
  6452  001F82                     __ptext48:
  6453                           	opt callstack 0
  6454  001F82                     __mpap_step3:
  6455                           	opt callstack 21
  6456                           
  6457                           ;incstack = 0
  6458                           ;mpap.c: 23: do{LATD &= ~(1<<0);}while(0);
  6459  001F82  908C               	bcf	3980,0,c	;volatile
  6460                           
  6461                           ;mpap.c: 24: do{LATD |= 1<<1;}while(0);
  6462  001F84  828C               	bsf	3980,1,c	;volatile
  6463                           
  6464                           ;mpap.c: 25: do{LATD &= ~(1<<2);}while(0);
  6465  001F86  948C               	bcf	3980,2,c	;volatile
  6466                           
  6467                           ;mpap.c: 26: do{LATD &= ~(1<<3);}while(0);
  6468  001F88  968C               	bcf	3980,3,c	;volatile
  6469  001F8A  0012               	return		;funcret
  6470  001F8C                     __end_of__mpap_step3:
  6471                           	opt callstack 0
  6472                           
  6473 ;; *************** function __mpap_step2 *****************
  6474 ;; Defined at:
  6475 ;;		line 13 in file "mpap.c"
  6476 ;; Parameters:    Size  Location     Type
  6477 ;;		None
  6478 ;; Auto vars:     Size  Location     Type
  6479 ;;		None
  6480 ;; Return value:  Size  Location     Type
  6481 ;;                  1    wreg      void 
  6482 ;; Registers used:
  6483 ;;		status,2, status,0
  6484 ;; Tracked objects:
  6485 ;;		On entry : 0/0
  6486 ;;		On exit  : 0/0
  6487 ;;		Unchanged: 0/0
  6488 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6489 ;;      Params:         0       0       0       0       0       0       0       0       0
  6490 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6491 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6492 ;;      Totals:         0       0       0       0       0       0       0       0       0
  6493 ;;Total ram usage:        0 bytes
  6494 ;; Hardware stack levels used:    1
  6495 ;; This function calls:
  6496 ;;		Nothing
  6497 ;; This function is called by:
  6498 ;;		_mpap_do1step
  6499 ;; This function uses a non-reentrant model
  6500 ;;
  6501                           
  6502                           	psect	text49
  6503  001F8C                     __ptext49:
  6504                           	opt callstack 0
  6505  001F8C                     __mpap_step2:
  6506                           	opt callstack 21
  6507                           
  6508                           ;incstack = 0
  6509                           ;mpap.c: 15: do{LATD &= ~(1<<0);}while(0);
  6510  001F8C  908C               	bcf	3980,0,c	;volatile
  6511                           
  6512                           ;mpap.c: 16: do{LATD &= ~(1<<1);}while(0);
  6513  001F8E  928C               	bcf	3980,1,c	;volatile
  6514                           
  6515                           ;mpap.c: 17: do{LATD |= 1<<2;}while(0);
  6516  001F90  848C               	bsf	3980,2,c	;volatile
  6517                           
  6518                           ;mpap.c: 18: do{LATD &= ~(1<<3);}while(0);
  6519  001F92  968C               	bcf	3980,3,c	;volatile
  6520  001F94  0012               	return		;funcret
  6521  001F96                     __end_of__mpap_step2:
  6522                           	opt callstack 0
  6523                           
  6524 ;; *************** function __mpap_step1 *****************
  6525 ;; Defined at:
  6526 ;;		line 5 in file "mpap.c"
  6527 ;; Parameters:    Size  Location     Type
  6528 ;;		None
  6529 ;; Auto vars:     Size  Location     Type
  6530 ;;		None
  6531 ;; Return value:  Size  Location     Type
  6532 ;;                  1    wreg      void 
  6533 ;; Registers used:
  6534 ;;		status,2, status,0
  6535 ;; Tracked objects:
  6536 ;;		On entry : 0/0
  6537 ;;		On exit  : 0/0
  6538 ;;		Unchanged: 0/0
  6539 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6540 ;;      Params:         0       0       0       0       0       0       0       0       0
  6541 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6542 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6543 ;;      Totals:         0       0       0       0       0       0       0       0       0
  6544 ;;Total ram usage:        0 bytes
  6545 ;; Hardware stack levels used:    1
  6546 ;; This function calls:
  6547 ;;		Nothing
  6548 ;; This function is called by:
  6549 ;;		_mpap_do1step
  6550 ;; This function uses a non-reentrant model
  6551 ;;
  6552                           
  6553                           	psect	text50
  6554  001F96                     __ptext50:
  6555                           	opt callstack 0
  6556  001F96                     __mpap_step1:
  6557                           	opt callstack 21
  6558                           
  6559                           ;incstack = 0
  6560                           ;mpap.c: 7: do{LATD &= ~(1<<0);}while(0);
  6561  001F96  908C               	bcf	3980,0,c	;volatile
  6562                           
  6563                           ;mpap.c: 8: do{LATD &= ~(1<<1);}while(0);
  6564  001F98  928C               	bcf	3980,1,c	;volatile
  6565                           
  6566                           ;mpap.c: 9: do{LATD &= ~(1<<2);}while(0);
  6567  001F9A  948C               	bcf	3980,2,c	;volatile
  6568                           
  6569                           ;mpap.c: 10: do{LATD |= 1<<3;}while(0);
  6570  001F9C  868C               	bsf	3980,3,c	;volatile
  6571  001F9E  0012               	return		;funcret
  6572  001FA0                     __end_of__mpap_step1:
  6573                           	opt callstack 0
  6574                           
  6575 ;; *************** function __mpap_step4 *****************
  6576 ;; Defined at:
  6577 ;;		line 29 in file "mpap.c"
  6578 ;; Parameters:    Size  Location     Type
  6579 ;;		None
  6580 ;; Auto vars:     Size  Location     Type
  6581 ;;		None
  6582 ;; Return value:  Size  Location     Type
  6583 ;;                  1    wreg      void 
  6584 ;; Registers used:
  6585 ;;		status,2, status,0
  6586 ;; Tracked objects:
  6587 ;;		On entry : 0/0
  6588 ;;		On exit  : 0/0
  6589 ;;		Unchanged: 0/0
  6590 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6591 ;;      Params:         0       0       0       0       0       0       0       0       0
  6592 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6593 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6594 ;;      Totals:         0       0       0       0       0       0       0       0       0
  6595 ;;Total ram usage:        0 bytes
  6596 ;; Hardware stack levels used:    1
  6597 ;; This function calls:
  6598 ;;		Nothing
  6599 ;; This function is called by:
  6600 ;;		_mpap_do1step
  6601 ;; This function uses a non-reentrant model
  6602 ;;
  6603                           
  6604                           	psect	text51
  6605  001FA0                     __ptext51:
  6606                           	opt callstack 0
  6607  001FA0                     __mpap_step4:
  6608                           	opt callstack 21
  6609                           
  6610                           ;incstack = 0
  6611                           ;mpap.c: 31: do{LATD |= 1<<0;}while(0);
  6612  001FA0  808C               	bsf	3980,0,c	;volatile
  6613                           
  6614                           ;mpap.c: 32: do{LATD &= ~(1<<1);}while(0);
  6615  001FA2  928C               	bcf	3980,1,c	;volatile
  6616                           
  6617                           ;mpap.c: 33: do{LATD &= ~(1<<2);}while(0);
  6618  001FA4  948C               	bcf	3980,2,c	;volatile
  6619                           
  6620                           ;mpap.c: 34: do{LATD &= ~(1<<3);}while(0);
  6621  001FA6  968C               	bcf	3980,3,c	;volatile
  6622  001FA8  0012               	return		;funcret
  6623  001FAA                     __end_of__mpap_step4:
  6624                           	opt callstack 0
  6625                           
  6626 ;; *************** function __mpap_off *****************
  6627 ;; Defined at:
  6628 ;;		line 43 in file "mpap.c"
  6629 ;; Parameters:    Size  Location     Type
  6630 ;;		None
  6631 ;; Auto vars:     Size  Location     Type
  6632 ;;		None
  6633 ;; Return value:  Size  Location     Type
  6634 ;;                  1    wreg      void 
  6635 ;; Registers used:
  6636 ;;		status,2, status,0
  6637 ;; Tracked objects:
  6638 ;;		On entry : 3F/0
  6639 ;;		On exit  : 3F/0
  6640 ;;		Unchanged: 3F/0
  6641 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6642 ;;      Params:         0       0       0       0       0       0       0       0       0
  6643 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6644 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6645 ;;      Totals:         0       0       0       0       0       0       0       0       0
  6646 ;;Total ram usage:        0 bytes
  6647 ;; Hardware stack levels used:    1
  6648 ;; This function calls:
  6649 ;;		Nothing
  6650 ;; This function is called by:
  6651 ;;		_mpap_job
  6652 ;; This function uses a non-reentrant model
  6653 ;;
  6654                           
  6655                           	psect	text52
  6656  001FAA                     __ptext52:
  6657                           	opt callstack 0
  6658  001FAA                     __mpap_off:
  6659                           	opt callstack 23
  6660                           
  6661                           ; BSR set to: 0
  6662                           
  6663                           ; BSR set to: 0
  6664                           
  6665                           ;incstack = 0
  6666                           ;mpap.c: 45: do{LATD &= ~(1<<0);}while(0);
  6667  001FAA  908C               	bcf	3980,0,c	;volatile
  6668                           
  6669                           ; BSR set to: 0
  6670                           
  6671                           ;mpap.c: 46: do{LATD &= ~(1<<1);}while(0);
  6672  001FAC  928C               	bcf	3980,1,c	;volatile
  6673                           
  6674                           ; BSR set to: 0
  6675                           
  6676                           ;mpap.c: 47: do{LATD &= ~(1<<2);}while(0);
  6677  001FAE  948C               	bcf	3980,2,c	;volatile
  6678                           
  6679                           ; BSR set to: 0
  6680                           
  6681                           ;mpap.c: 48: do{LATD &= ~(1<<3);}while(0);
  6682  001FB0  968C               	bcf	3980,3,c	;volatile
  6683                           
  6684                           ; BSR set to: 0
  6685  001FB2  0012               	return		;funcret
  6686  001FB4                     __end_of__mpap_off:
  6687                           	opt callstack 0
  6688                           
  6689                           	psect	text53
  6690  000000                     __ptext53:
  6691                           	opt callstack 0
  6692                           
  6693                           	psect	rparam
  6694  0000                     
  6695                           	psect	temp
  6696  000050                     btemp:
  6697                           	opt callstack 0
  6698  000050                     	ds	1
  6699  0000                     int$flags	set	btemp
  6700  0000                     wtemp8	set	btemp+1
  6701  0000                     ttemp5	set	btemp+1
  6702  0000                     ttemp6	set	btemp+4
  6703  0000                     ttemp7	set	btemp+8
  6704                           tosu	equ	0xFFF
  6705                           tosh	equ	0xFFE
  6706                           tosl	equ	0xFFD
  6707                           stkptr	equ	0xFFC
  6708                           pclatu	equ	0xFFB
  6709                           pclath	equ	0xFFA
  6710                           pcl	equ	0xFF9
  6711                           tblptru	equ	0xFF8
  6712                           tblptrh	equ	0xFF7
  6713                           tblptrl	equ	0xFF6
  6714                           tablat	equ	0xFF5
  6715                           prodh	equ	0xFF4
  6716                           prodl	equ	0xFF3
  6717                           indf0	equ	0xFEF
  6718                           postinc0	equ	0xFEE
  6719                           postdec0	equ	0xFED
  6720                           preinc0	equ	0xFEC
  6721                           plusw0	equ	0xFEB
  6722                           fsr0h	equ	0xFEA
  6723                           fsr0l	equ	0xFE9
  6724                           wreg	equ	0xFE8
  6725                           indf1	equ	0xFE7
  6726                           postinc1	equ	0xFE6
  6727                           postdec1	equ	0xFE5
  6728                           preinc1	equ	0xFE4
  6729                           plusw1	equ	0xFE3
  6730                           fsr1h	equ	0xFE2
  6731                           fsr1l	equ	0xFE1
  6732                           bsr	equ	0xFE0
  6733                           indf2	equ	0xFDF
  6734                           postinc2	equ	0xFDE
  6735                           postdec2	equ	0xFDD
  6736                           preinc2	equ	0xFDC
  6737                           plusw2	equ	0xFDB
  6738                           fsr2h	equ	0xFDA
  6739                           fsr2l	equ	0xFD9
  6740                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    12
    Data        31
    BSS         181
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     64      79
    BANK0           160     18     151
    BANK1           256      0      64
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    utoa@buf	PTR unsigned char  size(1) Largest target is 10
		 -> disp7s_write_f@buff(BANK0[10]), 

    sp__utoa	PTR unsigned char  size(1) Largest target is 10
		 -> disp7s_write_f@buff(BANK0[10]), 

    itoa@buf	PTR unsigned char  size(1) Largest target is 10
		 -> disp7s_write_f@buff(BANK0[10]), 

    itoa@cp	PTR unsigned char  size(1) Largest target is 10
		 -> disp7s_write_f@buff(BANK0[10]), 

    sp__itoa	PTR unsigned char  size(1) Largest target is 10
		 -> disp7s_write_f@buff(BANK0[10]), 

    disp7s_write_f@pDisp	PTR unsigned char  size(2) Largest target is 64
		 -> pulsonic.disp7s(BANK1[5]), pulsonic(BANK1[64]), 

    S471_disp7s_mux$Qonoff	PTR FTN()void [2] size(2) Largest target is 1
		 -> disp7s_mux4_on(), disp7s_mux4_off(), disp7s_mux3_on(), disp7s_mux3_off(), 
		 -> disp7s_mux2_on(), disp7s_mux2_off(), disp7s_mux1_on(), disp7s_mux1_off(), 
		 -> disp7s_mux0_on(), disp7s_mux0_off(), 

    disp7s_mux.Qonoff	PTR FTN()void [2] size(2) Largest target is 1
		 -> disp7s_mux4_on(), disp7s_mux4_off(), disp7s_mux3_on(), disp7s_mux3_off(), 
		 -> disp7s_mux2_on(), disp7s_mux2_off(), disp7s_mux1_on(), disp7s_mux1_off(), 
		 -> disp7s_mux0_on(), disp7s_mux0_off(), 

    mpap_off	PTR FTN()void  size(2) Largest target is 1
		 -> _mpap_off(), 

    mpap_step	PTR FTN()void [4] size(2) Largest target is 1
		 -> _mpap_step4(), _mpap_step3(), _mpap_step2(), _mpap_step1(), 

    S226_key$keyDo	PTR FTN()void  size(2) Largest target is 0

    key.keyDo	PTR FTN()void  size(2) Largest target is 0

    S226_key$keyRead	PTR FTN()unsigned char  size(2) Largest target is 1
		 -> keyRead_pin_key5(), keyRead_pin_key4(), keyRead_pin_key3(), keyRead_pin_key2(), 
		 -> keyRead_pin_key1(), 

    key.keyRead	PTR FTN()unsigned char  size(2) Largest target is 1
		 -> keyRead_pin_key5(), keyRead_pin_key4(), keyRead_pin_key3(), keyRead_pin_key2(), 
		 -> keyRead_pin_key1(), 


Critical Paths under _main in COMRAM

    _main->_disp7s_modeDisp_writeFloat
    _main->_disp7s_qtyDisp_writeFloat
    _ikb_job->_ikey_parsing
    _ikey_parsing->___ftge
    ___lwtoft->___ftpack
    _ikb_flush->_ikey_clear_all_flag
    _disp7s_qtyDisp_writeFloat->_disp7s_write_f
    _disp7s_modeDisp_writeFloat->_disp7s_write_f
    _disp7s_write_f->___fttol
    _itoa->_utoa
    _utoa->___lwdiv
    ___fttol->___ftmul
    ___ftmul->___ftpack
    ___ftge->___lwtoft
    ___ftadd->___ftpack
    _disp7s_job->_disp7s_mux_Q
    _disp7s_init->_disp7s_mux_init

Critical Paths under _INTERRUPCION in COMRAM

    _INTERRUPCION->_mpap_job
    _mpap_job->_mpap_homming
    _mpap_normal_mode->_mpap_do1step
    _mpap_homming->_mpap_do1step

Critical Paths under _main in BANK0

    _disp7s_qtyDisp_writeFloat->_disp7s_write_f
    _disp7s_modeDisp_writeFloat->_disp7s_write_f

Critical Paths under _INTERRUPCION in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPCION in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPCION in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPCION in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPCION in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPCION in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPCION in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INTERRUPCION in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0   40433
                                             62 COMRAM     2     2      0
                        _disp7s_init
                         _disp7s_job
         _disp7s_modeDisp_writeFloat
          _disp7s_qtyDisp_writeFloat
                          _ikb_flush
                           _ikb_init
                            _ikb_job
                          _mpap_sych
                      _pulsonic_init
                           _pump_job
 ---------------------------------------------------------------------------------
 (1) _pump_job                                             1     1      0       8
                                             10 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _pulsonic_init                                        1     1      0      68
                                             10 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _mpap_sych                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ikb_job                                              0     0      0    8310
                       _ikey_parsing
                          _ikey_scan
 ---------------------------------------------------------------------------------
 (2) _ikey_scan                                            2     2      0     463
                                             10 COMRAM     2     2      0
                   _keyRead_pin_key1 *
                   _keyRead_pin_key2 *
                   _keyRead_pin_key3 *
                   _keyRead_pin_key4 *
                   _keyRead_pin_key5 *
 ---------------------------------------------------------------------------------
 (3) _keyRead_pin_key5                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _keyRead_pin_key4                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _keyRead_pin_key3                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _keyRead_pin_key2                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _keyRead_pin_key1                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ikey_parsing                                         5     5      0    7847
                                             30 COMRAM     5     5      0
                             ___ftge
                           ___lwtoft
                 _ikey_is_accessible
 ---------------------------------------------------------------------------------
 (3) _ikey_is_accessible                                   3     3      0      66
                                             10 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (3) ___lwtoft                                             3     0      3    3784
                                             18 COMRAM     3     0      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (1) _ikb_init                                             1     1      0     200
                                             10 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _ikb_flush                                            0     0      0      68
                _ikey_clear_all_flag
 ---------------------------------------------------------------------------------
 (2) _ikey_clear_all_flag                                  1     1      0      68
                                             10 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _disp7s_qtyDisp_writeFloat                            3     0      3   15695
                                             59 COMRAM     3     0      3
                     _disp7s_write_f
 ---------------------------------------------------------------------------------
 (1) _disp7s_modeDisp_writeFloat                           3     0      3   15625
                                             59 COMRAM     3     0      3
                     _disp7s_write_f
 ---------------------------------------------------------------------------------
 (2) _disp7s_write_f                                      29    23      6   15504
                                             48 COMRAM    11     5      6
                                              0 BANK0     18    18      0
                            ___ftadd
                             ___ftge
                            ___ftmul
                            ___fttol
                               _itoa
 ---------------------------------------------------------------------------------
 (3) _itoa                                                 6     1      5    2226
                                             25 COMRAM     6     1      5
                               _utoa
 ---------------------------------------------------------------------------------
 (4) _utoa                                                 8     3      5    1723
                                             17 COMRAM     8     3      5
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (5) ___lwmod                                              5     1      4     412
                                             10 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (5) ___lwdiv                                              7     3      4     601
                                             10 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (3) ___fttol                                             15    11      4     621
                                             33 COMRAM    15    11      4
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftmul                                             15     9      6    4427
                                             18 COMRAM    15     9      6
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___ftge                                               9     3      6    1418
                                             21 COMRAM     9     3      6
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftadd                                             12     6      6    5078
                                             18 COMRAM    12     6      6
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             8     3      5    3253
                                             10 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (1) _disp7s_job                                           3     3      0     181
                                             18 COMRAM     3     3      0
                    _disp7s_mux0_off *
                     _disp7s_mux0_on *
                    _disp7s_mux1_off *
                     _disp7s_mux1_on *
                    _disp7s_mux2_off *
                     _disp7s_mux2_on *
                    _disp7s_mux3_off *
                     _disp7s_mux3_on *
                    _disp7s_mux4_off *
                     _disp7s_mux4_on *
                       _disp7s_mux_Q
 ---------------------------------------------------------------------------------
 (2) _disp7s_mux_Q                                         8     8      0     134
                                             10 COMRAM     8     8      0
                    _disp7s_mux0_off *
                     _disp7s_mux0_on *
                    _disp7s_mux1_off *
                     _disp7s_mux1_on *
                    _disp7s_mux2_off *
                     _disp7s_mux2_on *
                    _disp7s_mux3_off *
                     _disp7s_mux3_on *
                    _disp7s_mux4_off *
                     _disp7s_mux4_on *
 ---------------------------------------------------------------------------------
 (1) _disp7s_init                                          1     1      0     204
                                             11 COMRAM     1     1      0
                    _disp7s_mux_init
 ---------------------------------------------------------------------------------
 (2) _disp7s_mux_init                                      1     1      0      68
                                             10 COMRAM     1     1      0
                    _disp7s_mux0_off *
                     _disp7s_mux0_on *
                    _disp7s_mux1_off *
                     _disp7s_mux1_on *
                    _disp7s_mux2_off *
                     _disp7s_mux2_on *
                    _disp7s_mux3_off *
                     _disp7s_mux3_on *
                    _disp7s_mux4_off *
                     _disp7s_mux4_on *
 ---------------------------------------------------------------------------------
 (3) _disp7s_mux4_on                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _disp7s_mux4_off                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _disp7s_mux3_on                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _disp7s_mux3_off                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _disp7s_mux2_on                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _disp7s_mux2_off                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _disp7s_mux1_on                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _disp7s_mux1_off                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _disp7s_mux0_on                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _disp7s_mux0_off                                      0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _INTERRUPCION                                         6     6      0     101
                                              4 COMRAM     6     6      0
                           _mpap_job
 ---------------------------------------------------------------------------------
 (7) _mpap_job                                             1     1      0     101
                                              3 COMRAM     1     1      0
                          __mpap_off *
                       _mpap_homming
                   _mpap_normal_mode
 ---------------------------------------------------------------------------------
 (8) _mpap_normal_mode                                     1     1      0      46
                                              1 COMRAM     1     1      0
                       _mpap_do1step
 ---------------------------------------------------------------------------------
 (8) _mpap_homming                                         2     2      0      47
                                              1 COMRAM     2     2      0
                       _mpap_do1step
 ---------------------------------------------------------------------------------
 (9) _mpap_do1step                                         1     1      0      22
                                              0 COMRAM     1     1      0
                        __mpap_step1 *
                        __mpap_step2 *
                        __mpap_step3 *
                        __mpap_step4 *
 ---------------------------------------------------------------------------------
 (10) __mpap_step4                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (10) __mpap_step3                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (10) __mpap_step2                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (10) __mpap_step1                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (8) __mpap_off                                            0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _disp7s_init
     _disp7s_mux_init
       _disp7s_mux0_off *
       _disp7s_mux0_on *
       _disp7s_mux1_off *
       _disp7s_mux1_on *
       _disp7s_mux2_off *
       _disp7s_mux2_on *
       _disp7s_mux3_off *
       _disp7s_mux3_on *
       _disp7s_mux4_off *
       _disp7s_mux4_on *
   _disp7s_job
     _disp7s_mux0_off *
     _disp7s_mux0_on *
     _disp7s_mux1_off *
     _disp7s_mux1_on *
     _disp7s_mux2_off *
     _disp7s_mux2_on *
     _disp7s_mux3_off *
     _disp7s_mux3_on *
     _disp7s_mux4_off *
     _disp7s_mux4_on *
     _disp7s_mux_Q *
       _disp7s_mux0_off *
       _disp7s_mux0_on *
       _disp7s_mux1_off *
       _disp7s_mux1_on *
       _disp7s_mux2_off *
       _disp7s_mux2_on *
       _disp7s_mux3_off *
       _disp7s_mux3_on *
       _disp7s_mux4_off *
       _disp7s_mux4_on *
   _disp7s_modeDisp_writeFloat
     _disp7s_write_f
       ___ftadd
         ___ftpack
       ___ftge
         ___lwtoft (ARG)
           ___ftpack
       ___ftmul
         ___ftpack
       ___fttol
         ___ftmul (ARG)
           ___ftpack
       _itoa
         _utoa
           ___lwdiv
           ___lwmod
   _disp7s_qtyDisp_writeFloat
     _disp7s_write_f
       ___ftadd
         ___ftpack
       ___ftge
         ___lwtoft (ARG)
           ___ftpack
       ___ftmul
         ___ftpack
       ___fttol
         ___ftmul (ARG)
           ___ftpack
       _itoa
         _utoa
           ___lwdiv
           ___lwmod
   _ikb_flush
     _ikey_clear_all_flag
   _ikb_init
   _ikb_job
     _ikey_parsing
       ___ftge
         ___lwtoft (ARG)
           ___ftpack
       ___lwtoft
         ___ftpack
       _ikey_is_accessible
     _ikey_scan
       _keyRead_pin_key1 *
       _keyRead_pin_key2 *
       _keyRead_pin_key3 *
       _keyRead_pin_key4 *
       _keyRead_pin_key5 *
   _mpap_sych
   _pulsonic_init
   _pump_job

 _INTERRUPCION (ROOT)
   _mpap_job
     __mpap_off *
     _mpap_homming *
       _mpap_do1step
         __mpap_step1 *
         __mpap_step2 *
         __mpap_step3 *
         __mpap_step4 *
     _mpap_normal_mode *
       _mpap_do1step
         __mpap_step1 *
         __mpap_step2 *
         __mpap_step3 *
         __mpap_step4 *

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      40       7       25.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     12      97       5       94.4%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     40      4F       1       84.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     126      20        0.0%
DATA                 0      0     126       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Fri Jul 12 21:06:01 2019

              disp7s_write_f@K10MULT 00F3                          __CFG_BORV$3 000000  
                       ___ftadd@exp1 001E                         ___ftadd@exp2 001D  
                       ___ftadd@sign 001C                                  l108 165C  
                                l311 0DC2                                  l305 0D58  
                                l314 0E14                                  l309 0D8C  
                                l282 08F0                                  l291 09F6  
                                l276 093A                                  l293 0A3A  
                                l295 0A9C                                  l297 0AE0  
                                l289 0994                                  l299 0C2C  
                                _GIE 007F97                         __CFG_BOR$OFF 000000  
                                _key 0060                                  prod 000FF3  
                                tosl 000FFD                                  wreg 000FE8  
             __size_of_pulsonic_init 0038                         __CFG_LVP$OFF 000000  
                       __CFG_WDT$OFF 000000                                 l1216 1C6C  
                               l1226 1DD4                                 l1067 1200  
                               l3012 1E24                                 l3030 1870  
                               l1408 191A                                 l3130 1B72  
                               l3026 1808                                 l3142 1B9C  
                               l3118 16D6                                 l3206 1ABE  
                               l3240 1950                                 l3402 1C62  
                               l3410 1DAA                                 l3218 1ADC  
                               l3180 19C4                                 l3412 1DB2  
                               l3260 1988                                 l3244 195C  
                               l3430 1772                                 l3270 19A4  
                               l3254 197C                                 l3158 1E6E  
                               l3440 17CE                                 l3432 177C  
                               l3600 14A4                                 l3256 197E  
                               l3186 1A00                                 l3442 17D8  
                               l3434 179A                                 l3514 1142  
                               l3610 14CC                                 l3418 1DCA  
                               l3540 11A8                                 l3508 111A  
                               l3460 18AA                                 l3438 17B0  
                               l3550 11DC                                 l3622 1A52  
                               l3606 14BC                                 l3390 1C3A  
                               l3470 18DC                                 l3710 08B0  
                               l2822 1276                                 l3536 1194  
                               l3632 1AA0                                 l3392 1C42  
                               l3800 0EFA                                 l3704 0880  
                               l2840 1346                                 l3538 119E  
                               l3626 1A74                                 l3642 1532  
                               l3714 08D0                                 l3706 0890  
                               l3556 121C                                 l3548 11D2  
                               l3660 1586                                 l3804 0F1C  
                               l2588 1CBE                                 l2828 12B4  
                               l3566 124C                                 l3582 1462  
                               l3670 159E                                 l3814 0FBE  
                               l3822 0FF8                                 l2846 1386  
                               l2838 1326                                 l3576 143A  
                               l3672 15AA                                 l3664 1596  
                               l3496 1EB0                                 l3832 1046  
                               l3912 167C                                 l2962 1F4C  
                               l3762 0CDE                                 l3754 0C1C  
                               l2858 140A                                 l3596 1494  
                               l3844 10B8                                 l3828 101A  
                               l3748 0B92                                 l3692 0812  
                               l3678 15C6                                 l3838 1076  
                               l3918 168E                                 l3794 0ECC  
                               l3786 0E52                                 l3778 0E34  
                               l3796 0ED4                                 l3788 0E7A  
                               l3894 1654                                 _LATA 000F89  
                               _LATB 000F8A                                 _LATC 000F8B  
                               u3008 185C                                 u4000 1520  
                               _LATD 000F8C                                 _LATE 000F8D  
                               u3018 1880                                 u4010 1550  
                               u3019 1894                                 u3300 194C  
                               u4015 1548                                 u2440 1316  
                               u4050 15B0                                 u2508 13D0  
                               u2509 13E4                                 u2438 12FC  
                               u2439 1310                                 u3168 19D4  
                               u3520 1C46                                 u3169 19E8  
                               u3620 17E2                                 u2468 136A  
                               u3701 10EE                                 u2469 137E  
                               u3550 1DB6                                 u2398 1298  
                               u2399 12AC                                 u3730 110C  
                               u3580 1764                                 u3901 1422  
                               u3830 11B0                                 u3760 1134  
                               u3921 144A                                 u4490 1056  
                               u3691 10DA                                 u3860 11E4  
                               u2958 1E34                                 u2974 181E  
                               u3790 1172                                 u2959 1E48  
                               u2975 1818                                 u2984 1838  
                               u2985 1832                                 u3991 1516  
                               _UCFG 000F6F                                 _UCON 000F6D  
                       __CFG_PWRT$ON 000000                                 _main 15D8  
                       ___ftpack@arg 000B                                 _lock 004C  
                               _itoa 1E98                                 _mpap 0041  
                       ___ftpack@exp 000E                                 fsr1h 000FE2  
                               fsr2h 000FDA                                 _pump 00B5  
                               indf2 000FDF                                 fsr1l 000FE1  
                               fsr2l 000FD9                                 btemp 0050  
                               _utoa 18A2                                 prodh 000FF4  
                               prodl 000FF3                                 start 000E  
                     pulsonic_init@i 000B                        __CFG_IESO$OFF 000000  
                      __CFG_MCLRE$ON 000000                         ___ftmul@cntr 0020  
               __end_of_DISP7S_CHARS 080D                         ___param_bank 000000  
                       ___ftmul@sign 0021                         ___fttol@exp1 0030  
                       ___fttol@lval 002C                        __CFG_PLLDIV$5 000000  
                              ?_main 0001                                ?_itoa 001A  
                    __end_of___ftadd 1272                                _CMCON 000FB4  
                              ?_utoa 0012                      __end_of___ftmul 1506  
                              _T0CON 000FD5                      __end_of___fttol 15D8  
                    __end_of___lwdiv 1C76                      __end_of___lwmod 1DDE  
                              i2l125 1D38                                i2l440 1D98  
                              i2l434 1C20                                _TMR0H 000FD7  
                              _TMR0L 000FD6                                _PORTC 000F82  
                              _PORTD 000F83                                _PORTE 000F84  
                      __CFG_USBDIV$2 000000                                _TRISA 000F92  
                              _TRISB 000F93                                _TRISC 000F94  
                              _TRISD 000F95                                _TRISE 000F96  
                     __CFG_FCMEN$OFF 000000                      __end_of_ikb_job 1F6E  
                      ?_INTERRUPCION 0001                      _disp7s_mux0_off 1FF0  
                    _disp7s_mux1_off 1FE8                      _disp7s_mux2_off 1FE0  
                    _disp7s_mux3_off 1FD8                      _disp7s_mux4_off 1FD0  
                      ___ftpack@sign 000F                                pclath 000FFA  
                              tablat 000FF5                                plusw2 000FDB  
                              ttemp5 0051                                ttemp6 0054  
                              ttemp7 0058                                utoa@c 0019  
                    _disp7s_mux_init 1E20                                utoa@v 0017  
                              status 000FD8                                wtemp8 0051  
        __size_of_ikey_is_accessible 004C                        ?_ikey_parsing 0001  
               __size_of__mpap_step1 000A                 __size_of__mpap_step2 000A  
               __size_of__mpap_step3 000A                 __size_of__mpap_step4 000A  
                      _pulsonic_init 1E60                      __initialization 1B0A  
                       __end_of_main 169E                         __end_of_itoa 1ECA  
                       __end_of_utoa 1936   __size_of_disp7s_qtyDisp_writeFloat 001E  
                             ??_main 003F                        ___fttol@sign1 002B  
                             ??_itoa 001F                 __end_of_disp7s_mux_Q 18A2  
                             ??_utoa 0017                        mpap_do1step@i 004F  
                      __activetblptr 000002                       ??_INTERRUPCION 0005  
               __size_of_disp7s_init 005E                               _ADCON1 000FC1  
           __end_of_keyRead_pin_key1 1FBC             __end_of_keyRead_pin_key2 1F82  
           __end_of_keyRead_pin_key3 1F78             __end_of_keyRead_pin_key4 1FCA  
           __end_of_keyRead_pin_key5 1FC4                     __end_of___ftpack 1802  
                             i2l2600 1DFC                               i2l3282 1CD0  
                             i2l3286 1CDE                               i2l2596 1DF4  
                             i2l2982 1C02                     __end_of___lwtoft 1EEE  
                             _TMR0IE 007F95                               _TMR0IF 007F92  
                     ??_ikey_parsing 001F                       __CFG_VREGEN$ON 000000  
                     ?_pulsonic_init 0001             __end_of_mpap_normal_mode 1D9C  
          disp7s_write_f@NUM_OF_DISP 0033             _error_requestToWriteDisp 00C4  
                   __end_of_ikb_init 1754                               ___ftge 1A30  
                          ??___ftadd 0019                            ??___ftmul 0019  
                          ??___fttol 0026                            ??___lwdiv 000F  
                          ??___lwmod 000F                               clear_0 1B42  
                             clear_1 1B4E                               clear_2 1B5A  
                   __end_of_mpap_job 1D0C                            ??_ikb_job 0024  
            __end_of_disp7s_mux0_off 1FF4              __end_of_disp7s_mux1_off 1FEC  
              ___ftmul@f3_as_product 001D              __end_of_disp7s_mux2_off 1FE4  
            __end_of_disp7s_mux3_off 1FDC              __end_of_disp7s_mux4_off 1FD4  
  __end_of_disp7s_qtyDisp_writeFloat 1F2A                         __pdataCOMRAM 004F  
                       __mediumconst 0000                               tblptrh 000FF7  
                             tblptrl 000FF6                               tblptru 000FF8  
                ikey_is_accessible@k 000D              __end_of_disp7s_mux_init 1E60  
                   __end_of_pump_job 1B0A         __size_of_ikey_clear_all_flag 001C  
                         __accesstop 0060              __end_of__initialization 1B60  
                    __CFG_PBADEN$OFF 000000                        ?_mpap_do1step 0001  
                         ___ftadd@f1 0013                           ___ftadd@f2 0016  
                         ___ftge@ff1 0016                           ___ftge@ff2 0019  
                      ___rparam_used 000001                           ___ftmul@f1 0013  
                         ___ftmul@f2 0016                           ___fttol@f1 0022  
                     __pcstackCOMRAM 0001                         __pidataBANK0 1EEE  
                      ?_mpap_homming 0001                   __size_of__mpap_off 000A  
                         ___lwtoft@c 0013                         _DISP7S_CHARS 080B  
                 __size_of_ikb_flush 0006                       mpap_do1step@KI 0001  
                         __pbssBANK0 0060                           __pbssBANK1 0100  
                     ??_mpap_do1step 0001                   __size_of_ikey_scan 01A0  
                    ??_pulsonic_init 000B                       ??_mpap_homming 0002  
__size_of_disp7s_modeDisp_writeFloat 001E                              ?___ftge 0016  
               __end_of_INTERRUPCION 1D54                   __size_of_mpap_sych 0082  
              __size_of_disp7s_mux_Q 00A0                      disp7s_write_f@I 00EF  
                    disp7s_write_f@i 00F6                           _disp7s_job 19B8  
                         _disp7s_mux 00C7                            ?___ftpack 000B  
                          ?___lwtoft 0013              __size_of_disp7s_mux0_on 0004  
            __size_of_disp7s_mux1_on 0004              __size_of_disp7s_mux2_on 0004  
            __size_of_disp7s_mux3_on 0004              __size_of_disp7s_mux4_on 0004  
                   ?_disp7s_mux0_off 0001                     ?_disp7s_mux1_off 0001  
                   ?_disp7s_mux2_off 0001                     ?_disp7s_mux3_off 0001  
                   ?_disp7s_mux4_off 0001                 __end_of_ikey_parsing 0E3E  
            __size_of_disp7s_write_f 028C                           _disp_owner 00C5  
                   ?_disp7s_mux_init 0001                            ?_ikb_init 0001  
                  disp7s_write_f@num 0034                    __end_of__mpap_off 1FB4  
                       _disp7s_mux_Q 1802                            ?_mpap_job 0001  
        disp7s_modeDisp_writeFloat@f 003C                              __Hparam 0000  
                            __Lparam 0000                    __end_of_ikb_flush 1FD0  
                    __size_of___ftge 0074                              ___ftadd 10CA  
                            ___ftmul 1412                              ___fttol 1506  
                            ___lwdiv 1C24                            ?_pump_job 0001  
                            ___lwmod 1D9C                         __psmallconst 0800  
                            __pcinit 1B0A                           ??___ftpack 0010  
                            __ramtop 0800                              __ptext0 15D8  
                            __ptext1 1AA4                              __ptext2 1E60  
                            __ptext3 1936                              __ptext4 1F64  
                            __ptext5 1272                              __ptext6 1FC4  
                            __ptext7 1F6E                              __ptext8 1F78  
                            __ptext9 1FB4                    __end_of_ikey_scan 1412  
                            _ikb_job 1F64                           ??___lwtoft 0016  
                            _group_x 00B0             _error_grantedToWriteDisp 00C3  
                  __end_of_mpap_sych 19B8              mpap_normal_mode@cod_ret 0002  
                         ??_ikb_init 000B                       __pintcode_body 1D0C  
               end_of_initialization 1B60           __end_of_ikey_is_accessible 1CC2  
                  ?_keyRead_pin_key1 0001                    ?_keyRead_pin_key2 0001  
                  ?_keyRead_pin_key3 0001                    ?_keyRead_pin_key4 0001  
                  ?_keyRead_pin_key5 0001                        ??__mpap_step1 0001  
                      ??__mpap_step2 0001                        ??__mpap_step3 0001  
                      ??__mpap_step4 0001                              itoa@buf 001A  
                            itoa@val 001B                        __Lmediumconst 0000  
                            int_func 1D0C                   ??_keyRead_pin_key1 000B  
                 ??_keyRead_pin_key2 000B                   ??_keyRead_pin_key3 000B  
                 ??_keyRead_pin_key4 000B                   ??_keyRead_pin_key5 000B  
                errorHandler_queue@c 00BA                  errorHandler_queue@i 00BE  
                         ??_mpap_job 0004                    ?_mpap_normal_mode 0001  
                    main@c_access_kb 003F                              postdec1 000FE5  
                            postdec2 000FDD                   ??_mpap_normal_mode 0002  
                            postinc0 000FEE                              postinc1 000FE6  
                            postinc2 000FDE                           ??_pump_job 000B  
                            utoa@buf 0012                              utoa@val 0013  
                        ?_disp7s_job 0001                  _ikey_clear_all_flag 1F48  
 __end_of_disp7s_modeDisp_writeFloat 1F48           _disp7s_modeDisp_writeFloat 1F2A  
                       _machineState 00C6                 __end_of_mpap_do1step 1E20  
                      ??_disp7s_init 000C                 ikey_clear_all_flag@i 000B  
               __end_of_mpap_homming 1C24                 ?_ikey_clear_all_flag 0001  
                disp7s_write_f@pDisp 0031                __size_of_INTERRUPCION 1D4C  
                        ___ftmul@exp 001C                  __end_of__mpap_step1 1FA0  
                __end_of__mpap_step2 1F96                  __end_of__mpap_step3 1F8C  
                __end_of__mpap_step4 1FAA                  __end_of_DISP7S_NUMS 080B  
                     __end_of___ftge 1AA4                __size_of_ikey_parsing 0630  
                      __pidataCOMRAM 1FF8                       _disp7s_mux0_on 1FEC  
                     _disp7s_mux1_on 1FE4                       _disp7s_mux2_on 1FDC  
                     _disp7s_mux3_on 1FD4                       _disp7s_mux4_on 1FF4  
                start_initialization 1B0A           ?_disp7s_qtyDisp_writeFloat 003C  
                     _disp7s_write_f 0E3E                         _INTERRUPCION 0008  
                __end_of_disp7s_init 1BCC                ??_ikey_clear_all_flag 000B  
                         ikey_scan@k 000C                  __size_of_disp7s_job 0078  
                       _ikey_parsing 080E                             ??___ftge 001C  
                        __pdataBANK0 00C7               __end_of_disp7s_mux0_on 1FF0  
             __end_of_disp7s_mux1_on 1FE8               __end_of_disp7s_mux2_on 1FE0  
             __end_of_disp7s_mux3_on 1FD8               __end_of_disp7s_mux4_on 1FF8  
             __end_of_disp7s_write_f 10CA                    __size_of___ftpack 00AE  
                        __pbssCOMRAM 0041           disp7s_qtyDisp_writeFloat@f 003C  
                  __size_of___lwtoft 0024                        __pcstackBANK0 00E5  
                   disp7s_mux_init@i 000B                         mpap_sych@sm0 004B  
                      ikey_parsing@k 0023                    __size_of_ikb_init 00B6  
                        __mpap_step1 1F96                          __mpap_step2 1F8C  
                        __mpap_step3 1F82                          __mpap_step4 1FA0  
                        _DISP7S_NUMS 0801                           mpap_sych@c 00BC  
              __end_of_pulsonic_init 1E98                            __mpap_off 1FAA  
                   ___lwdiv@dividend 000B                    __size_of_mpap_job 004A  
                          __pintcode 0008                __size_of_mpap_do1step 0042  
                           ?___ftadd 0013                             ?___ftmul 0013  
                           ?___fttol 0022                             ?___lwdiv 000B  
                           ?___lwmod 000B                      ?_disp7s_mux0_on 0001  
                    ?_disp7s_mux1_on 0001                      ?_disp7s_mux2_on 0001  
                    ?_disp7s_mux3_on 0001                      ?_disp7s_mux4_on 0001  
                          _ikb_flush 1FCA                    __size_of_pump_job 0066  
                           ?_ikb_job 0001                          __smallconst 0800  
              __size_of_mpap_homming 0058                            _main_flag 004D  
                    ?_disp7s_write_f 0031                          _disp7s_init 1B6E  
       ??_disp7s_modeDisp_writeFloat 003F                            _ikey_scan 1272  
                   ___lwdiv@quotient 0010             __size_of_disp7s_mux0_off 0004  
           __size_of_disp7s_mux1_off 0004             __size_of_disp7s_mux2_off 0004  
           __size_of_disp7s_mux3_off 0004             __size_of_disp7s_mux4_off 0004  
                          _mpap_step 00DB                            _mpap_sych 1936  
                       _mpap_do1step 1DDE             __size_of_disp7s_mux_init 0040  
                         ?__mpap_off 0001                             i2u344_48 1CF0  
                           i2u344_49 1D06                             i2u198_48 1E0C  
                 _ikey_is_accessible 1C76                         _mpap_homming 1BCC  
          __size_of_keyRead_pin_key1 0008            __size_of_keyRead_pin_key2 000A  
          __size_of_keyRead_pin_key3 000A            __size_of_keyRead_pin_key4 0006  
          __size_of_keyRead_pin_key5 0008                         ??_disp7s_job 0013  
                         ?_ikb_flush 0001          ?_disp7s_modeDisp_writeFloat 003C  
                ?_ikey_is_accessible 0001                   disp7s_write_f@iMAX 00F1  
                 disp7s_write_f@iMIN 00F2                   disp7s_write_f@buff 00E5  
                          ikb_init@i 000B            __size_of_mpap_normal_mode 0048  
                         ?_ikey_scan 0001                            copy_data0 1B1E  
                mpap_homming@cod_ret 0003                           ?_mpap_sych 0001  
               ??_ikey_is_accessible 000B                   __end_of_disp7s_job 1A30  
                           __Hrparam 0000                             __Lrparam 0000  
               check_startSignal@sm0 00C2                 check_startSignal@sm1 00C1  
                   __size_of___ftadd 01A8                     __size_of___ftmul 00F4  
                   __size_of___fttol 00D2                     __size_of___lwdiv 0052  
                   __size_of___lwmod 0042                             ___ftpack 1754  
                           ___lwtoft 1ECA                     __size_of_ikb_job 000A  
                      disp7s_mux_Q@i 0012                        disp7s_mux_Q@q 0011  
        ??_disp7s_qtyDisp_writeFloat 003F                errorHandler_queue@sm0 00BD  
                    ___lwdiv@divisor 000D                    check_oilLevel@sm0 00C0  
                  check_oilLevel@sm1 00BF                      ___lwdiv@counter 000F  
                           __ptext10 1FBC                             __ptext11 080E  
                           __ptext20 1E98                             __ptext12 1C76  
                           __ptext21 18A2                             __ptext13 1ECA  
                           __ptext30 1802                             __ptext22 1D9C  
                           __ptext14 169E                             __ptext31 1B6E  
                           __ptext23 1C24                             __ptext15 1FCA  
                           __ptext40 1FEC                             __ptext32 1E20  
                           __ptext24 1506                             __ptext16 1F48  
                           __ptext41 1FF0                             __ptext33 1FD0  
                           __ptext25 1412                             __ptext17 1F0C  
                           __ptext50 1F96                             __ptext42 1FF4  
                           __ptext34 1FD4                             __ptext26 1A30  
                           __ptext18 1F2A                             __ptext51 1FA0  
                           __ptext35 1FD8                             __ptext27 10CA  
                           __ptext19 0E3E                             __ptext52 1FAA  
                           __ptext44 1CC2                             __ptext36 1FDC  
                           __ptext28 1754                             __ptext53 0000  
                           __ptext45 1D54                             __ptext37 1FE0  
                           __ptext29 19B8                             __ptext46 1BCC  
                           __ptext38 1FE4                             __ptext47 1DDE  
                           __ptext39 1FE8                             __ptext48 1F82  
                           __ptext49 1F8C                             _ikb_init 169E  
                           _autoMode 00B8                        __size_of_main 00C6  
                      __size_of_itoa 0032                        __size_of_utoa 0094  
                           _isr_flag 004E                             _mpap_job 1CC2  
                           _mpap_off 00E3                    ??_disp7s_mux0_off 000B  
                  ??_disp7s_mux1_off 000B                    ??_disp7s_mux2_off 000B  
                  ??_disp7s_mux3_off 000B                          ??__mpap_off 0001  
                  ??_disp7s_mux4_off 000B                    main@c_access_disp 0040  
                           int$flags 0050                    ??_disp7s_mux_init 000B  
                           _pump_job 1AA4                             _pulsonic 0100  
                        ??_ikb_flush 000C                __CFG_CPUDIV$OSC1_PLL2 000000  
        __end_of_ikey_clear_all_flag 1F64                            pump_job@c 004A  
                        ??_ikey_scan 000B                             itoa@base 001D  
                       disp7s_job@pq 0015                         disp7s_init@i 000C  
                           intlevel2 0000                          ??_mpap_sych 000B  
                   ___lwmod@dividend 000B                         ?__mpap_step1 0001  
                       ?__mpap_step2 0001                         ?__mpap_step3 0001  
                       ?__mpap_step4 0001                        ?_disp7s_mux_Q 0001  
          _disp7s_qtyDisp_writeFloat 1F0C                     ??_disp7s_mux0_on 000B  
                   ??_disp7s_mux1_on 000B                     ??_disp7s_mux2_on 000B  
                   ??_disp7s_mux3_on 000B                     ??_disp7s_mux4_on 000B  
                   _keyRead_pin_key1 1FB4                     _keyRead_pin_key2 1F78  
                   _keyRead_pin_key3 1F6E                     _keyRead_pin_key4 1FC4  
                   _keyRead_pin_key5 1FBC                     ??_disp7s_write_f 0037  
                           utoa@base 0015                          disp7s_job@q 0049  
                       ?_disp7s_init 0001                      ___lwmod@divisor 000D  
                   _mpap_normal_mode 1D54                      ___lwmod@counter 000F  
                 __CFG_FOSC$HSPLL_HS 000000                       ??_disp7s_mux_Q 000B  



Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Mon Jul  1 20:26:44 2019

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og9 
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	text0,global,reloc=2,class=CODE,delta=1
    11                           	psect	text1,global,reloc=2,class=CODE,delta=1
    12                           	psect	text2,global,reloc=2,class=CODE,delta=1
    13                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=1
    14                           	psect	text4,global,reloc=2,class=CODE,delta=1
    15                           	psect	text5,global,reloc=2,class=CODE,delta=1
    16                           	psect	text6,global,reloc=2,class=CODE,delta=1
    17                           	psect	text7,global,reloc=2,class=CODE,delta=1
    18                           	psect	text8,global,reloc=2,class=CODE,delta=1
    19                           	psect	text9,global,reloc=2,class=CODE,delta=1
    20                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    21                           	psect	text10,global,reloc=2,class=CODE,delta=1
    22                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    23  0000                     
    24                           ; Version 2.05
    25                           ; Generated 20/12/2018 GMT
    26                           ; 
    27                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    28                           ; All rights reserved.
    29                           ; 
    30                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    31                           ; 
    32                           ; Redistribution and use in source and binary forms, with or without modification, are
    33                           ; permitted provided that the following conditions are met:
    34                           ; 
    35                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    36                           ;        conditions and the following disclaimer.
    37                           ; 
    38                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    39                           ;        of conditions and the following disclaimer in the documentation and/or other
    40                           ;        materials provided with the distribution.
    41                           ; 
    42                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    43                           ;        software without specific prior written permission.
    44                           ; 
    45                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    46                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    47                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    48                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    49                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    50                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    51                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    52                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    53                           ; 
    54                           ; 
    55                           ; Code-generator required, PIC18F4550 Definitions
    56                           ; 
    57                           ; SFR Addresses
    58  0000                     
    59                           	psect	idataCOMRAM
    60  007E50                     __pidataCOMRAM:
    61                           	opt callstack 0
    62                           
    63                           ;initializer for _mpap_step
    64  007E50  62                 	db	low __mpap_step1
    65  007E51  7E                 	db	high __mpap_step1
    66  007E52  6C                 	db	low __mpap_step2
    67  007E53  7E                 	db	high __mpap_step2
    68  007E54  76                 	db	low __mpap_step3
    69  007E55  7E                 	db	high __mpap_step3
    70  007E56  58                 	db	low __mpap_step4
    71  007E57  7E                 	db	high __mpap_step4
    72  0000                     _TRISC	set	3988
    73  0000                     _TRISD	set	3989
    74  0000                     _LATA	set	3977
    75  0000                     _TRISA	set	3986
    76  0000                     _CMCON	set	4020
    77  0000                     _ADCON1	set	4033
    78  0000                     _LATB	set	3978
    79  0000                     _TRISB	set	3987
    80  0000                     _LATC	set	3979
    81  0000                     _LATD	set	3980
    82                           
    83                           ; #config settings
    84  0000                     
    85                           	psect	cinit
    86  007F00                     __pcinit:
    87                           	opt callstack 0
    88  007F00                     start_initialization:
    89                           	opt callstack 0
    90  007F00                     __initialization:
    91                           	opt callstack 0
    92                           
    93                           ; Initialize objects allocated to COMRAM (8 bytes)
    94                           ; load TBLPTR registers with __pidataCOMRAM
    95  007F00  0E50               	movlw	low __pidataCOMRAM
    96  007F02  6EF6               	movwf	tblptrl,c
    97  007F04  0E7E               	movlw	high __pidataCOMRAM
    98  007F06  6EF7               	movwf	tblptrh,c
    99  007F08  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   100  007F0A  6EF8               	movwf	tblptru,c
   101  007F0C  EE00  F015         	lfsr	0,__pdataCOMRAM
   102  007F10  EE10 F008          	lfsr	1,8
   103  007F14                     copy_data0:
   104  007F14  0009               	tblrd		*+
   105  007F16  CFF5 FFEE          	movff	tablat,postinc0
   106  007F1A  50E5               	movf	postdec1,w,c
   107  007F1C  50E1               	movf	fsr1l,w,c
   108  007F1E  E1FA               	bnz	copy_data0
   109                           
   110                           ; Clear objects allocated to COMRAM (8 bytes)
   111  007F20  EE00  F00D         	lfsr	0,__pbssCOMRAM
   112  007F24  0E08               	movlw	8
   113  007F26                     clear_0:
   114  007F26  6AEE               	clrf	postinc0,c
   115  007F28  06E8               	decf	wreg,f,c
   116  007F2A  E1FD               	bnz	clear_0
   117  007F2C                     end_of_initialization:
   118                           	opt callstack 0
   119  007F2C                     __end_of__initialization:
   120                           	opt callstack 0
   121  007F2C  0E00               	movlw	low (__Lmediumconst shr (0+16))
   122  007F2E  6EF8               	movwf	tblptru,c
   123  007F30  0100               	movlb	0
   124  007F32  EFDB  F03F         	goto	_main	;jump to C main() function
   125                           
   126                           	psect	bssCOMRAM
   127  00000D                     __pbssCOMRAM:
   128                           	opt callstack 0
   129  00000D                     _mpap:
   130                           	opt callstack 0
   131  00000D                     	ds	7
   132  000014                     mpap_do1step@i:
   133                           	opt callstack 0
   134  000014                     	ds	1
   135                           
   136                           	psect	dataCOMRAM
   137  000015                     __pdataCOMRAM:
   138                           	opt callstack 0
   139  000015                     _mpap_step:
   140                           	opt callstack 0
   141  000015                     	ds	8
   142                           
   143                           	psect	cstackCOMRAM
   144  000001                     __pcstackCOMRAM:
   145                           	opt callstack 0
   146  000001                     ?___wmul:
   147                           	opt callstack 0
   148  000001                     mpap_do1step@KI:
   149                           	opt callstack 0
   150  000001                     ___wmul@multiplier:
   151                           	opt callstack 0
   152                           
   153                           ; 2 bytes @ 0x0
   154  000001                     	ds	1
   155  000002                     
   156                           ; 1 bytes @ 0x1
   157  000002                     	ds	1
   158  000003                     ___wmul@multiplicand:
   159                           	opt callstack 0
   160                           
   161                           ; 2 bytes @ 0x2
   162  000003                     	ds	2
   163  000005                     ___wmul@product:
   164                           	opt callstack 0
   165                           
   166                           ; 2 bytes @ 0x4
   167  000005                     	ds	2
   168  000007                     mpap_setupToTurn@absPos_insteps:
   169                           	opt callstack 0
   170                           
   171                           ; 2 bytes @ 0x6
   172  000007                     	ds	2
   173  000009                     _mpap_setupToTurn$58:
   174                           	opt callstack 0
   175                           
   176                           ; 2 bytes @ 0x8
   177  000009                     	ds	2
   178  00000B                     nozzle_moveto@nozzle:
   179                           	opt callstack 0
   180                           
   181                           ; 1 bytes @ 0xA
   182  00000B                     	ds	1
   183  00000C                     ??_main:
   184                           
   185                           ; 1 bytes @ 0xB
   186  00000C                     	ds	1
   187                           
   188 ;;
   189 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   190 ;;
   191 ;; *************** function _main *****************
   192 ;; Defined at:
   193 ;;		line 220 in file "main.c"
   194 ;; Parameters:    Size  Location     Type
   195 ;;		None
   196 ;; Auto vars:     Size  Location     Type
   197 ;;		None
   198 ;; Return value:  Size  Location     Type
   199 ;;                  1    wreg      void 
   200 ;; Registers used:
   201 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
   202 ;; Tracked objects:
   203 ;;		On entry : 0/0
   204 ;;		On exit  : 0/0
   205 ;;		Unchanged: 0/0
   206 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   207 ;;      Params:         0       0       0       0       0       0       0       0       0
   208 ;;      Locals:         0       0       0       0       0       0       0       0       0
   209 ;;      Temps:          1       0       0       0       0       0       0       0       0
   210 ;;      Totals:         1       0       0       0       0       0       0       0       0
   211 ;;Total ram usage:        1 bytes
   212 ;; Hardware stack levels required when called:    3
   213 ;; This function calls:
   214 ;;		_mpap_job
   215 ;;		_nozzle_moveto
   216 ;; This function is called by:
   217 ;;		Startup code after reset
   218 ;; This function uses a non-reentrant model
   219 ;;
   220                           
   221                           	psect	text0
   222  007FB6                     __ptext0:
   223                           	opt callstack 0
   224  007FB6                     _main:
   225                           	opt callstack 28
   226                           
   227                           ;main.c: 222: TRISB = 0x00;
   228                           
   229                           ;incstack = 0
   230  007FB6  0E00               	movlw	0
   231  007FB8  6E93               	movwf	3987,c	;volatile
   232                           
   233                           ;main.c: 223: LATB = 0x10;
   234  007FBA  0E10               	movlw	16
   235  007FBC  6E8A               	movwf	3978,c	;volatile
   236                           
   237                           ;main.c: 225: ADCON1 = 0x0F;
   238  007FBE  0E0F               	movlw	15
   239  007FC0  6EC1               	movwf	4033,c	;volatile
   240                           
   241                           ;main.c: 226: CMCON=0xCF;
   242  007FC2  0ECF               	movlw	207
   243  007FC4  6EB4               	movwf	4020,c	;volatile
   244                           
   245                           ;main.c: 227: TRISA = 0;
   246  007FC6  0E00               	movlw	0
   247  007FC8  6E92               	movwf	3986,c	;volatile
   248                           
   249                           ;main.c: 228: LATA= ~(0x01<<4);
   250  007FCA  0EEF               	movlw	239
   251  007FCC  6E89               	movwf	3977,c	;volatile
   252                           
   253                           ;main.c: 230: LATD=0;
   254  007FCE  0E00               	movlw	0
   255  007FD0  6E8C               	movwf	3980,c	;volatile
   256                           
   257                           ;main.c: 231: LATC=0x0;
   258  007FD2  0E00               	movlw	0
   259  007FD4  6E8B               	movwf	3979,c	;volatile
   260  007FD6  9095               	bcf	3989,0,c	;volatile
   261  007FD8  9295               	bcf	3989,1,c	;volatile
   262  007FDA  9495               	bcf	3989,2,c	;volatile
   263  007FDC  9695               	bcf	3989,3,c	;volatile
   264  007FDE  928B               	bcf	3979,1,c	;volatile
   265  007FE0  9294               	bcf	3988,1,c	;volatile
   266  007FE2  8094               	bsf	3988,0,c	;volatile
   267                           
   268                           ;main.c: 244: nozzle_moveto(0);
   269  007FE4  0E00               	movlw	0
   270  007FE6  EC53  F03F         	call	_nozzle_moveto
   271  007FEA                     l986:
   272                           
   273                           ;main.c: 247: {;main.c: 248: mpap_job();
   274  007FEA  EC9B  F03F         	call	_mpap_job	;wreg free
   275                           
   276                           ;main.c: 249: _delay((unsigned long)((1)*(48000000UL/4000.0)));
   277  007FEE  0E10               	movlw	16
   278  007FF0  6E0C               	movwf	??_main& (0+255),c
   279  007FF2  0E94               	movlw	148
   280  007FF4                     u107:
   281  007FF4  2EE8               	decfsz	wreg,f,c
   282  007FF6  D7FE               	bra	u107
   283  007FF8  2E0C               	decfsz	??_main& (0+255),f,c
   284  007FFA  D7FC               	bra	u107
   285  007FFC  D000               	nop2	
   286  007FFE  D7F5               	goto	l986
   287  008000                     __end_of_main:
   288                           	opt callstack 0
   289                           
   290 ;; *************** function _nozzle_moveto *****************
   291 ;; Defined at:
   292 ;;		line 211 in file "main.c"
   293 ;; Parameters:    Size  Location     Type
   294 ;;  nozzle          1    wreg     char 
   295 ;; Auto vars:     Size  Location     Type
   296 ;;  nozzle          1   10[COMRAM] char 
   297 ;; Return value:  Size  Location     Type
   298 ;;                  1    wreg      void 
   299 ;; Registers used:
   300 ;;		wreg, status,2, status,0, prodl, prodh, cstack
   301 ;; Tracked objects:
   302 ;;		On entry : 0/0
   303 ;;		On exit  : 0/0
   304 ;;		Unchanged: 0/0
   305 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   306 ;;      Params:         0       0       0       0       0       0       0       0       0
   307 ;;      Locals:         1       0       0       0       0       0       0       0       0
   308 ;;      Temps:          0       0       0       0       0       0       0       0       0
   309 ;;      Totals:         1       0       0       0       0       0       0       0       0
   310 ;;Total ram usage:        1 bytes
   311 ;; Hardware stack levels used:    1
   312 ;; Hardware stack levels required when called:    1
   313 ;; This function calls:
   314 ;;		___wmul
   315 ;;		_mpap_setupToTurn
   316 ;; This function is called by:
   317 ;;		_main
   318 ;; This function uses a non-reentrant model
   319 ;;
   320                           
   321                           	psect	text1
   322  007EA6                     __ptext1:
   323                           	opt callstack 0
   324  007EA6                     _nozzle_moveto:
   325                           	opt callstack 29
   326                           
   327                           ;incstack = 0
   328                           ;nozzle_moveto@nozzle stored from wreg
   329  007EA6  6E0B               	movwf	nozzle_moveto@nozzle,c
   330                           
   331                           ;main.c: 213: mpap_setupToTurn( nozzle * 200);
   332  007EA8  500B               	movf	nozzle_moveto@nozzle,w,c
   333  007EAA  6E01               	movwf	___wmul@multiplier,c
   334  007EAC  6A02               	clrf	___wmul@multiplier+1,c
   335  007EAE  BE01               	btfsc	___wmul@multiplier,7,c
   336  007EB0  0602               	decf	___wmul@multiplier+1,f,c
   337  007EB2  0E00               	movlw	0
   338  007EB4  6E04               	movwf	___wmul@multiplicand+1,c
   339  007EB6  0EC8               	movlw	200
   340  007EB8  6E03               	movwf	___wmul@multiplicand,c
   341  007EBA  EC40  F03F         	call	___wmul	;wreg free
   342  007EBE  C001  F007         	movff	?___wmul,mpap_setupToTurn@absPos_insteps
   343  007EC2  C002  F008         	movff	?___wmul+1,mpap_setupToTurn@absPos_insteps+1
   344  007EC6  EC66  F03F         	call	_mpap_setupToTurn	;wreg free
   345  007ECA  0012               	return		;funcret
   346  007ECC                     __end_of_nozzle_moveto:
   347                           	opt callstack 0
   348                           
   349 ;; *************** function _mpap_setupToTurn *****************
   350 ;; Defined at:
   351 ;;		line 135 in file "main.c"
   352 ;; Parameters:    Size  Location     Type
   353 ;;  absPos_inste    2    6[COMRAM] int 
   354 ;; Auto vars:     Size  Location     Type
   355 ;;		None
   356 ;; Return value:  Size  Location     Type
   357 ;;                  1    wreg      void 
   358 ;; Registers used:
   359 ;;		wreg, status,2, status,0
   360 ;; Tracked objects:
   361 ;;		On entry : 0/0
   362 ;;		On exit  : 0/0
   363 ;;		Unchanged: 0/0
   364 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   365 ;;      Params:         2       0       0       0       0       0       0       0       0
   366 ;;      Locals:         2       0       0       0       0       0       0       0       0
   367 ;;      Temps:          0       0       0       0       0       0       0       0       0
   368 ;;      Totals:         4       0       0       0       0       0       0       0       0
   369 ;;Total ram usage:        4 bytes
   370 ;; Hardware stack levels used:    1
   371 ;; This function calls:
   372 ;;		Nothing
   373 ;; This function is called by:
   374 ;;		_nozzle_moveto
   375 ;; This function uses a non-reentrant model
   376 ;;
   377                           
   378                           	psect	text2
   379  007ECC                     __ptext2:
   380                           	opt callstack 0
   381  007ECC                     _mpap_setupToTurn:
   382                           	opt callstack 29
   383                           
   384                           ;main.c: 137: mpap.numSteps_tomove = absPos_insteps - mpap.numSteps_current;
   385                           
   386                           ;incstack = 0
   387  007ECC  500D               	movf	_mpap,w,c	;volatile
   388  007ECE  5C07               	subwf	mpap_setupToTurn@absPos_insteps,w,c
   389  007ED0  6E11               	movwf	_mpap+4,c	;volatile
   390  007ED2  500E               	movf	_mpap+1,w,c	;volatile
   391  007ED4  5808               	subwfb	mpap_setupToTurn@absPos_insteps+1,w,c
   392  007ED6  6E12               	movwf	_mpap+5,c	;volatile
   393                           
   394                           ;main.c: 138: if (mpap.numSteps_tomove !=0)
   395  007ED8  5011               	movf	_mpap+4,w,c	;volatile
   396  007EDA  1012               	iorwf	_mpap+5,w,c	;volatile
   397  007EDC  B4D8               	btfsc	status,2,c
   398  007EDE  0012               	return	
   399                           
   400                           ;main.c: 139: {;main.c: 140: mpap.counter_steps = 0;
   401  007EE0  0E00               	movlw	0
   402  007EE2  6E10               	movwf	_mpap+3,c	;volatile
   403  007EE4  0E00               	movlw	0
   404  007EE6  6E0F               	movwf	_mpap+2,c	;volatile
   405                           
   406                           ;main.c: 141: mpap.KI = (mpap.numSteps_tomove<0)?-1:1;
   407  007EE8  BE12               	btfsc	_mpap+5,7,c	;volatile
   408  007EEA  D005               	goto	l75
   409  007EEC  0E00               	movlw	0
   410  007EEE  6E0A               	movwf	_mpap_setupToTurn$58+1,c
   411  007EF0  0E01               	movlw	1
   412  007EF2  6E09               	movwf	_mpap_setupToTurn$58,c
   413  007EF4  D002               	goto	l77
   414  007EF6                     l75:
   415  007EF6  6809               	setf	_mpap_setupToTurn$58,c
   416  007EF8  680A               	setf	_mpap_setupToTurn$58+1,c
   417  007EFA                     l77:
   418  007EFA  C009  F013         	movff	_mpap_setupToTurn$58,_mpap+6	;volatile
   419  007EFE  0012               	return		;funcret
   420  007F00                     __end_of_mpap_setupToTurn:
   421                           	opt callstack 0
   422                           
   423 ;; *************** function ___wmul *****************
   424 ;; Defined at:
   425 ;;		line 15 in file "/opt/microchip/xc8/v2.05/pic/sources/c90/common/Umul16.c"
   426 ;; Parameters:    Size  Location     Type
   427 ;;  multiplier      2    0[COMRAM] unsigned int 
   428 ;;  multiplicand    2    2[COMRAM] unsigned int 
   429 ;; Auto vars:     Size  Location     Type
   430 ;;  product         2    4[COMRAM] unsigned int 
   431 ;; Return value:  Size  Location     Type
   432 ;;                  2    0[COMRAM] unsigned int 
   433 ;; Registers used:
   434 ;;		wreg, status,2, status,0, prodl, prodh
   435 ;; Tracked objects:
   436 ;;		On entry : 0/0
   437 ;;		On exit  : 0/0
   438 ;;		Unchanged: 0/0
   439 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   440 ;;      Params:         4       0       0       0       0       0       0       0       0
   441 ;;      Locals:         2       0       0       0       0       0       0       0       0
   442 ;;      Temps:          0       0       0       0       0       0       0       0       0
   443 ;;      Totals:         6       0       0       0       0       0       0       0       0
   444 ;;Total ram usage:        6 bytes
   445 ;; Hardware stack levels used:    1
   446 ;; This function calls:
   447 ;;		Nothing
   448 ;; This function is called by:
   449 ;;		_nozzle_moveto
   450 ;; This function uses a non-reentrant model
   451 ;;
   452                           
   453                           	psect	text3
   454  007E80                     __ptext3:
   455                           	opt callstack 0
   456  007E80                     ___wmul:
   457                           	opt callstack 29
   458                           
   459                           ;incstack = 0
   460  007E80  5001               	movf	___wmul@multiplier,w,c
   461  007E82  0203               	mulwf	___wmul@multiplicand,c
   462  007E84  CFF3 F005          	movff	prodl,___wmul@product
   463  007E88  CFF4 F006          	movff	prodh,___wmul@product+1
   464  007E8C  5001               	movf	___wmul@multiplier,w,c
   465  007E8E  0204               	mulwf	___wmul@multiplicand+1,c
   466  007E90  50F3               	movf	prodl,w,c
   467  007E92  2606               	addwf	___wmul@product+1,f,c
   468  007E94  5002               	movf	___wmul@multiplier+1,w,c
   469  007E96  0203               	mulwf	___wmul@multiplicand,c
   470  007E98  50F3               	movf	prodl,w,c
   471  007E9A  2606               	addwf	___wmul@product+1,f,c
   472  007E9C  C005  F001         	movff	___wmul@product,?___wmul
   473  007EA0  C006  F002         	movff	___wmul@product+1,?___wmul+1
   474  007EA4  0012               	return		;funcret
   475  007EA6                     __end_of___wmul:
   476                           	opt callstack 0
   477                           
   478 ;; *************** function _mpap_job *****************
   479 ;; Defined at:
   480 ;;		line 171 in file "main.c"
   481 ;; Parameters:    Size  Location     Type
   482 ;;		None
   483 ;; Auto vars:     Size  Location     Type
   484 ;;  cod_ret         1    0        char 
   485 ;; Return value:  Size  Location     Type
   486 ;;                  1    wreg      char 
   487 ;; Registers used:
   488 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
   489 ;; Tracked objects:
   490 ;;		On entry : 0/0
   491 ;;		On exit  : 0/0
   492 ;;		Unchanged: 0/0
   493 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   494 ;;      Params:         0       0       0       0       0       0       0       0       0
   495 ;;      Locals:         1       0       0       0       0       0       0       0       0
   496 ;;      Temps:          0       0       0       0       0       0       0       0       0
   497 ;;      Totals:         1       0       0       0       0       0       0       0       0
   498 ;;Total ram usage:        1 bytes
   499 ;; Hardware stack levels used:    1
   500 ;; Hardware stack levels required when called:    2
   501 ;; This function calls:
   502 ;;		_mpap_do1step
   503 ;; This function is called by:
   504 ;;		_main
   505 ;; This function uses a non-reentrant model
   506 ;;
   507                           
   508                           	psect	text4
   509  007F36                     __ptext4:
   510                           	opt callstack 0
   511  007F36                     _mpap_job:
   512                           	opt callstack 28
   513                           
   514                           ;main.c: 176: if (mpap.numSteps_tomove!=0)
   515                           
   516                           ;incstack = 0
   517  007F36  5011               	movf	_mpap+4,w,c	;volatile
   518  007F38  1012               	iorwf	_mpap+5,w,c	;volatile
   519  007F3A  B4D8               	btfsc	status,2,c
   520  007F3C  0012               	return	
   521                           
   522                           ;main.c: 177: {;main.c: 178: mpap_do1step(mpap.KI);
   523  007F3E  5013               	movf	_mpap+6,w,c	;volatile
   524  007F40  ECBA  F03F         	call	_mpap_do1step
   525                           
   526                           ;main.c: 180: mpap.counter_steps+= mpap.KI;
   527  007F44  5013               	movf	_mpap+6,w,c	;volatile
   528  007F46  260F               	addwf	_mpap+2,f,c	;volatile
   529  007F48  0E00               	movlw	0
   530  007F4A  BE13               	btfsc	_mpap+6,7,c	;volatile
   531  007F4C  0EFF               	movlw	255
   532  007F4E  2210               	addwfc	_mpap+3,f,c	;volatile
   533                           
   534                           ;main.c: 181: mpap.numSteps_current += mpap.counter_steps;
   535  007F50  EE20  F00F         	lfsr	2,_mpap+2	;volatile
   536  007F54  50DE               	movf	postinc2,w,c
   537  007F56  260D               	addwf	_mpap,f,c	;volatile
   538  007F58  50DD               	movf	postdec2,w,c
   539  007F5A  220E               	addwfc	_mpap+1,f,c	;volatile
   540                           
   541                           ;main.c: 182: if ( mpap.counter_steps == mpap.numSteps_tomove)
   542  007F5C  5011               	movf	_mpap+4,w,c	;volatile
   543  007F5E  180F               	xorwf	_mpap+2,w,c	;volatile
   544  007F60  E108               	bnz	l97
   545  007F62  5012               	movf	_mpap+5,w,c	;volatile
   546  007F64  1810               	xorwf	_mpap+3,w,c	;volatile
   547  007F66  A4D8               	btfss	status,2,c
   548  007F68  0012               	return	
   549                           
   550                           ;main.c: 183: {;main.c: 184: mpap.numSteps_tomove = 0;
   551  007F6A  0E00               	movlw	0
   552  007F6C  6E12               	movwf	_mpap+5,c	;volatile
   553  007F6E  0E00               	movlw	0
   554  007F70  6E11               	movwf	_mpap+4,c	;volatile
   555  007F72                     l97:
   556  007F72  0012               	return		;funcret
   557  007F74                     __end_of_mpap_job:
   558                           	opt callstack 0
   559                           
   560 ;; *************** function _mpap_do1step *****************
   561 ;; Defined at:
   562 ;;		line 153 in file "main.c"
   563 ;; Parameters:    Size  Location     Type
   564 ;;  KI              1    wreg     char 
   565 ;; Auto vars:     Size  Location     Type
   566 ;;  KI              1    0[COMRAM] char 
   567 ;; Return value:  Size  Location     Type
   568 ;;                  1    wreg      void 
   569 ;; Registers used:
   570 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
   571 ;; Tracked objects:
   572 ;;		On entry : 0/0
   573 ;;		On exit  : 0/0
   574 ;;		Unchanged: 0/0
   575 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   576 ;;      Params:         0       0       0       0       0       0       0       0       0
   577 ;;      Locals:         1       0       0       0       0       0       0       0       0
   578 ;;      Temps:          0       0       0       0       0       0       0       0       0
   579 ;;      Totals:         1       0       0       0       0       0       0       0       0
   580 ;;Total ram usage:        1 bytes
   581 ;; Hardware stack levels used:    1
   582 ;; Hardware stack levels required when called:    1
   583 ;; This function calls:
   584 ;;		__mpap_step1
   585 ;;		__mpap_step2
   586 ;;		__mpap_step3
   587 ;;		__mpap_step4
   588 ;; This function is called by:
   589 ;;		_mpap_job
   590 ;; This function uses a non-reentrant model
   591 ;;
   592                           
   593                           	psect	text5
   594  007F74                     __ptext5:
   595                           	opt callstack 0
   596  007F74                     _mpap_do1step:
   597                           	opt callstack 28
   598                           
   599                           ;incstack = 0
   600                           ;mpap_do1step@KI stored from wreg
   601  007F74  6E01               	movwf	mpap_do1step@KI,c
   602                           
   603                           ;main.c: 155: static int8_t i;;main.c: 156: mpap_step[i]();
   604  007F76  5014               	movf	mpap_do1step@i,w,c
   605  007F78  0D02               	mullw	2
   606  007F7A  50F3               	movf	prodl,w,c
   607  007F7C  0F15               	addlw	low _mpap_step
   608  007F7E  6ED9               	movwf	fsr2l,c
   609  007F80  6ADA               	clrf	fsr2h,c
   610  007F82  D801               	call	u38
   611  007F84  D00A               	goto	u39
   612  007F86                     u38:
   613  007F86  0005               	push	
   614  007F88  6EFA               	movwf	pclath,c
   615  007F8A  50DE               	movf	postinc2,w,c
   616  007F8C  6EFD               	movwf	tosl,c
   617  007F8E  50DE               	movf	postinc2,w,c
   618  007F90  6EFE               	movwf	tosh,c
   619  007F92  50F8               	movf	tblptru,w,c
   620  007F94  6EFF               	movwf	tosu,c
   621  007F96  50FA               	movf	pclath,w,c
   622  007F98  0012               	return		;indir
   623  007F9A                     u39:
   624                           
   625                           ;main.c: 157: i+=KI;
   626  007F9A  5001               	movf	mpap_do1step@KI,w,c
   627  007F9C  2614               	addwf	mpap_do1step@i,f,c
   628                           
   629                           ;main.c: 158: if (i>3){i=0;}
   630  007F9E  5014               	movf	mpap_do1step@i,w,c
   631  007FA0  0A80               	xorlw	128
   632  007FA2  0F7C               	addlw	-132
   633  007FA4  A0D8               	btfss	status,0,c
   634  007FA6  D002               	goto	l902
   635  007FA8  0E00               	movlw	0
   636  007FAA  6E14               	movwf	mpap_do1step@i,c
   637  007FAC                     l902:
   638                           
   639                           ;main.c: 159: if (i<0){i=3;}
   640  007FAC  AE14               	btfss	mpap_do1step@i,7,c
   641  007FAE  0012               	return	
   642  007FB0  0E03               	movlw	3
   643  007FB2  6E14               	movwf	mpap_do1step@i,c
   644  007FB4  0012               	return		;funcret
   645  007FB6                     __end_of_mpap_do1step:
   646                           	opt callstack 0
   647                           
   648 ;; *************** function __mpap_step3 *****************
   649 ;; Defined at:
   650 ;;		line 83 in file "main.c"
   651 ;; Parameters:    Size  Location     Type
   652 ;;		None
   653 ;; Auto vars:     Size  Location     Type
   654 ;;		None
   655 ;; Return value:  Size  Location     Type
   656 ;;                  1    wreg      void 
   657 ;; Registers used:
   658 ;;		status,2, status,0
   659 ;; Tracked objects:
   660 ;;		On entry : 0/0
   661 ;;		On exit  : 0/0
   662 ;;		Unchanged: 0/0
   663 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   664 ;;      Params:         0       0       0       0       0       0       0       0       0
   665 ;;      Locals:         0       0       0       0       0       0       0       0       0
   666 ;;      Temps:          0       0       0       0       0       0       0       0       0
   667 ;;      Totals:         0       0       0       0       0       0       0       0       0
   668 ;;Total ram usage:        0 bytes
   669 ;; Hardware stack levels used:    1
   670 ;; This function calls:
   671 ;;		Nothing
   672 ;; This function is called by:
   673 ;;		_mpap_do1step
   674 ;; This function uses a non-reentrant model
   675 ;;
   676                           
   677                           	psect	text6
   678  007E76                     __ptext6:
   679                           	opt callstack 0
   680  007E76                     __mpap_step3:
   681                           	opt callstack 28
   682                           
   683                           ;incstack = 0
   684                           ;main.c: 85: do{LATD &= ~(1<<0);}while(0);
   685  007E76  908C               	bcf	3980,0,c	;volatile
   686                           
   687                           ;main.c: 86: do{LATD |= 1<<1;}while(0);
   688  007E78  828C               	bsf	3980,1,c	;volatile
   689                           
   690                           ;main.c: 87: do{LATD &= ~(1<<2);}while(0);
   691  007E7A  948C               	bcf	3980,2,c	;volatile
   692                           
   693                           ;main.c: 88: do{LATD &= ~(1<<3);}while(0);
   694  007E7C  968C               	bcf	3980,3,c	;volatile
   695  007E7E  0012               	return		;funcret
   696  007E80                     __end_of__mpap_step3:
   697                           	opt callstack 0
   698                           
   699 ;; *************** function __mpap_step2 *****************
   700 ;; Defined at:
   701 ;;		line 76 in file "main.c"
   702 ;; Parameters:    Size  Location     Type
   703 ;;		None
   704 ;; Auto vars:     Size  Location     Type
   705 ;;		None
   706 ;; Return value:  Size  Location     Type
   707 ;;                  1    wreg      void 
   708 ;; Registers used:
   709 ;;		status,2, status,0
   710 ;; Tracked objects:
   711 ;;		On entry : 0/0
   712 ;;		On exit  : 0/0
   713 ;;		Unchanged: 0/0
   714 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   715 ;;      Params:         0       0       0       0       0       0       0       0       0
   716 ;;      Locals:         0       0       0       0       0       0       0       0       0
   717 ;;      Temps:          0       0       0       0       0       0       0       0       0
   718 ;;      Totals:         0       0       0       0       0       0       0       0       0
   719 ;;Total ram usage:        0 bytes
   720 ;; Hardware stack levels used:    1
   721 ;; This function calls:
   722 ;;		Nothing
   723 ;; This function is called by:
   724 ;;		_mpap_do1step
   725 ;; This function uses a non-reentrant model
   726 ;;
   727                           
   728                           	psect	text7
   729  007E6C                     __ptext7:
   730                           	opt callstack 0
   731  007E6C                     __mpap_step2:
   732                           	opt callstack 28
   733                           
   734                           ;incstack = 0
   735                           ;main.c: 78: do{LATD &= ~(1<<0);}while(0);
   736  007E6C  908C               	bcf	3980,0,c	;volatile
   737                           
   738                           ;main.c: 79: do{LATD &= ~(1<<1);}while(0);
   739  007E6E  928C               	bcf	3980,1,c	;volatile
   740                           
   741                           ;main.c: 80: do{LATD |= 1<<2;}while(0);
   742  007E70  848C               	bsf	3980,2,c	;volatile
   743                           
   744                           ;main.c: 81: do{LATD &= ~(1<<3);}while(0);
   745  007E72  968C               	bcf	3980,3,c	;volatile
   746  007E74  0012               	return		;funcret
   747  007E76                     __end_of__mpap_step2:
   748                           	opt callstack 0
   749                           
   750 ;; *************** function __mpap_step1 *****************
   751 ;; Defined at:
   752 ;;		line 69 in file "main.c"
   753 ;; Parameters:    Size  Location     Type
   754 ;;		None
   755 ;; Auto vars:     Size  Location     Type
   756 ;;		None
   757 ;; Return value:  Size  Location     Type
   758 ;;                  1    wreg      void 
   759 ;; Registers used:
   760 ;;		status,2, status,0
   761 ;; Tracked objects:
   762 ;;		On entry : 0/0
   763 ;;		On exit  : 0/0
   764 ;;		Unchanged: 0/0
   765 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   766 ;;      Params:         0       0       0       0       0       0       0       0       0
   767 ;;      Locals:         0       0       0       0       0       0       0       0       0
   768 ;;      Temps:          0       0       0       0       0       0       0       0       0
   769 ;;      Totals:         0       0       0       0       0       0       0       0       0
   770 ;;Total ram usage:        0 bytes
   771 ;; Hardware stack levels used:    1
   772 ;; This function calls:
   773 ;;		Nothing
   774 ;; This function is called by:
   775 ;;		_mpap_do1step
   776 ;; This function uses a non-reentrant model
   777 ;;
   778                           
   779                           	psect	text8
   780  007E62                     __ptext8:
   781                           	opt callstack 0
   782  007E62                     __mpap_step1:
   783                           	opt callstack 28
   784                           
   785                           ;incstack = 0
   786                           ;main.c: 71: do{LATD &= ~(1<<0);}while(0);
   787  007E62  908C               	bcf	3980,0,c	;volatile
   788                           
   789                           ;main.c: 72: do{LATD &= ~(1<<1);}while(0);
   790  007E64  928C               	bcf	3980,1,c	;volatile
   791                           
   792                           ;main.c: 73: do{LATD &= ~(1<<2);}while(0);
   793  007E66  948C               	bcf	3980,2,c	;volatile
   794                           
   795                           ;main.c: 74: do{LATD |= 1<<3;}while(0);
   796  007E68  868C               	bsf	3980,3,c	;volatile
   797  007E6A  0012               	return		;funcret
   798  007E6C                     __end_of__mpap_step1:
   799                           	opt callstack 0
   800                           
   801 ;; *************** function __mpap_step4 *****************
   802 ;; Defined at:
   803 ;;		line 90 in file "main.c"
   804 ;; Parameters:    Size  Location     Type
   805 ;;		None
   806 ;; Auto vars:     Size  Location     Type
   807 ;;		None
   808 ;; Return value:  Size  Location     Type
   809 ;;                  1    wreg      void 
   810 ;; Registers used:
   811 ;;		status,2, status,0
   812 ;; Tracked objects:
   813 ;;		On entry : 0/0
   814 ;;		On exit  : 0/0
   815 ;;		Unchanged: 0/0
   816 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   817 ;;      Params:         0       0       0       0       0       0       0       0       0
   818 ;;      Locals:         0       0       0       0       0       0       0       0       0
   819 ;;      Temps:          0       0       0       0       0       0       0       0       0
   820 ;;      Totals:         0       0       0       0       0       0       0       0       0
   821 ;;Total ram usage:        0 bytes
   822 ;; Hardware stack levels used:    1
   823 ;; This function calls:
   824 ;;		Nothing
   825 ;; This function is called by:
   826 ;;		_mpap_do1step
   827 ;; This function uses a non-reentrant model
   828 ;;
   829                           
   830                           	psect	text9
   831  007E58                     __ptext9:
   832                           	opt callstack 0
   833  007E58                     __mpap_step4:
   834                           	opt callstack 28
   835                           
   836                           ;incstack = 0
   837                           ;main.c: 92: do{LATD |= 1<<0;}while(0);
   838  007E58  808C               	bsf	3980,0,c	;volatile
   839                           
   840                           ;main.c: 93: do{LATD &= ~(1<<1);}while(0);
   841  007E5A  928C               	bcf	3980,1,c	;volatile
   842                           
   843                           ;main.c: 94: do{LATD &= ~(1<<2);}while(0);
   844  007E5C  948C               	bcf	3980,2,c	;volatile
   845                           
   846                           ;main.c: 95: do{LATD &= ~(1<<3);}while(0);
   847  007E5E  968C               	bcf	3980,3,c	;volatile
   848  007E60  0012               	return		;funcret
   849  007E62                     __end_of__mpap_step4:
   850                           	opt callstack 0
   851  0000                     
   852                           	psect	text10
   853  000000                     __ptext10:
   854                           	opt callstack 0
   855                           
   856                           	psect	rparam
   857  0000                     tosu	equ	0xFFF
   858                           tosh	equ	0xFFE
   859                           tosl	equ	0xFFD
   860                           stkptr	equ	0xFFC
   861                           pclatu	equ	0xFFB
   862                           pclath	equ	0xFFA
   863                           pcl	equ	0xFF9
   864                           tblptru	equ	0xFF8
   865                           tblptrh	equ	0xFF7
   866                           tblptrl	equ	0xFF6
   867                           tablat	equ	0xFF5
   868                           prodh	equ	0xFF4
   869                           prodl	equ	0xFF3
   870                           indf0	equ	0xFEF
   871                           postinc0	equ	0xFEE
   872                           postdec0	equ	0xFED
   873                           preinc0	equ	0xFEC
   874                           plusw0	equ	0xFEB
   875                           fsr0h	equ	0xFEA
   876                           fsr0l	equ	0xFE9
   877                           wreg	equ	0xFE8
   878                           indf1	equ	0xFE7
   879                           postinc1	equ	0xFE6
   880                           postdec1	equ	0xFE5
   881                           preinc1	equ	0xFE4
   882                           plusw1	equ	0xFE3
   883                           fsr1h	equ	0xFE2
   884                           fsr1l	equ	0xFE1
   885                           bsr	equ	0xFE0
   886                           indf2	equ	0xFDF
   887                           postinc2	equ	0xFDE
   888                           postdec2	equ	0xFDD
   889                           preinc2	equ	0xFDC
   890                           plusw2	equ	0xFDB
   891                           fsr2h	equ	0xFDA
   892                           fsr2l	equ	0xFD9
   893                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        8
    BSS         8
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     12      28
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    mpap_step	PTR FTN()void [4] size(2) Largest target is 1
		 -> _mpap_step4(), _mpap_step3(), _mpap_step2(), _mpap_step1(), 


Critical Paths under _main in COMRAM

    _main->_nozzle_moveto
    _nozzle_moveto->_mpap_setupToTurn
    _mpap_setupToTurn->___wmul
    _mpap_job->_mpap_do1step

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0     575
                                             11 COMRAM     1     1      0
                           _mpap_job
                      _nozzle_moveto
 ---------------------------------------------------------------------------------
 (1) _nozzle_moveto                                        1     1      0     555
                                             10 COMRAM     1     1      0
                             ___wmul
                   _mpap_setupToTurn
 ---------------------------------------------------------------------------------
 (2) _mpap_setupToTurn                                     4     2      2     122
                                              6 COMRAM     4     2      2
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     411
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (1) _mpap_job                                             1     1      0      20
                                              1 COMRAM     1     1      0
                       _mpap_do1step
 ---------------------------------------------------------------------------------
 (2) _mpap_do1step                                         1     1      0      15
                                              0 COMRAM     1     1      0
                        __mpap_step1 *
                        __mpap_step2 *
                        __mpap_step3 *
                        __mpap_step4 *
 ---------------------------------------------------------------------------------
 (3) __mpap_step4                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (3) __mpap_step3                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (3) __mpap_step2                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (3) __mpap_step1                                          0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _mpap_job
     _mpap_do1step
       __mpap_step1 *
       __mpap_step2 *
       __mpap_step3 *
       __mpap_step4 *
   _nozzle_moveto
     ___wmul
     _mpap_setupToTurn
       ___wmul (ARG)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F      C      1C       1       29.5%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      1C      20        0.0%
DATA                 0      0      1C       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Mon Jul  1 20:26:44 2019

                            l75 7EF6                              l77 7EFA                              l97 7F72  
                            u38 7F86                              u39 7F9A                     __CFG_BOR$ON 000000  
           ___wmul@multiplicand 0003                     __CFG_BORV$3 000000                             l902 7FAC  
                           l986 7FEA                             u107 7FF4                             tosl 000FFD  
                           wreg 000FE8                    __CFG_LVP$OFF 000000                    __CFG_WDT$OFF 000000  
                          _LATA 000F89                            _LATB 000F8A                            _LATC 000F8B  
                          _LATD 000F8C                    __CFG_PWRT$ON 000000                            _main 7FB6  
                          _mpap 000D                            fsr2h 000FDA                            fsr1l 000FE1  
                          fsr2l 000FD9                   _nozzle_moveto 7EA6                            prodh 000FF4  
                          prodl 000FF3                            start 0000                   __CFG_IESO$OFF 000000  
                 __CFG_MCLRE$ON 000000                    ___param_bank 000000                   __CFG_PLLDIV$5 000000  
                         ?_main 0001                           _CMCON 000FB4                   __CFG_USBDIV$2 000000  
                         _TRISA 000F92                           _TRISB 000F93                           _TRISC 000F94  
                         _TRISD 000F95                  __CFG_FCMEN$OFF 000000                           pclath 000FFA  
                         tablat 000FF5                           status 000FD8                  ?_nozzle_moveto 0001  
          __size_of__mpap_step1 000A            __size_of__mpap_step2 000A            __size_of__mpap_step3 000A  
          __size_of__mpap_step4 000A                 __initialization 7F00                    __end_of_main 8000  
                        ??_main 000C                   mpap_do1step@i 0014                   __activetblptr 000002  
                        _ADCON1 000FC1                  __CFG_VREGEN$ON 000000                          ___wmul 7E80  
                        clear_0 7F26                __end_of_mpap_job 7F74        __end_of_mpap_setupToTurn 7F00  
                  __pdataCOMRAM 0015                          tblptrh 000FF7                          tblptrl 000FF6  
                        tblptru 000FF8                 ??_nozzle_moveto 000B                      __accesstop 0060  
       __end_of__initialization 7F2C                 __CFG_PBADEN$OFF 000000                   ?_mpap_do1step 0001  
                 ___rparam_used 000001                  __pcstackCOMRAM 0001                  mpap_do1step@KI 0001  
                ??_mpap_do1step 0001                         ?___wmul 0001                       ?_mpap_job 0001  
                       __Hparam 0000                         __Lparam 0000                 __size_of___wmul 0026  
                       __pcinit 7F00                         __ramtop 0800                         __ptext0 7FB6  
                       __ptext1 7EA6                         __ptext2 7ECC                         __ptext3 7E80  
                       __ptext4 7F36                         __ptext5 7F74                         __ptext6 7E76  
                       __ptext7 7E6C                         __ptext8 7E62                         __ptext9 7E58  
          end_of_initialization 7F2C                   ??__mpap_step1 0001                   ??__mpap_step2 0001  
                 ??__mpap_step3 0001                   ??__mpap_step4 0001                   __Lmediumconst 0000  
                    ??_mpap_job 0002                         postdec1 000FE5                         postdec2 000FDD  
                       postinc0 000FEE                         postinc2 000FDE            __end_of_mpap_do1step 7FB6  
             ?_mpap_setupToTurn 0007              ??_mpap_setupToTurn 0009             nozzle_moveto@nozzle 000B  
           __end_of__mpap_step1 7E6C             __end_of__mpap_step2 7E76             __end_of__mpap_step3 7E80  
           __end_of__mpap_step4 7E62                  __end_of___wmul 7EA6                   __pidataCOMRAM 7E50  
           start_initialization 7F00           __end_of_nozzle_moveto 7ECC                        ??___wmul 0005  
                   __pbssCOMRAM 000D                     __mpap_step1 7E62                     __mpap_step2 7E6C  
                   __mpap_step3 7E76                     __mpap_step4 7E58               __size_of_mpap_job 003E  
         __size_of_mpap_do1step 0042                       _mpap_step 0015                  ___wmul@product 0005  
                  _mpap_do1step 7F74               ___wmul@multiplier 0001                       copy_data0 7F14  
     __size_of_mpap_setupToTurn 0034                        __Hrparam 0000                        __Lrparam 0000  
                      __ptext10 0000                   __size_of_main 004A  mpap_setupToTurn@absPos_insteps 0007  
                      _mpap_job 7F36           __CFG_CPUDIV$OSC1_PLL2 000000                    ?__mpap_step1 0001  
                  ?__mpap_step2 0001                    ?__mpap_step3 0001                    ?__mpap_step4 0001  
           _mpap_setupToTurn$58 0009          __size_of_nozzle_moveto 0026              __CFG_FOSC$HSPLL_HS 000000  
              _mpap_setupToTurn 7ECC  

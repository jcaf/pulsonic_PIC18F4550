

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Sat Jul 13 00:11:05 2019

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og9 
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    12                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    14                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    15                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    16                           	psect	text0,global,reloc=2,class=CODE,delta=1
    17                           	psect	text1,global,reloc=2,class=CODE,delta=1
    18                           	psect	text2,global,reloc=2,class=CODE,delta=1
    19                           	psect	text3,global,reloc=2,class=CODE,delta=1
    20                           	psect	text4,global,reloc=2,class=CODE,delta=1
    21                           	psect	text5,global,reloc=2,class=CODE,delta=1
    22                           	psect	text6,global,reloc=2,class=CODE,delta=1,keep,inline
    23                           	psect	text7,global,reloc=2,class=CODE,delta=1,keep,inline
    24                           	psect	text8,global,reloc=2,class=CODE,delta=1,keep,inline
    25                           	psect	text9,global,reloc=2,class=CODE,delta=1,keep,inline
    26                           	psect	text10,global,reloc=2,class=CODE,delta=1,keep,inline
    27                           	psect	text11,global,reloc=2,class=CODE,delta=1
    28                           	psect	text12,global,reloc=2,class=CODE,delta=1
    29                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=1
    30                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=1
    31                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=1
    32                           	psect	text16,global,reloc=2,class=CODE,delta=1
    33                           	psect	text17,global,reloc=2,class=CODE,delta=1
    34                           	psect	text18,global,reloc=2,class=CODE,delta=1
    35                           	psect	text19,global,reloc=2,class=CODE,delta=1
    36                           	psect	text20,global,reloc=2,class=CODE,delta=1
    37                           	psect	text21,global,reloc=2,class=CODE,delta=1
    38                           	psect	text22,global,reloc=2,class=CODE,delta=1,group=2
    39                           	psect	text23,global,reloc=2,class=CODE,delta=1,group=2
    40                           	psect	text24,global,reloc=2,class=CODE,delta=1,group=2
    41                           	psect	text25,global,reloc=2,class=CODE,delta=1,group=1
    42                           	psect	text26,global,reloc=2,class=CODE,delta=1,group=1
    43                           	psect	text27,global,reloc=2,class=CODE,delta=1,group=1
    44                           	psect	text28,global,reloc=2,class=CODE,delta=1
    45                           	psect	text29,global,reloc=2,class=CODE,delta=1
    46                           	psect	text30,global,reloc=2,class=CODE,delta=1
    47                           	psect	text31,global,reloc=2,class=CODE,delta=1
    48                           	psect	text32,global,reloc=2,class=CODE,delta=1,keep,inline
    49                           	psect	text33,global,reloc=2,class=CODE,delta=1,keep,inline
    50                           	psect	text34,global,reloc=2,class=CODE,delta=1,keep,inline
    51                           	psect	text35,global,reloc=2,class=CODE,delta=1,keep,inline
    52                           	psect	text36,global,reloc=2,class=CODE,delta=1,keep,inline
    53                           	psect	text37,global,reloc=2,class=CODE,delta=1,keep,inline
    54                           	psect	text38,global,reloc=2,class=CODE,delta=1,keep,inline
    55                           	psect	text39,global,reloc=2,class=CODE,delta=1,keep,inline
    56                           	psect	text40,global,reloc=2,class=CODE,delta=1,keep,inline
    57                           	psect	text41,global,reloc=2,class=CODE,delta=1,keep,inline
    58                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    59                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    60                           	psect	text43,global,reloc=2,class=CODE,delta=1
    61                           	psect	text44,global,reloc=2,class=CODE,delta=1
    62                           	psect	text45,global,reloc=2,class=CODE,delta=1
    63                           	psect	text46,global,reloc=2,class=CODE,delta=1
    64                           	psect	text47,global,reloc=2,class=CODE,delta=1
    65                           	psect	text48,global,reloc=2,class=CODE,delta=1
    66                           	psect	text49,global,reloc=2,class=CODE,delta=1
    67                           	psect	text50,global,reloc=2,class=CODE,delta=1
    68                           	psect	text51,global,reloc=2,class=CODE,delta=1
    69                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    70                           	psect	text52,global,reloc=2,class=CODE,delta=1
    71                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    72                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    73  0000                     
    74                           ; Version 2.05
    75                           ; Generated 20/12/2018 GMT
    76                           ; 
    77                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    78                           ; All rights reserved.
    79                           ; 
    80                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    81                           ; 
    82                           ; Redistribution and use in source and binary forms, with or without modification, are
    83                           ; permitted provided that the following conditions are met:
    84                           ; 
    85                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    86                           ;        conditions and the following disclaimer.
    87                           ; 
    88                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    89                           ;        of conditions and the following disclaimer in the documentation and/or other
    90                           ;        materials provided with the distribution.
    91                           ; 
    92                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    93                           ;        software without specific prior written permission.
    94                           ; 
    95                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    96                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    97                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    98                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    99                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   100                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   101                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   102                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   103                           ; 
   104                           ; 
   105                           ; Code-generator required, PIC18F4550 Definitions
   106                           ; 
   107                           ; SFR Addresses
   108  0000                     
   109                           	psect	idataCOMRAM
   110  001B4A                     __pidataCOMRAM:
   111                           	opt callstack 0
   112                           
   113                           ;initializer for _mpap_off
   114  001B4A  FC                 	db	low __mpap_off
   115  001B4B  1A                 	db	high __mpap_off
   116                           
   117                           ;initializer for mpap_do1step@i
   118  001B4C  FF                 	db	255
   119                           
   120                           	psect	idataBANK0
   121  001A66                     __pidataBANK0:
   122                           	opt callstack 0
   123                           
   124                           ;initializer for _disp7s_mux
   125  001A66  42                 	db	low _disp7s_mux0_off
   126  001A67  1B                 	db	high _disp7s_mux0_off
   127  001A68  3E                 	db	low _disp7s_mux0_on
   128  001A69  1B                 	db	high _disp7s_mux0_on
   129  001A6A  3A                 	db	low _disp7s_mux1_off
   130  001A6B  1B                 	db	high _disp7s_mux1_off
   131  001A6C  36                 	db	low _disp7s_mux1_on
   132  001A6D  1B                 	db	high _disp7s_mux1_on
   133  001A6E  32                 	db	low _disp7s_mux2_off
   134  001A6F  1B                 	db	high _disp7s_mux2_off
   135  001A70  2E                 	db	low _disp7s_mux2_on
   136  001A71  1B                 	db	high _disp7s_mux2_on
   137  001A72  2A                 	db	low _disp7s_mux3_off
   138  001A73  1B                 	db	high _disp7s_mux3_off
   139  001A74  26                 	db	low _disp7s_mux3_on
   140  001A75  1B                 	db	high _disp7s_mux3_on
   141  001A76  22                 	db	low _disp7s_mux4_off
   142  001A77  1B                 	db	high _disp7s_mux4_off
   143  001A78  46                 	db	low _disp7s_mux4_on
   144  001A79  1B                 	db	high _disp7s_mux4_on
   145                           
   146                           ;initializer for _mpap_step
   147  001A7A  E8                 	db	low __mpap_step1
   148  001A7B  1A                 	db	high __mpap_step1
   149  001A7C  DE                 	db	low __mpap_step2
   150  001A7D  1A                 	db	high __mpap_step2
   151  001A7E  D4                 	db	low __mpap_step3
   152  001A7F  1A                 	db	high __mpap_step3
   153  001A80  F2                 	db	low __mpap_step4
   154  001A81  1A                 	db	high __mpap_step4
   155                           
   156                           	psect	smallconst
   157  000800                     __psmallconst:
   158                           	opt callstack 0
   159  000800  00                 	db	0
   160  000801                     _DISP7S_NUMS:
   161                           	opt callstack 0
   162  000801  3F                 	db	63
   163  000802  06                 	db	6
   164  000803  5B                 	db	91
   165  000804  4F                 	db	79
   166  000805  66                 	db	102
   167  000806  6D                 	db	109
   168  000807  7C                 	db	124
   169  000808  07                 	db	7
   170  000809  7F                 	db	127
   171  00080A  67                 	db	103
   172  00080B                     __end_of_DISP7S_NUMS:
   173                           	opt callstack 0
   174  00080B                     _DISP7S_CHARS:
   175                           	opt callstack 0
   176  00080B  00                 	db	0
   177  00080C  40                 	db	64
   178  00080D                     __end_of_DISP7S_CHARS:
   179                           	opt callstack 0
   180  0000                     _TRISB	set	3987
   181  0000                     _TRISA	set	3986
   182  0000                     _PORTE	set	3972
   183  0000                     _PORTD	set	3971
   184  0000                     _PORTC	set	3970
   185  0000                     _TRISC	set	3988
   186  0000                     _TRISD	set	3989
   187  0000                     _TRISE	set	3990
   188  0000                     _TMR0L	set	4054
   189  0000                     _TMR0H	set	4055
   190  0000                     _T0CON	set	4053
   191  0000                     _UCFG	set	3951
   192  0000                     _UCON	set	3949
   193  0000                     _CMCON	set	4020
   194  0000                     _ADCON1	set	4033
   195  0000                     _LATB	set	3978
   196  0000                     _LATE	set	3981
   197  0000                     _LATD	set	3980
   198  0000                     _LATC	set	3979
   199  0000                     _LATA	set	3977
   200  0000                     _TMR0IF	set	32658
   201  0000                     _GIE	set	32663
   202  0000                     _TMR0IE	set	32661
   203                           
   204                           ; #config settings
   205  00080D  00                 	db	0	; dummy byte at the end
   206  0000                     
   207                           	psect	cinit
   208  0015AE                     __pcinit:
   209                           	opt callstack 0
   210  0015AE                     start_initialization:
   211                           	opt callstack 0
   212  0015AE                     __initialization:
   213                           	opt callstack 0
   214                           
   215                           ; Initialize objects allocated to BANK0 (28 bytes)
   216                           ; load TBLPTR registers with __pidataBANK0
   217  0015AE  0E66               	movlw	low __pidataBANK0
   218  0015B0  6EF6               	movwf	tblptrl,c
   219  0015B2  0E1A               	movlw	high __pidataBANK0
   220  0015B4  6EF7               	movwf	tblptrh,c
   221  0015B6  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   222  0015B8  6EF8               	movwf	tblptru,c
   223  0015BA  EE00  F0B5         	lfsr	0,__pdataBANK0
   224  0015BE  EE10 F01C          	lfsr	1,28
   225  0015C2                     copy_data0:
   226  0015C2  0009               	tblrd		*+
   227  0015C4  CFF5 FFEE          	movff	tablat,postinc0
   228  0015C8  50E5               	movf	postdec1,w,c
   229  0015CA  50E1               	movf	fsr1l,w,c
   230  0015CC  E1FA               	bnz	copy_data0
   231                           
   232                           ; Initialize objects allocated to COMRAM (3 bytes)
   233                           ; load TBLPTR registers with __pidataCOMRAM
   234  0015CE  0E4A               	movlw	low __pidataCOMRAM
   235  0015D0  6EF6               	movwf	tblptrl,c
   236  0015D2  0E1B               	movlw	high __pidataCOMRAM
   237  0015D4  6EF7               	movwf	tblptrh,c
   238  0015D6  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   239  0015D8  6EF8               	movwf	tblptru,c
   240  0015DA  0009               	tblrd		*+	;fetch initializer
   241  0015DC  CFF5 F04E          	movff	tablat,__pdataCOMRAM
   242  0015E0  0009               	tblrd		*+	;fetch initializer
   243  0015E2  CFF5 F04F          	movff	tablat,__pdataCOMRAM+1
   244  0015E6  0009               	tblrd		*+	;fetch initializer
   245  0015E8  CFF5 F050          	movff	tablat,__pdataCOMRAM+2
   246                           
   247                           ; Clear objects allocated to BANK1 (64 bytes)
   248  0015EC  EE01  F000         	lfsr	0,__pbssBANK1
   249  0015F0  0E40               	movlw	64
   250  0015F2                     clear_0:
   251  0015F2  6AEE               	clrf	postinc0,c
   252  0015F4  06E8               	decf	wreg,f,c
   253  0015F6  E1FD               	bnz	clear_0
   254                           
   255                           ; Clear objects allocated to BANK0 (85 bytes)
   256  0015F8  EE00  F060         	lfsr	0,__pbssBANK0
   257  0015FC  0E55               	movlw	85
   258  0015FE                     clear_1:
   259  0015FE  6AEE               	clrf	postinc0,c
   260  001600  06E8               	decf	wreg,f,c
   261  001602  E1FD               	bnz	clear_1
   262                           
   263                           ; Clear objects allocated to COMRAM (32 bytes)
   264  001604  EE00  F02E         	lfsr	0,__pbssCOMRAM
   265  001608  0E20               	movlw	32
   266  00160A                     clear_2:
   267  00160A  6AEE               	clrf	postinc0,c
   268  00160C  06E8               	decf	wreg,f,c
   269  00160E  E1FD               	bnz	clear_2
   270  001610                     end_of_initialization:
   271                           	opt callstack 0
   272  001610                     __end_of__initialization:
   273                           	opt callstack 0
   274  001610  9051               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   275  001612  9251               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   276  001614  0E00               	movlw	low (__Lmediumconst shr (0+16))
   277  001616  6EF8               	movwf	tblptru,c
   278  001618  0100               	movlb	0
   279  00161A  EF77  F008         	goto	_main	;jump to C main() function
   280                           
   281                           	psect	bssCOMRAM
   282  00002E                     __pbssCOMRAM:
   283                           	opt callstack 0
   284  00002E                     _mpap:
   285                           	opt callstack 0
   286  00002E                     	ds	8
   287  000036                     _pump:
   288                           	opt callstack 0
   289  000036                     	ds	3
   290  000039                     	ds	2
   291  00003B                     	ds	2
   292  00003D                     disp7s_job@q:
   293                           	opt callstack 0
   294  00003D                     	ds	1
   295  00003E                     pump_job@c:
   296                           	opt callstack 0
   297  00003E                     	ds	1
   298  00003F                     mpap_sych@c:
   299                           	opt callstack 0
   300  00003F                     	ds	1
   301  000040                     mpap_sych@sm0:
   302                           	opt callstack 0
   303  000040                     	ds	1
   304  000041                     	ds	1
   305  000042                     	ds	1
   306  000043                     	ds	1
   307  000044                     	ds	1
   308  000045                     	ds	1
   309  000046                     	ds	1
   310  000047                     _error_grantedToWriteDisp:
   311                           	opt callstack 0
   312  000047                     	ds	1
   313  000048                     _error_requestToWriteDisp:
   314                           	opt callstack 0
   315  000048                     	ds	1
   316  000049                     _disp_owner:
   317                           	opt callstack 0
   318  000049                     	ds	1
   319  00004A                     _machineState:
   320                           	opt callstack 0
   321  00004A                     	ds	1
   322  00004B                     _lock:
   323                           	opt callstack 0
   324  00004B                     	ds	1
   325  00004C                     _main_flag:
   326                           	opt callstack 0
   327  00004C                     	ds	1
   328  00004D                     _isr_flag:
   329                           	opt callstack 0
   330  00004D                     	ds	1
   331                           
   332                           	psect	dataCOMRAM
   333  00004E                     __pdataCOMRAM:
   334                           	opt callstack 0
   335  00004E                     _mpap_off:
   336                           	opt callstack 0
   337  00004E                     	ds	2
   338  000050                     mpap_do1step@i:
   339                           	opt callstack 0
   340  000050                     	ds	1
   341                           
   342                           	psect	bssBANK0
   343  000060                     __pbssBANK0:
   344                           	opt callstack 0
   345  000060                     _key:
   346                           	opt callstack 0
   347  000060                     	ds	80
   348  0000B0                     _group_x:
   349                           	opt callstack 0
   350  0000B0                     	ds	5
   351                           
   352                           	psect	dataBANK0
   353  0000B5                     __pdataBANK0:
   354                           	opt callstack 0
   355  0000B5                     _disp7s_mux:
   356                           	opt callstack 0
   357  0000B5                     	ds	20
   358  0000C9                     _mpap_step:
   359                           	opt callstack 0
   360  0000C9                     	ds	8
   361                           
   362                           	psect	bssBANK1
   363  000100                     __pbssBANK1:
   364                           	opt callstack 0
   365  000100                     _pulsonic:
   366                           	opt callstack 0
   367  000100                     	ds	64
   368                           
   369                           	psect	cstackBANK0
   370  0000D1                     __pcstackBANK0:
   371                           	opt callstack 0
   372  0000D1                     disp7s_write_i@buff:
   373                           	opt callstack 0
   374                           
   375                           ; 10 bytes @ 0x0
   376  0000D1                     	ds	10
   377  0000DB                     disp7s_write_i@pi:
   378                           	opt callstack 0
   379                           
   380                           ; 1 bytes @ 0xA
   381  0000DB                     	ds	1
   382  0000DC                     disp7s_write_i@K10MULT:
   383                           	opt callstack 0
   384                           
   385                           ; 2 bytes @ 0xB
   386  0000DC                     	ds	2
   387  0000DE                     disp7s_write_i@i:
   388                           	opt callstack 0
   389                           
   390                           ; 1 bytes @ 0xD
   391  0000DE                     	ds	1
   392                           
   393                           	psect	cstackCOMRAM
   394  000001                     __pcstackCOMRAM:
   395                           	opt callstack 0
   396  000001                     mpap_do1step@KI:
   397                           	opt callstack 0
   398                           
   399                           ; 1 bytes @ 0x0
   400  000001                     	ds	1
   401  000002                     ??_mpap_homming:
   402  000002                     mpap_normal_mode@cod_ret:
   403                           	opt callstack 0
   404                           
   405                           ; 1 bytes @ 0x1
   406  000002                     	ds	1
   407  000003                     mpap_homming@cod_ret:
   408                           	opt callstack 0
   409                           
   410                           ; 1 bytes @ 0x2
   411  000003                     	ds	1
   412  000004                     
   413                           ; 1 bytes @ 0x3
   414  000004                     	ds	1
   415  000005                     ??_INTERRUPCION:
   416                           
   417                           ; 1 bytes @ 0x4
   418  000005                     	ds	6
   419  00000B                     ??_ikey_is_accessible:
   420  00000B                     ??_disp7s_mux_Q:
   421  00000B                     ?_strlen:
   422                           	opt callstack 0
   423  00000B                     ?___wmul:
   424                           	opt callstack 0
   425  00000B                     ?___lwdiv:
   426                           	opt callstack 0
   427  00000B                     ?___lwmod:
   428                           	opt callstack 0
   429  00000B                     ?___ftpack:
   430                           	opt callstack 0
   431  00000B                     ikb_init@i:
   432                           	opt callstack 0
   433  00000B                     ikey_clear_all_flag@i:
   434                           	opt callstack 0
   435  00000B                     pulsonic_init@i:
   436                           	opt callstack 0
   437  00000B                     disp7s_mux_init@i:
   438                           	opt callstack 0
   439  00000B                     strlen@s:
   440                           	opt callstack 0
   441  00000B                     ___wmul@multiplier:
   442                           	opt callstack 0
   443  00000B                     ___lwdiv@dividend:
   444                           	opt callstack 0
   445  00000B                     ___lwmod@dividend:
   446                           	opt callstack 0
   447  00000B                     ___ftpack@arg:
   448                           	opt callstack 0
   449                           
   450                           ; 3 bytes @ 0xA
   451  00000B                     	ds	1
   452  00000C                     ikey_scan@k:
   453                           	opt callstack 0
   454  00000C                     disp7s_init@i:
   455                           	opt callstack 0
   456                           
   457                           ; 1 bytes @ 0xB
   458  00000C                     	ds	1
   459  00000D                     ikey_is_accessible@k:
   460                           	opt callstack 0
   461  00000D                     strlen@cp:
   462                           	opt callstack 0
   463  00000D                     ___wmul@multiplicand:
   464                           	opt callstack 0
   465  00000D                     ___lwdiv@divisor:
   466                           	opt callstack 0
   467  00000D                     ___lwmod@divisor:
   468                           	opt callstack 0
   469                           
   470                           ; 2 bytes @ 0xC
   471  00000D                     	ds	1
   472  00000E                     ___ftpack@exp:
   473                           	opt callstack 0
   474                           
   475                           ; 1 bytes @ 0xD
   476  00000E                     	ds	1
   477  00000F                     ___ftpack@sign:
   478                           	opt callstack 0
   479  00000F                     ___lwdiv@counter:
   480                           	opt callstack 0
   481  00000F                     ___lwmod@counter:
   482                           	opt callstack 0
   483  00000F                     ___wmul@product:
   484                           	opt callstack 0
   485                           
   486                           ; 2 bytes @ 0xE
   487  00000F                     	ds	1
   488  000010                     ??___ftpack:
   489  000010                     ___lwdiv@quotient:
   490                           	opt callstack 0
   491                           
   492                           ; 2 bytes @ 0xF
   493  000010                     	ds	1
   494  000011                     disp7s_mux_Q@q:
   495                           	opt callstack 0
   496                           
   497                           ; 1 bytes @ 0x10
   498  000011                     	ds	1
   499  000012                     disp7s_mux_Q@i:
   500                           	opt callstack 0
   501  000012                     utoa@buf:
   502                           	opt callstack 0
   503                           
   504                           ; 1 bytes @ 0x11
   505  000012                     	ds	1
   506  000013                     ??_disp7s_job:
   507  000013                     ?___lwtoft:
   508                           	opt callstack 0
   509  000013                     ___lwtoft@c:
   510                           	opt callstack 0
   511  000013                     utoa@val:
   512                           	opt callstack 0
   513                           
   514                           ; 2 bytes @ 0x12
   515  000013                     	ds	2
   516  000015                     disp7s_job@pq:
   517                           	opt callstack 0
   518  000015                     utoa@base:
   519                           	opt callstack 0
   520                           
   521                           ; 2 bytes @ 0x14
   522  000015                     	ds	1
   523  000016                     ___ftge@ff1:
   524                           	opt callstack 0
   525                           
   526                           ; 3 bytes @ 0x15
   527  000016                     	ds	1
   528  000017                     utoa@v:
   529                           	opt callstack 0
   530                           
   531                           ; 2 bytes @ 0x16
   532  000017                     	ds	2
   533  000019                     utoa@c:
   534                           	opt callstack 0
   535  000019                     ___ftge@ff2:
   536                           	opt callstack 0
   537                           
   538                           ; 3 bytes @ 0x18
   539  000019                     	ds	1
   540  00001A                     itoa@buf:
   541                           	opt callstack 0
   542                           
   543                           ; 1 bytes @ 0x19
   544  00001A                     	ds	1
   545  00001B                     itoa@val:
   546                           	opt callstack 0
   547                           
   548                           ; 2 bytes @ 0x1A
   549  00001B                     	ds	1
   550  00001C                     ??___ftge:
   551                           
   552                           ; 1 bytes @ 0x1B
   553  00001C                     	ds	1
   554  00001D                     itoa@base:
   555                           	opt callstack 0
   556                           
   557                           ; 2 bytes @ 0x1C
   558  00001D                     	ds	2
   559  00001F                     ??_ikey_parsing:
   560  00001F                     
   561                           ; 1 bytes @ 0x1E
   562  00001F                     	ds	1
   563  000020                     disp7s_write_i@pDisp:
   564                           	opt callstack 0
   565                           
   566                           ; 2 bytes @ 0x1F
   567  000020                     	ds	2
   568  000022                     disp7s_write_i@NUM_OF_DISP:
   569                           	opt callstack 0
   570                           
   571                           ; 1 bytes @ 0x21
   572  000022                     	ds	1
   573  000023                     ikey_parsing@k:
   574                           	opt callstack 0
   575  000023                     disp7s_write_i@num:
   576                           	opt callstack 0
   577                           
   578                           ; 2 bytes @ 0x22
   579  000023                     	ds	1
   580  000024                     
   581                           ; 1 bytes @ 0x23
   582  000024                     	ds	1
   583  000025                     ??_disp7s_write_i:
   584                           
   585                           ; 1 bytes @ 0x24
   586  000025                     	ds	5
   587  00002A                     disp7s_qtyDisp_writeInt@num:
   588                           	opt callstack 0
   589  00002A                     disp7s_modeDisp_writeInt@num:
   590                           	opt callstack 0
   591                           
   592                           ; 2 bytes @ 0x29
   593  00002A                     	ds	2
   594  00002C                     main@c_access_kb:
   595                           	opt callstack 0
   596                           
   597                           ; 1 bytes @ 0x2B
   598  00002C                     	ds	1
   599  00002D                     main@c_access_disp:
   600                           	opt callstack 0
   601                           
   602                           ; 1 bytes @ 0x2C
   603  00002D                     	ds	1
   604                           
   605 ;;
   606 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   607 ;;
   608 ;; *************** function _main *****************
   609 ;; Defined at:
   610 ;;		line 83 in file "main.c"
   611 ;; Parameters:    Size  Location     Type
   612 ;;		None
   613 ;; Auto vars:     Size  Location     Type
   614 ;;  c_access_dis    1   44[COMRAM] char 
   615 ;;  c_access_kb     1   43[COMRAM] char 
   616 ;; Return value:  Size  Location     Type
   617 ;;                  1    wreg      void 
   618 ;; Registers used:
   619 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   620 ;; Tracked objects:
   621 ;;		On entry : 0/0
   622 ;;		On exit  : 3F/0
   623 ;;		Unchanged: 0/0
   624 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   625 ;;      Params:         0       0       0       0       0       0       0       0       0
   626 ;;      Locals:         2       0       0       0       0       0       0       0       0
   627 ;;      Temps:          0       0       0       0       0       0       0       0       0
   628 ;;      Totals:         2       0       0       0       0       0       0       0       0
   629 ;;Total ram usage:        2 bytes
   630 ;; Hardware stack levels required when called:   10
   631 ;; This function calls:
   632 ;;		_disp7s_init
   633 ;;		_disp7s_job
   634 ;;		_disp7s_modeDisp_writeInt
   635 ;;		_disp7s_qtyDisp_writeInt
   636 ;;		_ikb_flush
   637 ;;		_ikb_init
   638 ;;		_ikb_job
   639 ;;		_mpap_sych
   640 ;;		_pulsonic_init
   641 ;;		_pump_job
   642 ;; This function is called by:
   643 ;;		Startup code after reset
   644 ;; This function uses a non-reentrant model
   645 ;;
   646                           
   647                           	psect	text0
   648  0010EE                     __ptext0:
   649                           	opt callstack 0
   650  0010EE                     _main:
   651                           	opt callstack 21
   652                           
   653                           ;main.c: 85: int8_t c_access_kb=0;
   654                           
   655                           ;incstack = 0
   656  0010EE  0E00               	movlw	0
   657  0010F0  6E2C               	movwf	main@c_access_kb,c
   658                           
   659                           ;main.c: 86: int8_t c_access_disp=0;
   660  0010F2  0E00               	movlw	0
   661  0010F4  6E2D               	movwf	main@c_access_disp,c
   662                           
   663                           ;main.c: 88: LATA = 0x00;
   664  0010F6  0E00               	movlw	0
   665  0010F8  6E89               	movwf	3977,c	;volatile
   666                           
   667                           ;main.c: 89: LATC = 0x00;
   668  0010FA  0E00               	movlw	0
   669  0010FC  6E8B               	movwf	3979,c	;volatile
   670                           
   671                           ;main.c: 90: LATD = 0x00;
   672  0010FE  0E00               	movlw	0
   673  001100  6E8C               	movwf	3980,c	;volatile
   674                           
   675                           ;main.c: 91: LATE = 0x00;
   676  001102  0E00               	movlw	0
   677  001104  6E8D               	movwf	3981,c	;volatile
   678                           
   679                           ;main.c: 92: LATB = 0x00;
   680  001106  0E00               	movlw	0
   681  001108  6E8A               	movwf	3978,c	;volatile
   682                           
   683                           ;main.c: 94: ADCON1 = 0x0F;
   684  00110A  0E0F               	movlw	15
   685  00110C  6EC1               	movwf	4033,c	;volatile
   686                           
   687                           ;main.c: 95: CMCON=0xCF;
   688  00110E  0ECF               	movlw	207
   689  001110  6EB4               	movwf	4020,c	;volatile
   690                           
   691                           ;main.c: 98: UCON = 0;
   692  001112  0E00               	movlw	0
   693  001114  6E6D               	movwf	3949,c	;volatile
   694                           
   695                           ;main.c: 99: UCFG = 1<<3;
   696  001116  0E08               	movlw	8
   697  001118  6E6F               	movwf	3951,c	;volatile
   698                           
   699                           ;main.c: 100: T0CON = 0B10000111;
   700  00111A  0E87               	movlw	135
   701  00111C  6ED5               	movwf	4053,c	;volatile
   702                           
   703                           ;main.c: 102: TMR0H = (uint8_t)((uint16_t)((1UL<<16) - ( 1.0E-3 *48000000UL / (256*4)) )
      +                           >> 8);
   704  00111E  68D7               	setf	4055,c	;volatile
   705                           
   706                           ;main.c: 103: TMR0L = (uint8_t)((uint16_t)((1UL<<16) - ( 1.0E-3 *48000000UL / (256*4)) )
      +                          );
   707  001120  0ED1               	movlw	209
   708  001122  6ED6               	movwf	4054,c	;volatile
   709                           
   710                           ;main.c: 104: TMR0IE = 1;
   711  001124  8AF2               	bsf	4082,5,c	;volatile
   712  001126  808D               	bsf	3981,0,c	;volatile
   713  001128  9096               	bcf	3990,0,c	;volatile
   714  00112A  9095               	bcf	3989,0,c	;volatile
   715  00112C  9295               	bcf	3989,1,c	;volatile
   716  00112E  9495               	bcf	3989,2,c	;volatile
   717  001130  9695               	bcf	3989,3,c	;volatile
   718  001132  928B               	bcf	3979,1,c	;volatile
   719  001134  9294               	bcf	3988,1,c	;volatile
   720  001136  8296               	bsf	3990,1,c	;volatile
   721  001138  8094               	bsf	3988,0,c	;volatile
   722  00113A  8496               	bsf	3990,2,c	;volatile
   723                           
   724                           ;main.c: 122: ikb_init();
   725  00113C  ECD5  F008         	call	_ikb_init	;wreg free
   726                           
   727                           ; BSR set to: 0
   728                           ;main.c: 123: disp7s_init();
   729  001140  EC41  F00B         	call	_disp7s_init	;wreg free
   730                           
   731                           ;main.c: 124: pulsonic_init();
   732  001144  ECB9  F00C         	call	_pulsonic_init	;wreg free
   733                           
   734                           ;main.c: 130: disp7s_modeDisp_writeInt(100);
   735  001148  0E00               	movlw	0
   736  00114A  6E2B               	movwf	disp7s_modeDisp_writeInt@num+1,c
   737  00114C  0E64               	movlw	100
   738  00114E  6E2A               	movwf	disp7s_modeDisp_writeInt@num,c
   739  001150  EC4E  F00D         	call	_disp7s_modeDisp_writeInt	;wreg free
   740                           
   741                           ; BSR set to: 0
   742                           ;main.c: 131: disp7s_qtyDisp_writeInt(1000);
   743  001154  0E03               	movlw	3
   744  001156  6E2B               	movwf	disp7s_qtyDisp_writeInt@num+1,c
   745  001158  0EE8               	movlw	232
   746  00115A  6E2A               	movwf	disp7s_qtyDisp_writeInt@num,c
   747  00115C  EC41  F00D         	call	_disp7s_qtyDisp_writeInt	;wreg free
   748                           
   749                           ; BSR set to: 0
   750                           ;main.c: 133: GIE = 1;
   751  001160  8EF2               	bsf	4082,7,c	;volatile
   752  001162                     l3305:
   753                           
   754                           ; BSR set to: 0
   755                           ;main.c: 135: {;main.c: 136: if (isr_flag.f1ms)
   756  001162  A04D               	btfss	_isr_flag,0,c	;volatile
   757  001164  D002               	goto	l108
   758                           
   759                           ; BSR set to: 0
   760                           ;main.c: 137: {;main.c: 138: isr_flag.f1ms = 0;
   761  001166  904D               	bcf	_isr_flag,0,c	;volatile
   762                           
   763                           ;main.c: 139: main_flag.f1ms = 1;
   764  001168  804C               	bsf	_main_flag,0,c	;volatile
   765  00116A                     l108:
   766                           
   767                           ; BSR set to: 0
   768                           ;main.c: 140: };main.c: 142: if (main_flag.f1ms)
   769  00116A  A04C               	btfss	_main_flag,0,c	;volatile
   770  00116C  D016               	goto	l3329
   771                           
   772                           ; BSR set to: 0
   773                           ;main.c: 143: {;main.c: 144: if (++c_access_kb == 20)
   774  00116E  2A2C               	incf	main@c_access_kb,f,c
   775  001170  0E14               	movlw	20
   776  001172  182C               	xorwf	main@c_access_kb,w,c
   777  001174  A4D8               	btfss	status,2,c
   778  001176  D008               	goto	l3323
   779                           
   780                           ; BSR set to: 0
   781                           ;main.c: 145: {;main.c: 146: c_access_kb = 0;
   782  001178  0E00               	movlw	0
   783  00117A  6E2C               	movwf	main@c_access_kb,c
   784                           
   785                           ; BSR set to: 0
   786                           ;main.c: 149: if (!lock.kb)
   787  00117C  B04B               	btfsc	_lock,0,c
   788  00117E  D004               	goto	l3323
   789                           
   790                           ; BSR set to: 0
   791                           ;main.c: 153: if (1)
   792  001180  EC5B  F00D         	call	_ikb_job	;wreg free
   793                           
   794                           ;main.c: 154: {;main.c: 155: disp_owner = DISPOWNER_VISUALIZER_MODE;
   795  001184  0E01               	movlw	1
   796  001186  6E49               	movwf	_disp_owner,c
   797  001188                     l3323:
   798                           
   799                           ;main.c: 165: };main.c: 166: };main.c: 167: };main.c: 170: if (++c_access_disp == 3)
   800  001188  2A2D               	incf	main@c_access_disp,f,c
   801  00118A  0E03               	movlw	3
   802  00118C  182D               	xorwf	main@c_access_disp,w,c
   803  00118E  A4D8               	btfss	status,2,c
   804  001190  D004               	goto	l3329
   805                           
   806                           ;main.c: 171: {;main.c: 172: c_access_disp = 0;
   807  001192  0E00               	movlw	0
   808  001194  6E2D               	movwf	main@c_access_disp,c
   809                           
   810                           ;main.c: 173: disp7s_job();
   811  001196  EC61  F00A         	call	_disp7s_job	;wreg free
   812  00119A                     l3329:
   813                           
   814                           ;main.c: 174: };main.c: 175: };main.c: 219: pump_job();
   815  00119A  EC0F  F00B         	call	_pump_job	;wreg free
   816                           
   817                           ;main.c: 220: mpap_sych();
   818  00119E  EC21  F00A         	call	_mpap_sych	;wreg free
   819                           
   820                           ;main.c: 223: main_flag.f1ms = 0;
   821  0011A2  904C               	bcf	_main_flag,0,c	;volatile
   822                           
   823                           ;main.c: 224: ikb_flush();
   824  0011A4  EC8E  F00D         	call	_ikb_flush	;wreg free
   825  0011A8  D7DC               	goto	l3305
   826  0011AA                     __end_of_main:
   827                           	opt callstack 0
   828                           
   829 ;; *************** function _pump_job *****************
   830 ;; Defined at:
   831 ;;		line 22 in file "pump.c"
   832 ;; Parameters:    Size  Location     Type
   833 ;;		None
   834 ;; Auto vars:     Size  Location     Type
   835 ;;  cod_ret         1    0        char 
   836 ;; Return value:  Size  Location     Type
   837 ;;                  1    wreg      char 
   838 ;; Registers used:
   839 ;;		wreg, status,2, status,0
   840 ;; Tracked objects:
   841 ;;		On entry : 0/0
   842 ;;		On exit  : 0/0
   843 ;;		Unchanged: 0/0
   844 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   845 ;;      Params:         0       0       0       0       0       0       0       0       0
   846 ;;      Locals:         1       0       0       0       0       0       0       0       0
   847 ;;      Temps:          0       0       0       0       0       0       0       0       0
   848 ;;      Totals:         1       0       0       0       0       0       0       0       0
   849 ;;Total ram usage:        1 bytes
   850 ;; Hardware stack levels used:    1
   851 ;; Hardware stack levels required when called:    5
   852 ;; This function calls:
   853 ;;		Nothing
   854 ;; This function is called by:
   855 ;;		_main
   856 ;; This function uses a non-reentrant model
   857 ;;
   858                           
   859                           	psect	text1
   860  00161E                     __ptext1:
   861                           	opt callstack 0
   862  00161E                     _pump_job:
   863                           	opt callstack 25
   864                           
   865                           ;pump.c: 25: static int8_t c;;pump.c: 27: if (pump.ticks > 0)
   866                           
   867                           ; BSR set to: 0
   868                           ;incstack = 0
   869  00161E  5036               	movf	_pump,w,c
   870  001620  1037               	iorwf	_pump+1,w,c
   871  001622  B4D8               	btfsc	status,2,c
   872  001624  0012               	return	
   873                           
   874                           ;pump.c: 28: {;pump.c: 29: if (pump.sm0 == 0)
   875  001626  5038               	movf	_pump+2,w,c
   876  001628  A4D8               	btfss	status,2,c
   877  00162A  D005               	goto	l2117
   878  00162C  908D               	bcf	3981,0,c	;volatile
   879                           
   880                           ;pump.c: 32: c = 0x0;
   881  00162E  0E00               	movlw	0
   882  001630  6E3E               	movwf	pump_job@c,c
   883                           
   884                           ;pump.c: 33: pump.sm0++;
   885  001632  2A38               	incf	_pump+2,f,c
   886                           
   887                           ;pump.c: 34: }
   888  001634  0012               	return	
   889  001636                     l2117:
   890                           
   891                           ;pump.c: 35: else if (pump.sm0 == 1)
   892  001636  0438               	decf	_pump+2,w,c
   893  001638  A4D8               	btfss	status,2,c
   894  00163A  D00C               	goto	l2129
   895                           
   896                           ;pump.c: 36: {;pump.c: 37: if (main_flag.f1ms)
   897  00163C  A04C               	btfss	_main_flag,0,c	;volatile
   898  00163E  0012               	return	
   899                           
   900                           ;pump.c: 38: {;pump.c: 39: if (++c == 50)
   901  001640  2A3E               	incf	pump_job@c,f,c
   902  001642  0E32               	movlw	50
   903  001644  183E               	xorwf	pump_job@c,w,c
   904  001646  A4D8               	btfss	status,2,c
   905  001648  0012               	return	
   906                           
   907                           ;pump.c: 40: {;pump.c: 41: c=0x00;
   908  00164A  0E00               	movlw	0
   909  00164C  6E3E               	movwf	pump_job@c,c
   910                           
   911                           ;pump.c: 42: pump.sm0++;
   912  00164E  2A38               	incf	_pump+2,f,c
   913  001650  808D               	bsf	3981,0,c	;volatile
   914                           
   915                           ;pump.c: 44: };pump.c: 45: };pump.c: 46: }
   916  001652  0012               	return	
   917  001654                     l2129:
   918                           
   919                           ;pump.c: 47: else if (pump.sm0 == 2)
   920  001654  0E02               	movlw	2
   921  001656  1838               	xorwf	_pump+2,w,c
   922  001658  A4D8               	btfss	status,2,c
   923  00165A  0012               	return	
   924                           
   925                           ;pump.c: 48: {;pump.c: 49: if (main_flag.f1ms)
   926  00165C  A04C               	btfss	_main_flag,0,c	;volatile
   927  00165E  0012               	return	
   928                           
   929                           ;pump.c: 50: {;pump.c: 51: if (++c == 50)
   930  001660  2A3E               	incf	pump_job@c,f,c
   931  001662  0E32               	movlw	50
   932  001664  183E               	xorwf	pump_job@c,w,c
   933  001666  A4D8               	btfss	status,2,c
   934  001668  0012               	return	
   935                           
   936                           ;pump.c: 52: {;pump.c: 53: c=0x00;
   937  00166A  0E00               	movlw	0
   938  00166C  6E3E               	movwf	pump_job@c,c
   939                           
   940                           ;pump.c: 54: pump.sm0 = 0x00;
   941  00166E  0E00               	movlw	0
   942  001670  6E38               	movwf	_pump+2,c
   943                           
   944                           ;pump.c: 56: if (--pump.ticks == 0)
   945  001672  0636               	decf	_pump,f,c
   946  001674  A0D8               	btfss	status,0,c
   947  001676  0637               	decf	_pump+1,f,c
   948  001678  5036               	movf	_pump,w,c
   949  00167A  1037               	iorwf	_pump+1,w,c
   950  00167C  B4D8               	btfsc	status,2,c
   951  00167E  0012               	return	
   952  001680  0012               	return	
   953  001682                     __end_of_pump_job:
   954                           	opt callstack 0
   955                           
   956 ;; *************** function _pulsonic_init *****************
   957 ;; Defined at:
   958 ;;		line 6 in file "pulsonic.c"
   959 ;; Parameters:    Size  Location     Type
   960 ;;		None
   961 ;; Auto vars:     Size  Location     Type
   962 ;;  i               1   10[COMRAM] char 
   963 ;; Return value:  Size  Location     Type
   964 ;;                  1    wreg      void 
   965 ;; Registers used:
   966 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
   967 ;; Tracked objects:
   968 ;;		On entry : 0/0
   969 ;;		On exit  : 0/0
   970 ;;		Unchanged: 0/0
   971 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   972 ;;      Params:         0       0       0       0       0       0       0       0       0
   973 ;;      Locals:         1       0       0       0       0       0       0       0       0
   974 ;;      Temps:          0       0       0       0       0       0       0       0       0
   975 ;;      Totals:         1       0       0       0       0       0       0       0       0
   976 ;;Total ram usage:        1 bytes
   977 ;; Hardware stack levels used:    1
   978 ;; Hardware stack levels required when called:    5
   979 ;; This function calls:
   980 ;;		Nothing
   981 ;; This function is called by:
   982 ;;		_main
   983 ;; This function uses a non-reentrant model
   984 ;;
   985                           
   986                           	psect	text2
   987  001972                     __ptext2:
   988                           	opt callstack 0
   989  001972                     _pulsonic_init:
   990                           	opt callstack 25
   991                           
   992                           ;pulsonic.c: 8: int8_t i;;pulsonic.c: 9: pulsonic.dist_total_time = 60;
   993                           
   994                           ;incstack = 0
   995  001972  0E00               	movlw	0
   996  001974  0101               	movlb	1	; () banked
   997  001976  6F03               	movwf	(_pulsonic+3)& (0+255),b
   998  001978  0E3C               	movlw	60
   999  00197A  6F02               	movwf	(_pulsonic+2)& (0+255),b
  1000                           
  1001                           ;pulsonic.c: 13: for (i=0; i< 8; i++)
  1002  00197C  0E00               	movlw	0
  1003  00197E  6E0B               	movwf	pulsonic_init@i,c
  1004  001980                     l2887:
  1005                           
  1006                           ;pulsonic.c: 14: {;pulsonic.c: 15: pulsonic.nozzle[i].Q_mlh = 12.0;
  1007  001980  500B               	movf	pulsonic_init@i,w,c
  1008  001982  0D06               	mullw	6
  1009  001984  0E06               	movlw	low (_pulsonic+6)
  1010  001986  24F3               	addwf	prodl,w,c
  1011  001988  6ED9               	movwf	fsr2l,c
  1012  00198A  0E01               	movlw	high (_pulsonic+6)
  1013  00198C  20F4               	addwfc	prodh,w,c
  1014  00198E  6EDA               	movwf	fsr2h,c
  1015  001990  0E00               	movlw	0
  1016  001992  6EDE               	movwf	postinc2,c
  1017  001994  0E40               	movlw	64
  1018  001996  6EDE               	movwf	postinc2,c
  1019  001998  0E41               	movlw	65
  1020  00199A  6EDE               	movwf	postinc2,c
  1021  00199C  2A0B               	incf	pulsonic_init@i,f,c
  1022  00199E  500B               	movf	pulsonic_init@i,w,c
  1023  0019A0  0A80               	xorlw	128
  1024  0019A2  0F78               	addlw	-136
  1025  0019A4  B0D8               	btfsc	status,0,c
  1026  0019A6  0012               	return	
  1027  0019A8  D7EB               	goto	l2887
  1028  0019AA                     __end_of_pulsonic_init:
  1029                           	opt callstack 0
  1030                           
  1031 ;; *************** function _mpap_sych *****************
  1032 ;; Defined at:
  1033 ;;		line 160 in file "mpap.c"
  1034 ;; Parameters:    Size  Location     Type
  1035 ;;		None
  1036 ;; Auto vars:     Size  Location     Type
  1037 ;;		None
  1038 ;; Return value:  Size  Location     Type
  1039 ;;                  1    wreg      void 
  1040 ;; Registers used:
  1041 ;;		wreg, status,2, status,0
  1042 ;; Tracked objects:
  1043 ;;		On entry : 0/0
  1044 ;;		On exit  : 0/0
  1045 ;;		Unchanged: 0/0
  1046 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1047 ;;      Params:         0       0       0       0       0       0       0       0       0
  1048 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1049 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1050 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1051 ;;Total ram usage:        0 bytes
  1052 ;; Hardware stack levels used:    1
  1053 ;; Hardware stack levels required when called:    5
  1054 ;; This function calls:
  1055 ;;		Nothing
  1056 ;; This function is called by:
  1057 ;;		_main
  1058 ;; This function uses a non-reentrant model
  1059 ;;
  1060                           
  1061                           	psect	text3
  1062  001442                     __ptext3:
  1063                           	opt callstack 0
  1064  001442                     _mpap_sych:
  1065                           	opt callstack 25
  1066                           
  1067                           ;mpap.c: 162: static int8_t sm0;;mpap.c: 163: static int8_t c;;mpap.c: 164: if (sm0 == 0
      +                          )
  1068                           
  1069                           ;incstack = 0
  1070  001442  5040               	movf	mpap_sych@sm0,w,c
  1071  001444  A4D8               	btfss	status,2,c
  1072  001446  D010               	goto	l2935
  1073                           
  1074                           ;mpap.c: 165: {;mpap.c: 166: if ((mpap.mode == MPAP_NORMAL_MODE) || (mpap.mode == MPAP_H
      +                          OMMING_MODE))
  1075  001448  0E03               	movlw	3
  1076  00144A  1835               	xorwf	_mpap+7,w,c	;volatile
  1077  00144C  B4D8               	btfsc	status,2,c
  1078  00144E  D004               	goto	u2520
  1079  001450  0E02               	movlw	2
  1080  001452  1835               	xorwf	_mpap+7,w,c	;volatile
  1081  001454  A4D8               	btfss	status,2,c
  1082  001456  D002               	goto	l2931
  1083  001458                     u2520:
  1084                           
  1085                           ;mpap.c: 167: {;mpap.c: 168: sm0++;
  1086  001458  2A40               	incf	mpap_sych@sm0,f,c
  1087                           
  1088                           ;mpap.c: 169: }
  1089  00145A  0012               	return	
  1090  00145C                     l2931:
  1091                           
  1092                           ;mpap.c: 170: else if (mpap.mode == MPAP_STALL_MODE)
  1093  00145C  0435               	decf	_mpap+7,w,c	;volatile
  1094  00145E  A4D8               	btfss	status,2,c
  1095  001460  0012               	return	
  1096                           
  1097                           ;mpap.c: 171: {;mpap.c: 172: sm0 = 2;
  1098  001462  0E02               	movlw	2
  1099  001464  6E40               	movwf	mpap_sych@sm0,c
  1100  001466  0012               	return	
  1101  001468                     l2935:
  1102                           
  1103                           ;mpap.c: 175: else if (sm0 == 1)
  1104  001468  0440               	decf	mpap_sych@sm0,w,c
  1105  00146A  A4D8               	btfss	status,2,c
  1106  00146C  D012               	goto	l2951
  1107                           
  1108                           ;mpap.c: 176: {;mpap.c: 177: if (mpap.numSteps_tomove == 0)
  1109  00146E  5032               	movf	_mpap+4,w,c	;volatile
  1110  001470  1033               	iorwf	_mpap+5,w,c	;volatile
  1111  001472  A4D8               	btfss	status,2,c
  1112  001474  0012               	return	
  1113                           
  1114                           ;mpap.c: 178: {;mpap.c: 179: if (mpap.mode == MPAP_HOMMING_MODE)
  1115  001476  0E02               	movlw	2
  1116  001478  1835               	xorwf	_mpap+7,w,c	;volatile
  1117  00147A  A4D8               	btfss	status,2,c
  1118  00147C  D005               	goto	l2945
  1119                           
  1120                           ;mpap.c: 180: {;mpap.c: 181: if ( pulsonic.errors.flag.mpap_home_sensor == 1)
  1121  00147E  0101               	movlb	1	; () banked
  1122  001480  A13A               	btfss	(_pulsonic+58)& (0+255),0,b
  1123  001482  D003               	goto	l2947
  1124                           
  1125                           ; BSR set to: 1
  1126                           ;mpap.c: 182: {;mpap.c: 183: pulsonic.errors.flag.mpap_home_sensor = 0;
  1127  001484  913A               	bcf	(_pulsonic+58)& (0+255),0,b
  1128  001486  D001               	goto	l2947
  1129  001488                     l2945:
  1130                           
  1131                           ;mpap.c: 187: else if (mpap.mode == MPAP_NORMAL_MODE)
  1132  001488  5035               	movf	_mpap+7,w,c	;volatile
  1133  00148A                     l2947:
  1134                           
  1135                           ;mpap.c: 189: };mpap.c: 190: sm0++;
  1136  00148A  2A40               	incf	mpap_sych@sm0,f,c
  1137                           
  1138                           ;mpap.c: 191: c = 0;
  1139  00148C  0E00               	movlw	0
  1140  00148E  6E3F               	movwf	mpap_sych@c,c
  1141  001490  0012               	return	
  1142  001492                     l2951:
  1143                           
  1144                           ;mpap.c: 194: else if (sm0 == 2)
  1145  001492  0E02               	movlw	2
  1146  001494  1840               	xorwf	mpap_sych@sm0,w,c
  1147  001496  A4D8               	btfss	status,2,c
  1148  001498  D00A               	goto	l2961
  1149                           
  1150                           ;mpap.c: 195: {;mpap.c: 196: if (main_flag.f1ms)
  1151  00149A  A04C               	btfss	_main_flag,0,c	;volatile
  1152  00149C  0012               	return	
  1153                           
  1154                           ;mpap.c: 197: {;mpap.c: 198: if (++c == 10)
  1155  00149E  2A3F               	incf	mpap_sych@c,f,c
  1156  0014A0  0E0A               	movlw	10
  1157  0014A2  183F               	xorwf	mpap_sych@c,w,c
  1158  0014A4  A4D8               	btfss	status,2,c
  1159  0014A6  0012               	return	
  1160                           
  1161                           ;mpap.c: 199: {;mpap.c: 201: mpap.mode = MPAP_STALL_MODE;
  1162  0014A8  0E01               	movlw	1
  1163  0014AA  6E35               	movwf	_mpap+7,c	;volatile
  1164  0014AC  D7D5               	goto	u2520
  1165  0014AE                     l2961:
  1166                           
  1167                           ;mpap.c: 206: else if (sm0 == 3)
  1168  0014AE  0E03               	movlw	3
  1169  0014B0  1840               	xorwf	mpap_sych@sm0,w,c
  1170  0014B2  A4D8               	btfss	status,2,c
  1171  0014B4  0012               	return	
  1172                           
  1173                           ;mpap.c: 207: {;mpap.c: 208: if (mpap.mode == MPAP_IDLE_MODE)
  1174  0014B6  5035               	movf	_mpap+7,w,c	;volatile
  1175  0014B8  A4D8               	btfss	status,2,c
  1176  0014BA  0012               	return	
  1177                           
  1178                           ;mpap.c: 209: {;mpap.c: 211: sm0 = 0;
  1179  0014BC  0E00               	movlw	0
  1180  0014BE  6E40               	movwf	mpap_sych@sm0,c
  1181  0014C0  0012               	return		;funcret
  1182  0014C2                     __end_of_mpap_sych:
  1183                           	opt callstack 0
  1184                           
  1185 ;; *************** function _ikb_job *****************
  1186 ;; Defined at:
  1187 ;;		line 414 in file "../../../../../../FIRWAR/eslibrary/ikb/ikb.c"
  1188 ;; Parameters:    Size  Location     Type
  1189 ;;		None
  1190 ;; Auto vars:     Size  Location     Type
  1191 ;;		None
  1192 ;; Return value:  Size  Location     Type
  1193 ;;                  1    wreg      void 
  1194 ;; Registers used:
  1195 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
  1196 ;; Tracked objects:
  1197 ;;		On entry : 0/0
  1198 ;;		On exit  : 0/0
  1199 ;;		Unchanged: 0/0
  1200 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1201 ;;      Params:         0       0       0       0       0       0       0       0       0
  1202 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1203 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1204 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1205 ;;Total ram usage:        0 bytes
  1206 ;; Hardware stack levels used:    1
  1207 ;; Hardware stack levels required when called:    8
  1208 ;; This function calls:
  1209 ;;		_ikey_parsing
  1210 ;;		_ikey_scan
  1211 ;; This function is called by:
  1212 ;;		_main
  1213 ;; This function uses a non-reentrant model
  1214 ;;
  1215                           
  1216                           	psect	text4
  1217  001AB6                     __ptext4:
  1218                           	opt callstack 0
  1219  001AB6                     _ikb_job:
  1220                           	opt callstack 22
  1221                           
  1222                           ;ikb.c: 416: ikey_scan();
  1223                           
  1224                           ;incstack = 0
  1225  001AB6  EC1F  F007         	call	_ikey_scan	;wreg free
  1226                           
  1227                           ;ikb.c: 417: ikey_parsing();
  1228  001ABA  EC07  F004         	call	_ikey_parsing	;wreg free
  1229  001ABE  0012               	return		;funcret
  1230  001AC0                     __end_of_ikb_job:
  1231                           	opt callstack 0
  1232                           
  1233 ;; *************** function _ikey_scan *****************
  1234 ;; Defined at:
  1235 ;;		line 449 in file "../../../../../../FIRWAR/eslibrary/ikb/ikb.c"
  1236 ;; Parameters:    Size  Location     Type
  1237 ;;		None
  1238 ;; Auto vars:     Size  Location     Type
  1239 ;;  k               1   11[COMRAM] char 
  1240 ;; Return value:  Size  Location     Type
  1241 ;;                  1    wreg      void 
  1242 ;; Registers used:
  1243 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
  1244 ;; Tracked objects:
  1245 ;;		On entry : 0/0
  1246 ;;		On exit  : 0/0
  1247 ;;		Unchanged: 0/0
  1248 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1249 ;;      Params:         0       0       0       0       0       0       0       0       0
  1250 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1251 ;;      Temps:          1       0       0       0       0       0       0       0       0
  1252 ;;      Totals:         2       0       0       0       0       0       0       0       0
  1253 ;;Total ram usage:        2 bytes
  1254 ;; Hardware stack levels used:    1
  1255 ;; Hardware stack levels required when called:    6
  1256 ;; This function calls:
  1257 ;;		_keyRead_pin_key1
  1258 ;;		_keyRead_pin_key2
  1259 ;;		_keyRead_pin_key3
  1260 ;;		_keyRead_pin_key4
  1261 ;;		_keyRead_pin_key5
  1262 ;; This function is called by:
  1263 ;;		_ikb_job
  1264 ;; This function uses a non-reentrant model
  1265 ;;
  1266                           
  1267                           	psect	text5
  1268  000E3E                     __ptext5:
  1269                           	opt callstack 0
  1270  000E3E                     _ikey_scan:
  1271                           	opt callstack 23
  1272                           
  1273                           ;ikb.c: 451: int8_t k = 5-1;
  1274                           
  1275                           ;incstack = 0
  1276  000E3E  0E04               	movlw	4
  1277  000E40  6E0C               	movwf	ikey_scan@k,c
  1278  000E42                     l2523:
  1279                           
  1280                           ;ikb.c: 453: {;ikb.c: 454: if (key[k].sm0 == 0)
  1281  000E42  500C               	movf	ikey_scan@k,w,c
  1282  000E44  0D10               	mullw	16
  1283  000E46  50F3               	movf	prodl,w,c
  1284  000E48  0F64               	addlw	low (_key+4)
  1285  000E4A  6ED9               	movwf	fsr2l,c
  1286  000E4C  6ADA               	clrf	fsr2h,c
  1287  000E4E  50DF               	movf	indf2,w,c
  1288  000E50  A4D8               	btfss	status,2,c
  1289  000E52  D016               	goto	l2529
  1290                           
  1291                           ;ikb.c: 455: {;ikb.c: 456: if (key[k].keyRead() == 0)
  1292  000E54  500C               	movf	ikey_scan@k,w,c
  1293  000E56  0D10               	mullw	16
  1294  000E58  50F3               	movf	prodl,w,c
  1295  000E5A  0F60               	addlw	low _key
  1296  000E5C  6ED9               	movwf	fsr2l,c
  1297  000E5E  6ADA               	clrf	fsr2h,c
  1298  000E60  D801               	call	u1668
  1299  000E62  D00A               	goto	u1669
  1300  000E64                     u1668:
  1301  000E64  0005               	push	
  1302  000E66  6EFA               	movwf	pclath,c
  1303  000E68  50DE               	movf	postinc2,w,c
  1304  000E6A  6EFD               	movwf	tosl,c
  1305  000E6C  50DE               	movf	postinc2,w,c
  1306  000E6E  6EFE               	movwf	tosh,c
  1307  000E70  50F8               	movf	tblptru,w,c
  1308  000E72  6EFF               	movwf	tosu,c
  1309  000E74  50FA               	movf	pclath,w,c
  1310  000E76  0012               	return		;indir
  1311  000E78                     u1669:
  1312  000E78  0900               	iorlw	0
  1313  000E7A  A4D8               	btfss	status,2,c
  1314  000E7C  D0AC               	goto	l2559
  1315  000E7E  D041               	goto	L1
  1316  000E80                     l2529:
  1317                           
  1318                           ;ikb.c: 461: else if (key[k].sm0 == 1)
  1319  000E80  500C               	movf	ikey_scan@k,w,c
  1320  000E82  0D10               	mullw	16
  1321  000E84  50F3               	movf	prodl,w,c
  1322  000E86  0F64               	addlw	low (_key+4)
  1323  000E88  6ED9               	movwf	fsr2l,c
  1324  000E8A  6ADA               	clrf	fsr2h,c
  1325  000E8C  04DE               	decf	postinc2,w,c
  1326  000E8E  A4D8               	btfss	status,2,c
  1327  000E90  D040               	goto	l2541
  1328                           
  1329                           ;ikb.c: 462: {;ikb.c: 463: if (++key[k].counter0 == 4)
  1330  000E92  500C               	movf	ikey_scan@k,w,c
  1331  000E94  0D10               	mullw	16
  1332  000E96  50F3               	movf	prodl,w,c
  1333  000E98  0F65               	addlw	low (_key+5)
  1334  000E9A  6ED9               	movwf	fsr2l,c
  1335  000E9C  6ADA               	clrf	fsr2h,c
  1336  000E9E  2ADF               	incf	indf2,f,c
  1337  000EA0  0E04               	movlw	4
  1338  000EA2  18DE               	xorwf	postinc2,w,c
  1339  000EA4  A4D8               	btfss	status,2,c
  1340  000EA6  D097               	goto	l2559
  1341                           
  1342                           ;ikb.c: 464: {;ikb.c: 465: key[k].counter0 = 0x00;
  1343  000EA8  500C               	movf	ikey_scan@k,w,c
  1344  000EAA  0D10               	mullw	16
  1345  000EAC  50F3               	movf	prodl,w,c
  1346  000EAE  0F65               	addlw	low (_key+5)
  1347  000EB0  6ED9               	movwf	fsr2l,c
  1348  000EB2  6ADA               	clrf	fsr2h,c
  1349  000EB4  0E00               	movlw	0
  1350  000EB6  6EDF               	movwf	indf2,c
  1351                           
  1352                           ;ikb.c: 467: if (key[k].keyRead() != 0)
  1353  000EB8  500C               	movf	ikey_scan@k,w,c
  1354  000EBA  0D10               	mullw	16
  1355  000EBC  50F3               	movf	prodl,w,c
  1356  000EBE  0F60               	addlw	low _key
  1357  000EC0  6ED9               	movwf	fsr2l,c
  1358  000EC2  6ADA               	clrf	fsr2h,c
  1359  000EC4  D801               	call	u1708
  1360  000EC6  D00A               	goto	u1709
  1361  000EC8                     u1708:
  1362  000EC8  0005               	push	
  1363  000ECA  6EFA               	movwf	pclath,c
  1364  000ECC  50DE               	movf	postinc2,w,c
  1365  000ECE  6EFD               	movwf	tosl,c
  1366  000ED0  50DE               	movf	postinc2,w,c
  1367  000ED2  6EFE               	movwf	tosh,c
  1368  000ED4  50F8               	movf	tblptru,w,c
  1369  000ED6  6EFF               	movwf	tosu,c
  1370  000ED8  50FA               	movf	pclath,w,c
  1371  000EDA  0012               	return		;indir
  1372  000EDC                     u1709:
  1373  000EDC  0900               	iorlw	0
  1374  000EDE  B4D8               	btfsc	status,2,c
  1375  000EE0  D008               	goto	l2539
  1376  000EE2                     u1710:
  1377                           
  1378                           ;ikb.c: 468: {;ikb.c: 469: key[k].sm0--;
  1379  000EE2  500C               	movf	ikey_scan@k,w,c
  1380  000EE4  0D10               	mullw	16
  1381  000EE6  50F3               	movf	prodl,w,c
  1382  000EE8  0F64               	addlw	low (_key+4)
  1383  000EEA  6ED9               	movwf	fsr2l,c
  1384  000EEC  6ADA               	clrf	fsr2h,c
  1385  000EEE  06DF               	decf	indf2,f,c
  1386                           
  1387                           ;ikb.c: 470: }
  1388  000EF0  D072               	goto	l2559
  1389  000EF2                     l2539:
  1390                           
  1391                           ;ikb.c: 471: else;ikb.c: 472: {;ikb.c: 473: key[k].bf.state = 1;
  1392  000EF2  500C               	movf	ikey_scan@k,w,c
  1393  000EF4  0D10               	mullw	16
  1394  000EF6  50F3               	movf	prodl,w,c
  1395  000EF8  0F6A               	addlw	low (_key+10)
  1396  000EFA  6ED9               	movwf	fsr2l,c
  1397  000EFC  6ADA               	clrf	fsr2h,c
  1398  000EFE  0100               	movlb	0	; () banked
  1399  000F00  80DF               	bsf	indf2,0,c
  1400  000F02                     L1:
  1401                           
  1402                           ;ikb.c: 474: key[k].sm0++;
  1403  000F02  500C               	movf	ikey_scan@k,w,c
  1404  000F04  0D10               	mullw	16
  1405  000F06  50F3               	movf	prodl,w,c
  1406  000F08  0F64               	addlw	low (_key+4)
  1407  000F0A  6ED9               	movwf	fsr2l,c
  1408  000F0C  6ADA               	clrf	fsr2h,c
  1409  000F0E  2ADF               	incf	indf2,f,c
  1410  000F10  D062               	goto	l2559
  1411  000F12                     l2541:
  1412                           
  1413                           ;ikb.c: 478: else if (key[k].sm0 == 2)
  1414  000F12  500C               	movf	ikey_scan@k,w,c
  1415  000F14  0D10               	mullw	16
  1416  000F16  50F3               	movf	prodl,w,c
  1417  000F18  0F64               	addlw	low (_key+4)
  1418  000F1A  6ED9               	movwf	fsr2l,c
  1419  000F1C  6ADA               	clrf	fsr2h,c
  1420  000F1E  0E02               	movlw	2
  1421  000F20  18DE               	xorwf	postinc2,w,c
  1422  000F22  A4D8               	btfss	status,2,c
  1423  000F24  D016               	goto	l2547
  1424                           
  1425                           ;ikb.c: 479: {;ikb.c: 480: if (key[k].keyRead() == 1)
  1426  000F26  500C               	movf	ikey_scan@k,w,c
  1427  000F28  0D10               	mullw	16
  1428  000F2A  50F3               	movf	prodl,w,c
  1429  000F2C  0F60               	addlw	low _key
  1430  000F2E  6ED9               	movwf	fsr2l,c
  1431  000F30  6ADA               	clrf	fsr2h,c
  1432  000F32  D801               	call	u1738
  1433  000F34  D00A               	goto	u1739
  1434  000F36                     u1738:
  1435  000F36  0005               	push	
  1436  000F38  6EFA               	movwf	pclath,c
  1437  000F3A  50DE               	movf	postinc2,w,c
  1438  000F3C  6EFD               	movwf	tosl,c
  1439  000F3E  50DE               	movf	postinc2,w,c
  1440  000F40  6EFE               	movwf	tosh,c
  1441  000F42  50F8               	movf	tblptru,w,c
  1442  000F44  6EFF               	movwf	tosu,c
  1443  000F46  50FA               	movf	pclath,w,c
  1444  000F48  0012               	return		;indir
  1445  000F4A                     u1739:
  1446  000F4A  06E8               	decf	wreg,f,c
  1447  000F4C  B4D8               	btfsc	status,2,c
  1448  000F4E  D7D9               	goto	L1
  1449  000F50  D042               	goto	l2559
  1450  000F52                     l2547:
  1451                           
  1452                           ;ikb.c: 483: else if (key[k].sm0 == 3)
  1453  000F52  500C               	movf	ikey_scan@k,w,c
  1454  000F54  0D10               	mullw	16
  1455  000F56  50F3               	movf	prodl,w,c
  1456  000F58  0F64               	addlw	low (_key+4)
  1457  000F5A  6ED9               	movwf	fsr2l,c
  1458  000F5C  6ADA               	clrf	fsr2h,c
  1459  000F5E  0E03               	movlw	3
  1460  000F60  18DE               	xorwf	postinc2,w,c
  1461  000F62  A4D8               	btfss	status,2,c
  1462  000F64  D038               	goto	l2559
  1463                           
  1464                           ;ikb.c: 484: {;ikb.c: 485: if (++key[k].counter0 == 4)
  1465  000F66  500C               	movf	ikey_scan@k,w,c
  1466  000F68  0D10               	mullw	16
  1467  000F6A  50F3               	movf	prodl,w,c
  1468  000F6C  0F65               	addlw	low (_key+5)
  1469  000F6E  6ED9               	movwf	fsr2l,c
  1470  000F70  6ADA               	clrf	fsr2h,c
  1471  000F72  2ADF               	incf	indf2,f,c
  1472  000F74  0E04               	movlw	4
  1473  000F76  18DE               	xorwf	postinc2,w,c
  1474  000F78  A4D8               	btfss	status,2,c
  1475  000F7A  D02D               	goto	l2559
  1476                           
  1477                           ;ikb.c: 486: {;ikb.c: 487: key[k].counter0 = 0x00;
  1478  000F7C  500C               	movf	ikey_scan@k,w,c
  1479  000F7E  0D10               	mullw	16
  1480  000F80  50F3               	movf	prodl,w,c
  1481  000F82  0F65               	addlw	low (_key+5)
  1482  000F84  6ED9               	movwf	fsr2l,c
  1483  000F86  6ADA               	clrf	fsr2h,c
  1484  000F88  0E00               	movlw	0
  1485  000F8A  6EDF               	movwf	indf2,c
  1486                           
  1487                           ;ikb.c: 489: if (key[k].keyRead() != 1)
  1488  000F8C  500C               	movf	ikey_scan@k,w,c
  1489  000F8E  0D10               	mullw	16
  1490  000F90  50F3               	movf	prodl,w,c
  1491  000F92  0F60               	addlw	low _key
  1492  000F94  6ED9               	movwf	fsr2l,c
  1493  000F96  6ADA               	clrf	fsr2h,c
  1494  000F98  D801               	call	u1778
  1495  000F9A  D00A               	goto	u1779
  1496  000F9C                     u1778:
  1497  000F9C  0005               	push	
  1498  000F9E  6EFA               	movwf	pclath,c
  1499  000FA0  50DE               	movf	postinc2,w,c
  1500  000FA2  6EFD               	movwf	tosl,c
  1501  000FA4  50DE               	movf	postinc2,w,c
  1502  000FA6  6EFE               	movwf	tosh,c
  1503  000FA8  50F8               	movf	tblptru,w,c
  1504  000FAA  6EFF               	movwf	tosu,c
  1505  000FAC  50FA               	movf	pclath,w,c
  1506  000FAE  0012               	return		;indir
  1507  000FB0                     u1779:
  1508  000FB0  06E8               	decf	wreg,f,c
  1509  000FB2  A4D8               	btfss	status,2,c
  1510  000FB4  D796               	goto	u1710
  1511                           
  1512                           ;ikb.c: 493: else;ikb.c: 494: {;ikb.c: 495: key[k].bf.state = 0;
  1513  000FB6  500C               	movf	ikey_scan@k,w,c
  1514  000FB8  0D10               	mullw	16
  1515  000FBA  50F3               	movf	prodl,w,c
  1516  000FBC  0F6A               	addlw	low (_key+10)
  1517  000FBE  6ED9               	movwf	fsr2l,c
  1518  000FC0  6ADA               	clrf	fsr2h,c
  1519  000FC2  0100               	movlb	0	; () banked
  1520  000FC4  90DF               	bcf	indf2,0,c
  1521                           
  1522                           ;ikb.c: 496: key[k].sm0 = 0x00;
  1523  000FC6  500C               	movf	ikey_scan@k,w,c
  1524  000FC8  0D10               	mullw	16
  1525  000FCA  50F3               	movf	prodl,w,c
  1526  000FCC  0F64               	addlw	low (_key+4)
  1527  000FCE  6ED9               	movwf	fsr2l,c
  1528  000FD0  6ADA               	clrf	fsr2h,c
  1529  000FD2  0E00               	movlw	0
  1530  000FD4  6EDF               	movwf	indf2,c
  1531  000FD6                     l2559:
  1532                           
  1533                           ;ikb.c: 497: };ikb.c: 498: };ikb.c: 499: };ikb.c: 500: }while (--k >= 0);
  1534  000FD6  060C               	decf	ikey_scan@k,f,c
  1535  000FD8  BE0C               	btfsc	ikey_scan@k,7,c
  1536  000FDA  0012               	return	
  1537  000FDC  D732               	goto	l2523
  1538  000FDE                     __end_of_ikey_scan:
  1539                           	opt callstack 0
  1540                           
  1541 ;; *************** function _keyRead_pin_key4 *****************
  1542 ;; Defined at:
  1543 ;;		line 206 in file "../../../../../../FIRWAR/eslibrary/ikb/ikb.c"
  1544 ;; Parameters:    Size  Location     Type
  1545 ;;		None
  1546 ;; Auto vars:     Size  Location     Type
  1547 ;;		None
  1548 ;; Return value:  Size  Location     Type
  1549 ;;                  1    wreg      unsigned char 
  1550 ;; Registers used:
  1551 ;;		wreg, status,2, status,0
  1552 ;; Tracked objects:
  1553 ;;		On entry : 0/0
  1554 ;;		On exit  : 0/0
  1555 ;;		Unchanged: 0/0
  1556 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1557 ;;      Params:         0       0       0       0       0       0       0       0       0
  1558 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1559 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1560 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1561 ;;Total ram usage:        0 bytes
  1562 ;; Hardware stack levels used:    1
  1563 ;; Hardware stack levels required when called:    5
  1564 ;; This function calls:
  1565 ;;		Nothing
  1566 ;; This function is called by:
  1567 ;;		_ikb_init
  1568 ;;		_ikey_scan
  1569 ;; This function uses a non-reentrant model
  1570 ;;
  1571                           
  1572                           	psect	text6
  1573  001B16                     __ptext6:
  1574                           	opt callstack 0
  1575  001B16                     _keyRead_pin_key4:
  1576                           	opt callstack 23
  1577                           
  1578                           ;ikb.c: 208: return ((PORTC & (1<<7))>>7);
  1579                           
  1580                           ;incstack = 0
  1581  001B16  4482               	rlncf	3970,w,c	;volatile
  1582  001B18  0B01               	andlw	1
  1583  001B1A  0012               	return		;funcret
  1584  001B1C                     __end_of_keyRead_pin_key4:
  1585                           	opt callstack 0
  1586                           
  1587 ;; *************** function _keyRead_pin_key3 *****************
  1588 ;; Defined at:
  1589 ;;		line 202 in file "../../../../../../FIRWAR/eslibrary/ikb/ikb.c"
  1590 ;; Parameters:    Size  Location     Type
  1591 ;;		None
  1592 ;; Auto vars:     Size  Location     Type
  1593 ;;		None
  1594 ;; Return value:  Size  Location     Type
  1595 ;;                  1    wreg      unsigned char 
  1596 ;; Registers used:
  1597 ;;		wreg, status,2, status,0
  1598 ;; Tracked objects:
  1599 ;;		On entry : 0/0
  1600 ;;		On exit  : 0/0
  1601 ;;		Unchanged: 0/0
  1602 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1603 ;;      Params:         0       0       0       0       0       0       0       0       0
  1604 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1605 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1606 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1607 ;;Total ram usage:        0 bytes
  1608 ;; Hardware stack levels used:    1
  1609 ;; Hardware stack levels required when called:    5
  1610 ;; This function calls:
  1611 ;;		Nothing
  1612 ;; This function is called by:
  1613 ;;		_ikb_init
  1614 ;;		_ikey_scan
  1615 ;; This function uses a non-reentrant model
  1616 ;;
  1617                           
  1618                           	psect	text7
  1619  001AC0                     __ptext7:
  1620                           	opt callstack 0
  1621  001AC0                     _keyRead_pin_key3:
  1622                           	opt callstack 23
  1623                           
  1624                           ;ikb.c: 204: return ((PORTC & (1<<6))>>6);
  1625                           
  1626                           ;incstack = 0
  1627  001AC0  4482               	rlncf	3970,w,c	;volatile
  1628  001AC2  46E8               	rlncf	wreg,f,c
  1629  001AC4  0B03               	andlw	3
  1630  001AC6  0B01               	andlw	1
  1631  001AC8  0012               	return		;funcret
  1632  001ACA                     __end_of_keyRead_pin_key3:
  1633                           	opt callstack 0
  1634                           
  1635 ;; *************** function _keyRead_pin_key2 *****************
  1636 ;; Defined at:
  1637 ;;		line 198 in file "../../../../../../FIRWAR/eslibrary/ikb/ikb.c"
  1638 ;; Parameters:    Size  Location     Type
  1639 ;;		None
  1640 ;; Auto vars:     Size  Location     Type
  1641 ;;		None
  1642 ;; Return value:  Size  Location     Type
  1643 ;;                  1    wreg      unsigned char 
  1644 ;; Registers used:
  1645 ;;		wreg, status,2, status,0
  1646 ;; Tracked objects:
  1647 ;;		On entry : 0/0
  1648 ;;		On exit  : 0/0
  1649 ;;		Unchanged: 0/0
  1650 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1651 ;;      Params:         0       0       0       0       0       0       0       0       0
  1652 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1653 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1654 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1655 ;;Total ram usage:        0 bytes
  1656 ;; Hardware stack levels used:    1
  1657 ;; Hardware stack levels required when called:    5
  1658 ;; This function calls:
  1659 ;;		Nothing
  1660 ;; This function is called by:
  1661 ;;		_ikb_init
  1662 ;;		_ikey_scan
  1663 ;; This function uses a non-reentrant model
  1664 ;;
  1665                           
  1666                           	psect	text8
  1667  001ACA                     __ptext8:
  1668                           	opt callstack 0
  1669  001ACA                     _keyRead_pin_key2:
  1670                           	opt callstack 23
  1671                           
  1672                           ;ikb.c: 200: return ((PORTC & (1<<5))>>5);
  1673                           
  1674                           ;incstack = 0
  1675  001ACA  3882               	swapf	3970,w,c	;volatile
  1676  001ACC  42E8               	rrncf	wreg,f,c
  1677  001ACE  0B07               	andlw	7
  1678  001AD0  0B01               	andlw	1
  1679  001AD2  0012               	return		;funcret
  1680  001AD4                     __end_of_keyRead_pin_key2:
  1681                           	opt callstack 0
  1682                           
  1683 ;; *************** function _keyRead_pin_key1 *****************
  1684 ;; Defined at:
  1685 ;;		line 194 in file "../../../../../../FIRWAR/eslibrary/ikb/ikb.c"
  1686 ;; Parameters:    Size  Location     Type
  1687 ;;		None
  1688 ;; Auto vars:     Size  Location     Type
  1689 ;;		None
  1690 ;; Return value:  Size  Location     Type
  1691 ;;                  1    wreg      unsigned char 
  1692 ;; Registers used:
  1693 ;;		wreg, status,2, status,0
  1694 ;; Tracked objects:
  1695 ;;		On entry : 0/0
  1696 ;;		On exit  : 0/0
  1697 ;;		Unchanged: 0/0
  1698 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1699 ;;      Params:         0       0       0       0       0       0       0       0       0
  1700 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1701 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1702 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1703 ;;Total ram usage:        0 bytes
  1704 ;; Hardware stack levels used:    1
  1705 ;; Hardware stack levels required when called:    5
  1706 ;; This function calls:
  1707 ;;		Nothing
  1708 ;; This function is called by:
  1709 ;;		_ikb_init
  1710 ;;		_ikey_scan
  1711 ;; This function uses a non-reentrant model
  1712 ;;
  1713                           
  1714                           	psect	text9
  1715  001B06                     __ptext9:
  1716                           	opt callstack 0
  1717  001B06                     _keyRead_pin_key1:
  1718                           	opt callstack 23
  1719                           
  1720                           ;ikb.c: 196: return ((PORTC & (1<<4))>>4);
  1721                           
  1722                           ;incstack = 0
  1723  001B06  3882               	swapf	3970,w,c	;volatile
  1724  001B08  0B0F               	andlw	15
  1725  001B0A  0B01               	andlw	1
  1726  001B0C  0012               	return		;funcret
  1727  001B0E                     __end_of_keyRead_pin_key1:
  1728                           	opt callstack 0
  1729                           
  1730 ;; *************** function _keyRead_pin_key5 *****************
  1731 ;; Defined at:
  1732 ;;		line 210 in file "../../../../../../FIRWAR/eslibrary/ikb/ikb.c"
  1733 ;; Parameters:    Size  Location     Type
  1734 ;;		None
  1735 ;; Auto vars:     Size  Location     Type
  1736 ;;		None
  1737 ;; Return value:  Size  Location     Type
  1738 ;;                  1    wreg      unsigned char 
  1739 ;; Registers used:
  1740 ;;		wreg, status,2, status,0
  1741 ;; Tracked objects:
  1742 ;;		On entry : 0/0
  1743 ;;		On exit  : 0/0
  1744 ;;		Unchanged: 0/0
  1745 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1746 ;;      Params:         0       0       0       0       0       0       0       0       0
  1747 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1748 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1749 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1750 ;;Total ram usage:        0 bytes
  1751 ;; Hardware stack levels used:    1
  1752 ;; Hardware stack levels required when called:    5
  1753 ;; This function calls:
  1754 ;;		Nothing
  1755 ;; This function is called by:
  1756 ;;		_ikb_init
  1757 ;;		_ikey_scan
  1758 ;; This function uses a non-reentrant model
  1759 ;;
  1760                           
  1761                           	psect	text10
  1762  001B0E                     __ptext10:
  1763                           	opt callstack 0
  1764  001B0E                     _keyRead_pin_key5:
  1765                           	opt callstack 23
  1766                           
  1767                           ;ikb.c: 212: return ((PORTD & (1<<4))>>4);
  1768                           
  1769                           ;incstack = 0
  1770  001B0E  3883               	swapf	3971,w,c	;volatile
  1771  001B10  0B0F               	andlw	15
  1772  001B12  0B01               	andlw	1
  1773  001B14  0012               	return		;funcret
  1774  001B16                     __end_of_keyRead_pin_key5:
  1775                           	opt callstack 0
  1776                           
  1777 ;; *************** function _ikey_parsing *****************
  1778 ;; Defined at:
  1779 ;;		line 545 in file "../../../../../../FIRWAR/eslibrary/ikb/ikb.c"
  1780 ;; Parameters:    Size  Location     Type
  1781 ;;		None
  1782 ;; Auto vars:     Size  Location     Type
  1783 ;;  k               1   34[COMRAM] unsigned char 
  1784 ;; Return value:  Size  Location     Type
  1785 ;;                  1    wreg      void 
  1786 ;; Registers used:
  1787 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1788 ;; Tracked objects:
  1789 ;;		On entry : 0/0
  1790 ;;		On exit  : 0/0
  1791 ;;		Unchanged: 0/0
  1792 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1793 ;;      Params:         0       0       0       0       0       0       0       0       0
  1794 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1795 ;;      Temps:          4       0       0       0       0       0       0       0       0
  1796 ;;      Totals:         5       0       0       0       0       0       0       0       0
  1797 ;;Total ram usage:        5 bytes
  1798 ;; Hardware stack levels used:    1
  1799 ;; Hardware stack levels required when called:    7
  1800 ;; This function calls:
  1801 ;;		___ftge
  1802 ;;		___lwtoft
  1803 ;;		_ikey_is_accessible
  1804 ;; This function is called by:
  1805 ;;		_ikb_job
  1806 ;; This function uses a non-reentrant model
  1807 ;;
  1808                           
  1809                           	psect	text11
  1810  00080E                     __ptext11:
  1811                           	opt callstack 0
  1812  00080E                     _ikey_parsing:
  1813                           	opt callstack 22
  1814                           
  1815                           ;ikb.c: 547: uint8_t k;;ikb.c: 549: for (k=0; k < 5; k++)
  1816                           
  1817                           ;incstack = 0
  1818  00080E  0E00               	movlw	0
  1819  000810  6E23               	movwf	ikey_parsing@k,c
  1820  000812                     l2567:
  1821                           
  1822                           ;ikb.c: 550: {;ikb.c: 551: if ( key[k].sm1 == (0) )
  1823  000812  5023               	movf	ikey_parsing@k,w,c
  1824  000814  0D10               	mullw	16
  1825  000816  50F3               	movf	prodl,w,c
  1826  000818  0F66               	addlw	low (_key+6)
  1827  00081A  6ED9               	movwf	fsr2l,c
  1828  00081C  6ADA               	clrf	fsr2h,c
  1829  00081E  50DF               	movf	indf2,w,c
  1830  000820  A4D8               	btfss	status,2,c
  1831  000822  D08B               	goto	l276
  1832                           
  1833                           ;ikb.c: 552: {;ikb.c: 553: if ( ikey_is_accessible(k) )
  1834  000824  5023               	movf	ikey_parsing@k,w,c
  1835  000826  ECC5  F00B         	call	_ikey_is_accessible
  1836  00082A  0900               	iorlw	0
  1837  00082C  B4D8               	btfsc	status,2,c
  1838  00082E  D085               	goto	l276
  1839                           
  1840                           ;ikb.c: 554: {;ikb.c: 555: if (key[k].bf.state == 1)
  1841  000830  5023               	movf	ikey_parsing@k,w,c
  1842  000832  0D10               	mullw	16
  1843  000834  50F3               	movf	prodl,w,c
  1844  000836  0F6A               	addlw	low (_key+10)
  1845  000838  6ED9               	movwf	fsr2l,c
  1846  00083A  6ADA               	clrf	fsr2h,c
  1847  00083C  0100               	movlb	0	; () banked
  1848  00083E  A0DF               	btfss	indf2,0,c
  1849  000840  D07C               	goto	l276
  1850                           
  1851                           ; BSR set to: 0
  1852                           ;ikb.c: 556: {;ikb.c: 558: if (key[k].bf.OnKeyPressed)
  1853  000842  5023               	movf	ikey_parsing@k,w,c
  1854  000844  0D10               	mullw	16
  1855  000846  50F3               	movf	prodl,w,c
  1856  000848  0F6A               	addlw	low (_key+10)
  1857  00084A  6ED9               	movwf	fsr2l,c
  1858  00084C  6ADA               	clrf	fsr2h,c
  1859  00084E  A2DF               	btfss	indf2,1,c
  1860  000850  D01F               	goto	l2581
  1861                           
  1862                           ; BSR set to: 0
  1863                           ;ikb.c: 559: {;ikb.c: 560: key[k].bf.ReadyToRead = 1;
  1864  000852  5023               	movf	ikey_parsing@k,w,c
  1865  000854  0D10               	mullw	16
  1866  000856  50F3               	movf	prodl,w,c
  1867  000858  0F6A               	addlw	low (_key+10)
  1868  00085A  6ED9               	movwf	fsr2l,c
  1869  00085C  6ADA               	clrf	fsr2h,c
  1870  00085E  8CDF               	bsf	indf2,6,c
  1871                           
  1872                           ;ikb.c: 562: if (key[k].bf.Reptt)
  1873  000860  5023               	movf	ikey_parsing@k,w,c
  1874  000862  0D10               	mullw	16
  1875  000864  50F3               	movf	prodl,w,c
  1876  000866  0F6A               	addlw	low (_key+10)
  1877  000868  6ED9               	movwf	fsr2l,c
  1878  00086A  6ADA               	clrf	fsr2h,c
  1879  00086C  AADF               	btfss	indf2,5,c
  1880  00086E  D008               	goto	l2579
  1881                           
  1882                           ; BSR set to: 0
  1883                           ;ikb.c: 563: {;ikb.c: 564: key[k].sm1 = (6);
  1884  000870  5023               	movf	ikey_parsing@k,w,c
  1885  000872  0D10               	mullw	16
  1886  000874  50F3               	movf	prodl,w,c
  1887  000876  0F66               	addlw	low (_key+6)
  1888  000878  6ED9               	movwf	fsr2l,c
  1889  00087A  6ADA               	clrf	fsr2h,c
  1890  00087C  0E06               	movlw	6
  1891  00087E  D037               	goto	L2
  1892  000880                     l2579:
  1893                           
  1894                           ; BSR set to: 0
  1895                           ;ikb.c: 566: else;ikb.c: 567: {;ikb.c: 568: key[k].sm1 = (1);
  1896  000880  5023               	movf	ikey_parsing@k,w,c
  1897  000882  0D10               	mullw	16
  1898  000884  50F3               	movf	prodl,w,c
  1899  000886  0F66               	addlw	low (_key+6)
  1900  000888  6ED9               	movwf	fsr2l,c
  1901  00088A  6ADA               	clrf	fsr2h,c
  1902  00088C  0E01               	movlw	1
  1903  00088E  D02F               	goto	L2
  1904  000890                     l2581:
  1905                           
  1906                           ; BSR set to: 0
  1907                           ;ikb.c: 571: else if ( key[k].bf.OnKeyPressedAndKeyRelease)
  1908  000890  5023               	movf	ikey_parsing@k,w,c
  1909  000892  0D10               	mullw	16
  1910  000894  50F3               	movf	prodl,w,c
  1911  000896  0F6A               	addlw	low (_key+10)
  1912  000898  6ED9               	movwf	fsr2l,c
  1913  00089A  6ADA               	clrf	fsr2h,c
  1914  00089C  A4DF               	btfss	indf2,2,c
  1915  00089E  D008               	goto	l2585
  1916                           
  1917                           ; BSR set to: 0
  1918                           ;ikb.c: 572: {;ikb.c: 573: key[k].sm1 = (5);
  1919  0008A0  5023               	movf	ikey_parsing@k,w,c
  1920  0008A2  0D10               	mullw	16
  1921  0008A4  50F3               	movf	prodl,w,c
  1922  0008A6  0F66               	addlw	low (_key+6)
  1923  0008A8  6ED9               	movwf	fsr2l,c
  1924  0008AA  6ADA               	clrf	fsr2h,c
  1925  0008AC  0E05               	movlw	5
  1926  0008AE  D01F               	goto	L2
  1927  0008B0                     l2585:
  1928                           
  1929                           ; BSR set to: 0
  1930                           ;ikb.c: 576: else if (key[k].bf.AtTimeExpired)
  1931  0008B0  5023               	movf	ikey_parsing@k,w,c
  1932  0008B2  0D10               	mullw	16
  1933  0008B4  50F3               	movf	prodl,w,c
  1934  0008B6  0F6A               	addlw	low (_key+10)
  1935  0008B8  6ED9               	movwf	fsr2l,c
  1936  0008BA  6ADA               	clrf	fsr2h,c
  1937  0008BC  A6DF               	btfss	indf2,3,c
  1938  0008BE  D008               	goto	l2589
  1939                           
  1940                           ; BSR set to: 0
  1941                           ;ikb.c: 577: {;ikb.c: 578: key[k].sm1 = (3);
  1942  0008C0  5023               	movf	ikey_parsing@k,w,c
  1943  0008C2  0D10               	mullw	16
  1944  0008C4  50F3               	movf	prodl,w,c
  1945  0008C6  0F66               	addlw	low (_key+6)
  1946  0008C8  6ED9               	movwf	fsr2l,c
  1947  0008CA  6ADA               	clrf	fsr2h,c
  1948  0008CC  0E03               	movlw	3
  1949  0008CE  D00F               	goto	L2
  1950  0008D0                     l2589:
  1951                           
  1952                           ; BSR set to: 0
  1953                           ;ikb.c: 580: else if (key[k].bf.AtTimeExpired2)
  1954  0008D0  5023               	movf	ikey_parsing@k,w,c
  1955  0008D2  0D10               	mullw	16
  1956  0008D4  50F3               	movf	prodl,w,c
  1957  0008D6  0F6A               	addlw	low (_key+10)
  1958  0008D8  6ED9               	movwf	fsr2l,c
  1959  0008DA  6ADA               	clrf	fsr2h,c
  1960  0008DC  A8DF               	btfss	indf2,4,c
  1961  0008DE  D008               	goto	l282
  1962                           
  1963                           ; BSR set to: 0
  1964                           ;ikb.c: 581: {;ikb.c: 582: key[k].sm1 = (4);
  1965  0008E0  5023               	movf	ikey_parsing@k,w,c
  1966  0008E2  0D10               	mullw	16
  1967  0008E4  50F3               	movf	prodl,w,c
  1968  0008E6  0F66               	addlw	low (_key+6)
  1969  0008E8  6ED9               	movwf	fsr2l,c
  1970  0008EA  6ADA               	clrf	fsr2h,c
  1971  0008EC  0E04               	movlw	4
  1972  0008EE                     L2:
  1973  0008EE  6EDF               	movwf	indf2,c
  1974  0008F0                     l282:
  1975                           
  1976                           ; BSR set to: 0
  1977                           ;ikb.c: 583: };ikb.c: 586: key[k].bf.InProcessing = 1;
  1978  0008F0  5023               	movf	ikey_parsing@k,w,c
  1979  0008F2  0D10               	mullw	16
  1980  0008F4  50F3               	movf	prodl,w,c
  1981  0008F6  0F6B               	addlw	low (_key+11)
  1982  0008F8  6ED9               	movwf	fsr2l,c
  1983  0008FA  6ADA               	clrf	fsr2h,c
  1984  0008FC  82DF               	bsf	indf2,1,c
  1985                           
  1986                           ;ikb.c: 591: if (key[k].num_group_x != 0)
  1987  0008FE  5023               	movf	ikey_parsing@k,w,c
  1988  000900  0D10               	mullw	16
  1989  000902  50F3               	movf	prodl,w,c
  1990  000904  0F69               	addlw	low (_key+9)
  1991  000906  6ED9               	movwf	fsr2l,c
  1992  000908  6ADA               	clrf	fsr2h,c
  1993  00090A  50DF               	movf	indf2,w,c
  1994  00090C  B4D8               	btfsc	status,2,c
  1995  00090E  D015               	goto	l276
  1996                           
  1997                           ; BSR set to: 0
  1998                           ;ikb.c: 592: {;ikb.c: 593: group_x[ key[k].num_group_x ] = 1;
  1999  000910  5023               	movf	ikey_parsing@k,w,c
  2000  000912  0D10               	mullw	16
  2001  000914  50F3               	movf	prodl,w,c
  2002  000916  0F69               	addlw	low (_key+9)
  2003  000918  6ED9               	movwf	fsr2l,c
  2004  00091A  6ADA               	clrf	fsr2h,c
  2005  00091C  50DF               	movf	indf2,w,c
  2006  00091E  6E1F               	movwf	??_ikey_parsing& (0+255),c
  2007  000920  501F               	movf	??_ikey_parsing,w,c
  2008  000922  0FB0               	addlw	low _group_x
  2009  000924  6ED9               	movwf	fsr2l,c
  2010  000926  6ADA               	clrf	fsr2h,c
  2011  000928  0E01               	movlw	1
  2012  00092A  6EDF               	movwf	indf2,c
  2013                           
  2014                           ;ikb.c: 594: key[k].bf.OwnerOfGroup = 1;
  2015  00092C  5023               	movf	ikey_parsing@k,w,c
  2016  00092E  0D10               	mullw	16
  2017  000930  50F3               	movf	prodl,w,c
  2018  000932  0F6B               	addlw	low (_key+11)
  2019  000934  6ED9               	movwf	fsr2l,c
  2020  000936  6ADA               	clrf	fsr2h,c
  2021  000938  80DF               	bsf	indf2,0,c
  2022  00093A                     l276:
  2023                           
  2024                           ;ikb.c: 595: };ikb.c: 597: };ikb.c: 598: };ikb.c: 599: };ikb.c: 603: if ( (key[k].sm1 >=
      +                           (6) ) && (key[k].sm1 <= (8)))
  2025  00093A  5023               	movf	ikey_parsing@k,w,c
  2026  00093C  0D10               	mullw	16
  2027  00093E  50F3               	movf	prodl,w,c
  2028  000940  0F66               	addlw	low (_key+6)
  2029  000942  6ED9               	movwf	fsr2l,c
  2030  000944  6ADA               	clrf	fsr2h,c
  2031  000946  0E05               	movlw	5
  2032  000948  64DF               	cpfsgt	indf2,c
  2033  00094A  D024               	goto	l289
  2034  00094C  5023               	movf	ikey_parsing@k,w,c
  2035  00094E  0D10               	mullw	16
  2036  000950  50F3               	movf	prodl,w,c
  2037  000952  0F66               	addlw	low (_key+6)
  2038  000954  6ED9               	movwf	fsr2l,c
  2039  000956  6ADA               	clrf	fsr2h,c
  2040  000958  0E09               	movlw	9
  2041  00095A  60DF               	cpfslt	indf2,c
  2042  00095C  D01B               	goto	l289
  2043                           
  2044                           ;ikb.c: 604: {;ikb.c: 605: if (key[k].bf.state == 0)
  2045  00095E  5023               	movf	ikey_parsing@k,w,c
  2046  000960  0D10               	mullw	16
  2047  000962  50F3               	movf	prodl,w,c
  2048  000964  0F6A               	addlw	low (_key+10)
  2049  000966  6ED9               	movwf	fsr2l,c
  2050  000968  6ADA               	clrf	fsr2h,c
  2051  00096A  0100               	movlb	0	; () banked
  2052  00096C  B0DF               	btfsc	indf2,0,c
  2053  00096E  D012               	goto	l289
  2054                           
  2055                           ; BSR set to: 0
  2056                           ;ikb.c: 606: {;ikb.c: 607: key[k].counter1 = 0;
  2057  000970  5023               	movf	ikey_parsing@k,w,c
  2058  000972  0D10               	mullw	16
  2059  000974  50F3               	movf	prodl,w,c
  2060  000976  0F67               	addlw	low (_key+7)
  2061  000978  6ED9               	movwf	fsr2l,c
  2062  00097A  6ADA               	clrf	fsr2h,c
  2063  00097C  0E00               	movlw	0
  2064  00097E  6EDE               	movwf	postinc2,c
  2065  000980  0E00               	movlw	0
  2066  000982  6EDD               	movwf	postdec2,c
  2067                           
  2068                           ;ikb.c: 608: key[k].sm1 = (2);
  2069  000984  5023               	movf	ikey_parsing@k,w,c
  2070  000986  0D10               	mullw	16
  2071  000988  50F3               	movf	prodl,w,c
  2072  00098A  0F66               	addlw	low (_key+6)
  2073  00098C  6ED9               	movwf	fsr2l,c
  2074  00098E  6ADA               	clrf	fsr2h,c
  2075  000990  0E02               	movlw	2
  2076  000992  6EDF               	movwf	indf2,c
  2077  000994                     l289:
  2078                           
  2079                           ;ikb.c: 609: };ikb.c: 610: };ikb.c: 612: if (key[k].sm1 == (6) )
  2080  000994  5023               	movf	ikey_parsing@k,w,c
  2081  000996  0D10               	mullw	16
  2082  000998  50F3               	movf	prodl,w,c
  2083  00099A  0F66               	addlw	low (_key+6)
  2084  00099C  6ED9               	movwf	fsr2l,c
  2085  00099E  6ADA               	clrf	fsr2h,c
  2086  0009A0  0E06               	movlw	6
  2087  0009A2  18DE               	xorwf	postinc2,w,c
  2088  0009A4  A4D8               	btfss	status,2,c
  2089  0009A6  D027               	goto	l291
  2090                           
  2091                           ;ikb.c: 613: {;ikb.c: 614: if ( ++key[k].counter1 >= key[k].repp.to_start)
  2092  0009A8  5023               	movf	ikey_parsing@k,w,c
  2093  0009AA  0D10               	mullw	16
  2094  0009AC  50F3               	movf	prodl,w,c
  2095  0009AE  0F6C               	addlw	low (_key+12)
  2096  0009B0  6ED9               	movwf	fsr2l,c
  2097  0009B2  6ADA               	clrf	fsr2h,c
  2098  0009B4  5023               	movf	ikey_parsing@k,w,c
  2099  0009B6  0D10               	mullw	16
  2100  0009B8  50F3               	movf	prodl,w,c
  2101  0009BA  0F67               	addlw	low (_key+7)
  2102  0009BC  6EE1               	movwf	fsr1l,c
  2103  0009BE  6AE2               	clrf	fsr1h,c
  2104  0009C0  2AE6               	incf	postinc1,f,c
  2105  0009C2  0E00               	movlw	0
  2106  0009C4  22E5               	addwfc	postdec1,f,c
  2107  0009C6  50DE               	movf	postinc2,w,c
  2108  0009C8  5CE6               	subwf	postinc1,w,c
  2109  0009CA  50DE               	movf	postinc2,w,c
  2110  0009CC  58E6               	subwfb	postinc1,w,c
  2111  0009CE  A0D8               	btfss	status,0,c
  2112  0009D0  D012               	goto	l291
  2113                           
  2114                           ;ikb.c: 615: {;ikb.c: 616: key[k].counter1 =0;
  2115  0009D2  5023               	movf	ikey_parsing@k,w,c
  2116  0009D4  0D10               	mullw	16
  2117  0009D6  50F3               	movf	prodl,w,c
  2118  0009D8  0F67               	addlw	low (_key+7)
  2119  0009DA  6ED9               	movwf	fsr2l,c
  2120  0009DC  6ADA               	clrf	fsr2h,c
  2121  0009DE  0E00               	movlw	0
  2122  0009E0  6EDE               	movwf	postinc2,c
  2123  0009E2  0E00               	movlw	0
  2124  0009E4  6EDD               	movwf	postdec2,c
  2125                           
  2126                           ;ikb.c: 617: key[k].sm1 = (7);
  2127  0009E6  5023               	movf	ikey_parsing@k,w,c
  2128  0009E8  0D10               	mullw	16
  2129  0009EA  50F3               	movf	prodl,w,c
  2130  0009EC  0F66               	addlw	low (_key+6)
  2131  0009EE  6ED9               	movwf	fsr2l,c
  2132  0009F0  6ADA               	clrf	fsr2h,c
  2133  0009F2  0E07               	movlw	7
  2134  0009F4  6EDF               	movwf	indf2,c
  2135  0009F6                     l291:
  2136                           
  2137                           ;ikb.c: 618: };ikb.c: 619: };ikb.c: 620: if (key[k].sm1 == (7))
  2138  0009F6  5023               	movf	ikey_parsing@k,w,c
  2139  0009F8  0D10               	mullw	16
  2140  0009FA  50F3               	movf	prodl,w,c
  2141  0009FC  0F66               	addlw	low (_key+6)
  2142  0009FE  6ED9               	movwf	fsr2l,c
  2143  000A00  6ADA               	clrf	fsr2h,c
  2144  000A02  0E07               	movlw	7
  2145  000A04  18DE               	xorwf	postinc2,w,c
  2146  000A06  A4D8               	btfss	status,2,c
  2147  000A08  D018               	goto	l293
  2148                           
  2149                           ;ikb.c: 621: {;ikb.c: 622: if (key[k].bf.ReadyToRead == 0)
  2150  000A0A  5023               	movf	ikey_parsing@k,w,c
  2151  000A0C  0D10               	mullw	16
  2152  000A0E  50F3               	movf	prodl,w,c
  2153  000A10  0F6A               	addlw	low (_key+10)
  2154  000A12  6ED9               	movwf	fsr2l,c
  2155  000A14  6ADA               	clrf	fsr2h,c
  2156  000A16  0100               	movlb	0	; () banked
  2157  000A18  BCDF               	btfsc	indf2,6,c
  2158  000A1A  D00F               	goto	l293
  2159                           
  2160                           ; BSR set to: 0
  2161                           ;ikb.c: 623: {;ikb.c: 624: key[k].bf.ReadyToRead = 1;
  2162  000A1C  5023               	movf	ikey_parsing@k,w,c
  2163  000A1E  0D10               	mullw	16
  2164  000A20  50F3               	movf	prodl,w,c
  2165  000A22  0F6A               	addlw	low (_key+10)
  2166  000A24  6ED9               	movwf	fsr2l,c
  2167  000A26  6ADA               	clrf	fsr2h,c
  2168  000A28  8CDF               	bsf	indf2,6,c
  2169                           
  2170                           ;ikb.c: 625: key[k].sm1 = (8);
  2171  000A2A  5023               	movf	ikey_parsing@k,w,c
  2172  000A2C  0D10               	mullw	16
  2173  000A2E  50F3               	movf	prodl,w,c
  2174  000A30  0F66               	addlw	low (_key+6)
  2175  000A32  6ED9               	movwf	fsr2l,c
  2176  000A34  6ADA               	clrf	fsr2h,c
  2177  000A36  0E08               	movlw	8
  2178  000A38  6EDF               	movwf	indf2,c
  2179  000A3A                     l293:
  2180                           
  2181                           ;ikb.c: 626: };ikb.c: 627: };ikb.c: 628: if (key[k].sm1 == (8))
  2182  000A3A  5023               	movf	ikey_parsing@k,w,c
  2183  000A3C  0D10               	mullw	16
  2184  000A3E  50F3               	movf	prodl,w,c
  2185  000A40  0F66               	addlw	low (_key+6)
  2186  000A42  6ED9               	movwf	fsr2l,c
  2187  000A44  6ADA               	clrf	fsr2h,c
  2188  000A46  0E08               	movlw	8
  2189  000A48  18DE               	xorwf	postinc2,w,c
  2190  000A4A  A4D8               	btfss	status,2,c
  2191  000A4C  D027               	goto	l295
  2192                           
  2193                           ;ikb.c: 629: {;ikb.c: 630: if ( ++key[k].counter1 >= key[k].repp.after_start)
  2194  000A4E  5023               	movf	ikey_parsing@k,w,c
  2195  000A50  0D10               	mullw	16
  2196  000A52  50F3               	movf	prodl,w,c
  2197  000A54  0F6E               	addlw	low (_key+14)
  2198  000A56  6ED9               	movwf	fsr2l,c
  2199  000A58  6ADA               	clrf	fsr2h,c
  2200  000A5A  5023               	movf	ikey_parsing@k,w,c
  2201  000A5C  0D10               	mullw	16
  2202  000A5E  50F3               	movf	prodl,w,c
  2203  000A60  0F67               	addlw	low (_key+7)
  2204  000A62  6EE1               	movwf	fsr1l,c
  2205  000A64  6AE2               	clrf	fsr1h,c
  2206  000A66  2AE6               	incf	postinc1,f,c
  2207  000A68  0E00               	movlw	0
  2208  000A6A  22E5               	addwfc	postdec1,f,c
  2209  000A6C  50DE               	movf	postinc2,w,c
  2210  000A6E  5CE6               	subwf	postinc1,w,c
  2211  000A70  50DE               	movf	postinc2,w,c
  2212  000A72  58E6               	subwfb	postinc1,w,c
  2213  000A74  A0D8               	btfss	status,0,c
  2214  000A76  D012               	goto	l295
  2215                           
  2216                           ;ikb.c: 631: {;ikb.c: 632: key[k].counter1 = 0;
  2217  000A78  5023               	movf	ikey_parsing@k,w,c
  2218  000A7A  0D10               	mullw	16
  2219  000A7C  50F3               	movf	prodl,w,c
  2220  000A7E  0F67               	addlw	low (_key+7)
  2221  000A80  6ED9               	movwf	fsr2l,c
  2222  000A82  6ADA               	clrf	fsr2h,c
  2223  000A84  0E00               	movlw	0
  2224  000A86  6EDE               	movwf	postinc2,c
  2225  000A88  0E00               	movlw	0
  2226  000A8A  6EDD               	movwf	postdec2,c
  2227                           
  2228                           ;ikb.c: 633: key[k].sm1 = (7);
  2229  000A8C  5023               	movf	ikey_parsing@k,w,c
  2230  000A8E  0D10               	mullw	16
  2231  000A90  50F3               	movf	prodl,w,c
  2232  000A92  0F66               	addlw	low (_key+6)
  2233  000A94  6ED9               	movwf	fsr2l,c
  2234  000A96  6ADA               	clrf	fsr2h,c
  2235  000A98  0E07               	movlw	7
  2236  000A9A  6EDF               	movwf	indf2,c
  2237  000A9C                     l295:
  2238                           
  2239                           ;ikb.c: 634: };ikb.c: 635: };ikb.c: 637: if (key[k].sm1 == (5) )
  2240  000A9C  5023               	movf	ikey_parsing@k,w,c
  2241  000A9E  0D10               	mullw	16
  2242  000AA0  50F3               	movf	prodl,w,c
  2243  000AA2  0F66               	addlw	low (_key+6)
  2244  000AA4  6ED9               	movwf	fsr2l,c
  2245  000AA6  6ADA               	clrf	fsr2h,c
  2246  000AA8  0E05               	movlw	5
  2247  000AAA  18DE               	xorwf	postinc2,w,c
  2248  000AAC  A4D8               	btfss	status,2,c
  2249  000AAE  D018               	goto	l297
  2250                           
  2251                           ;ikb.c: 638: {;ikb.c: 639: if (key[k].bf.state == 0)
  2252  000AB0  5023               	movf	ikey_parsing@k,w,c
  2253  000AB2  0D10               	mullw	16
  2254  000AB4  50F3               	movf	prodl,w,c
  2255  000AB6  0F6A               	addlw	low (_key+10)
  2256  000AB8  6ED9               	movwf	fsr2l,c
  2257  000ABA  6ADA               	clrf	fsr2h,c
  2258  000ABC  0100               	movlb	0	; () banked
  2259  000ABE  B0DF               	btfsc	indf2,0,c
  2260  000AC0  D00F               	goto	l297
  2261                           
  2262                           ; BSR set to: 0
  2263                           ;ikb.c: 640: {;ikb.c: 641: key[k].bf.ReadyToRead = 1;
  2264  000AC2  5023               	movf	ikey_parsing@k,w,c
  2265  000AC4  0D10               	mullw	16
  2266  000AC6  50F3               	movf	prodl,w,c
  2267  000AC8  0F6A               	addlw	low (_key+10)
  2268  000ACA  6ED9               	movwf	fsr2l,c
  2269  000ACC  6ADA               	clrf	fsr2h,c
  2270  000ACE  8CDF               	bsf	indf2,6,c
  2271                           
  2272                           ;ikb.c: 642: key[k].sm1 = (2);
  2273  000AD0  5023               	movf	ikey_parsing@k,w,c
  2274  000AD2  0D10               	mullw	16
  2275  000AD4  50F3               	movf	prodl,w,c
  2276  000AD6  0F66               	addlw	low (_key+6)
  2277  000AD8  6ED9               	movwf	fsr2l,c
  2278  000ADA  6ADA               	clrf	fsr2h,c
  2279  000ADC  0E02               	movlw	2
  2280  000ADE  6EDF               	movwf	indf2,c
  2281  000AE0                     l297:
  2282                           
  2283                           ;ikb.c: 643: };ikb.c: 644: };ikb.c: 646: if (key[k].sm1 == (3) )
  2284  000AE0  5023               	movf	ikey_parsing@k,w,c
  2285  000AE2  0D10               	mullw	16
  2286  000AE4  50F3               	movf	prodl,w,c
  2287  000AE6  0F66               	addlw	low (_key+6)
  2288  000AE8  6ED9               	movwf	fsr2l,c
  2289  000AEA  6ADA               	clrf	fsr2h,c
  2290  000AEC  0E03               	movlw	3
  2291  000AEE  18DE               	xorwf	postinc2,w,c
  2292  000AF0  A4D8               	btfss	status,2,c
  2293  000AF2  D09C               	goto	l299
  2294                           
  2295                           ;ikb.c: 647: {;ikb.c: 648: key[k].counter1++;
  2296  000AF4  5023               	movf	ikey_parsing@k,w,c
  2297  000AF6  0D10               	mullw	16
  2298  000AF8  50F3               	movf	prodl,w,c
  2299  000AFA  0F67               	addlw	low (_key+7)
  2300  000AFC  6ED9               	movwf	fsr2l,c
  2301  000AFE  6ADA               	clrf	fsr2h,c
  2302  000B00  2ADE               	incf	postinc2,f,c
  2303  000B02  0E00               	movlw	0
  2304  000B04  22DD               	addwfc	postdec2,f,c
  2305                           
  2306                           ;ikb.c: 650: if (key[k].bf.state == 0)
  2307  000B06  5023               	movf	ikey_parsing@k,w,c
  2308  000B08  0D10               	mullw	16
  2309  000B0A  50F3               	movf	prodl,w,c
  2310  000B0C  0F6A               	addlw	low (_key+10)
  2311  000B0E  6ED9               	movwf	fsr2l,c
  2312  000B10  6ADA               	clrf	fsr2h,c
  2313  000B12  0100               	movlb	0	; () banked
  2314  000B14  B0DF               	btfsc	indf2,0,c
  2315  000B16  D03D               	goto	l2623
  2316                           
  2317                           ; BSR set to: 0
  2318                           ;ikb.c: 651: {;ikb.c: 652: if (key[k].counter1 <= (1000E-3/5E-3) )
  2319  000B18  0E00               	movlw	0
  2320  000B1A  6E16               	movwf	___ftge@ff1,c
  2321  000B1C  0E48               	movlw	72
  2322  000B1E  6E17               	movwf	___ftge@ff1+1,c
  2323  000B20  0E43               	movlw	67
  2324  000B22  6E18               	movwf	___ftge@ff1+2,c
  2325  000B24  5023               	movf	ikey_parsing@k,w,c
  2326  000B26  0D10               	mullw	16
  2327  000B28  50F3               	movf	prodl,w,c
  2328  000B2A  0F67               	addlw	low (_key+7)
  2329  000B2C  6ED9               	movwf	fsr2l,c
  2330  000B2E  6ADA               	clrf	fsr2h,c
  2331  000B30  CFDE F013          	movff	postinc2,___lwtoft@c
  2332  000B34  CFDD F014          	movff	postdec2,___lwtoft@c+1
  2333  000B38  EC01  F00D         	call	___lwtoft	;wreg free
  2334  000B3C  C013  F019         	movff	?___lwtoft,___ftge@ff2
  2335  000B40  C014  F01A         	movff	?___lwtoft+1,___ftge@ff2+1
  2336  000B44  C015  F01B         	movff	?___lwtoft+2,___ftge@ff2+2
  2337  000B48  EC9D  F00A         	call	___ftge	;wreg free
  2338  000B4C  A0D8               	btfss	status,0,c
  2339  000B4E  D021               	goto	l2623
  2340                           
  2341                           ;ikb.c: 653: {;ikb.c: 654: key[k].counter1 = 0;
  2342  000B50  5023               	movf	ikey_parsing@k,w,c
  2343  000B52  0D10               	mullw	16
  2344  000B54  50F3               	movf	prodl,w,c
  2345  000B56  0F67               	addlw	low (_key+7)
  2346  000B58  6ED9               	movwf	fsr2l,c
  2347  000B5A  6ADA               	clrf	fsr2h,c
  2348  000B5C  0E00               	movlw	0
  2349  000B5E  6EDE               	movwf	postinc2,c
  2350  000B60  0E00               	movlw	0
  2351  000B62  6EDD               	movwf	postdec2,c
  2352                           
  2353                           ;ikb.c: 656: key[k].bf.ReadyToRead = 1;
  2354  000B64  5023               	movf	ikey_parsing@k,w,c
  2355  000B66  0D10               	mullw	16
  2356  000B68  50F3               	movf	prodl,w,c
  2357  000B6A  0F6A               	addlw	low (_key+10)
  2358  000B6C  6ED9               	movwf	fsr2l,c
  2359  000B6E  6ADA               	clrf	fsr2h,c
  2360  000B70  0100               	movlb	0	; () banked
  2361  000B72  8CDF               	bsf	indf2,6,c
  2362                           
  2363                           ;ikb.c: 657: key[k].bf.AtTimeExpired_BeforeOrAfter = 0;
  2364  000B74  5023               	movf	ikey_parsing@k,w,c
  2365  000B76  0D10               	mullw	16
  2366  000B78  50F3               	movf	prodl,w,c
  2367  000B7A  0F6A               	addlw	low (_key+10)
  2368  000B7C  6ED9               	movwf	fsr2l,c
  2369  000B7E  6ADA               	clrf	fsr2h,c
  2370  000B80  9EDF               	bcf	indf2,7,c
  2371                           
  2372                           ;ikb.c: 659: key[k].sm1 = (2);
  2373  000B82  5023               	movf	ikey_parsing@k,w,c
  2374  000B84  0D10               	mullw	16
  2375  000B86  50F3               	movf	prodl,w,c
  2376  000B88  0F66               	addlw	low (_key+6)
  2377  000B8A  6ED9               	movwf	fsr2l,c
  2378  000B8C  6ADA               	clrf	fsr2h,c
  2379  000B8E  0E02               	movlw	2
  2380  000B90  6EDF               	movwf	indf2,c
  2381  000B92                     l2623:
  2382                           
  2383                           ;ikb.c: 660: };ikb.c: 661: };ikb.c: 663: if (key[k].counter1 > (1000E-3/5E-3) )
  2384  000B92  0E00               	movlw	0
  2385  000B94  6E16               	movwf	___ftge@ff1,c
  2386  000B96  0E48               	movlw	72
  2387  000B98  6E17               	movwf	___ftge@ff1+1,c
  2388  000B9A  0E43               	movlw	67
  2389  000B9C  6E18               	movwf	___ftge@ff1+2,c
  2390  000B9E  5023               	movf	ikey_parsing@k,w,c
  2391  000BA0  0D10               	mullw	16
  2392  000BA2  50F3               	movf	prodl,w,c
  2393  000BA4  0F67               	addlw	low (_key+7)
  2394  000BA6  6ED9               	movwf	fsr2l,c
  2395  000BA8  6ADA               	clrf	fsr2h,c
  2396  000BAA  CFDE F013          	movff	postinc2,___lwtoft@c
  2397  000BAE  CFDD F014          	movff	postdec2,___lwtoft@c+1
  2398  000BB2  EC01  F00D         	call	___lwtoft	;wreg free
  2399  000BB6  C013  F019         	movff	?___lwtoft,___ftge@ff2
  2400  000BBA  C014  F01A         	movff	?___lwtoft+1,___ftge@ff2+1
  2401  000BBE  C015  F01B         	movff	?___lwtoft+2,___ftge@ff2+2
  2402  000BC2  EC9D  F00A         	call	___ftge	;wreg free
  2403  000BC6  B0D8               	btfsc	status,0,c
  2404  000BC8  D031               	goto	l299
  2405                           
  2406                           ;ikb.c: 664: {;ikb.c: 665: key[k].counter1 = 0x0000;
  2407  000BCA  5023               	movf	ikey_parsing@k,w,c
  2408  000BCC  0D10               	mullw	16
  2409  000BCE  50F3               	movf	prodl,w,c
  2410  000BD0  0F67               	addlw	low (_key+7)
  2411  000BD2  6ED9               	movwf	fsr2l,c
  2412  000BD4  6ADA               	clrf	fsr2h,c
  2413  000BD6  0E00               	movlw	0
  2414  000BD8  6EDE               	movwf	postinc2,c
  2415  000BDA  0E00               	movlw	0
  2416  000BDC  6EDD               	movwf	postdec2,c
  2417                           
  2418                           ;ikb.c: 667: key[k].bf.ReadyToRead = 1;
  2419  000BDE  5023               	movf	ikey_parsing@k,w,c
  2420  000BE0  0D10               	mullw	16
  2421  000BE2  50F3               	movf	prodl,w,c
  2422  000BE4  0F6A               	addlw	low (_key+10)
  2423  000BE6  6ED9               	movwf	fsr2l,c
  2424  000BE8  6ADA               	clrf	fsr2h,c
  2425  000BEA  0100               	movlb	0	; () banked
  2426  000BEC  8CDF               	bsf	indf2,6,c
  2427                           
  2428                           ;ikb.c: 668: key[k].bf.AtTimeExpired_BeforeOrAfter = 1;
  2429  000BEE  5023               	movf	ikey_parsing@k,w,c
  2430  000BF0  0D10               	mullw	16
  2431  000BF2  50F3               	movf	prodl,w,c
  2432  000BF4  0F6A               	addlw	low (_key+10)
  2433  000BF6  6ED9               	movwf	fsr2l,c
  2434  000BF8  6ADA               	clrf	fsr2h,c
  2435  000BFA  8EDF               	bsf	indf2,7,c
  2436                           
  2437                           ;ikb.c: 670: if (!key[k].bf.Reptt)
  2438  000BFC  5023               	movf	ikey_parsing@k,w,c
  2439  000BFE  0D10               	mullw	16
  2440  000C00  50F3               	movf	prodl,w,c
  2441  000C02  0F6A               	addlw	low (_key+10)
  2442  000C04  6ED9               	movwf	fsr2l,c
  2443  000C06  6ADA               	clrf	fsr2h,c
  2444  000C08  BADF               	btfsc	indf2,5,c
  2445  000C0A  D008               	goto	l2629
  2446                           
  2447                           ; BSR set to: 0
  2448                           ;ikb.c: 671: {;ikb.c: 672: key[k].sm1 = (1);
  2449  000C0C  5023               	movf	ikey_parsing@k,w,c
  2450  000C0E  0D10               	mullw	16
  2451  000C10  50F3               	movf	prodl,w,c
  2452  000C12  0F66               	addlw	low (_key+6)
  2453  000C14  6ED9               	movwf	fsr2l,c
  2454  000C16  6ADA               	clrf	fsr2h,c
  2455  000C18  0E01               	movlw	1
  2456  000C1A  D007               	goto	L3
  2457  000C1C                     l2629:
  2458                           
  2459                           ; BSR set to: 0
  2460                           ;ikb.c: 674: else;ikb.c: 675: {;ikb.c: 676: key[k].sm1 = (8);
  2461  000C1C  5023               	movf	ikey_parsing@k,w,c
  2462  000C1E  0D10               	mullw	16
  2463  000C20  50F3               	movf	prodl,w,c
  2464  000C22  0F66               	addlw	low (_key+6)
  2465  000C24  6ED9               	movwf	fsr2l,c
  2466  000C26  6ADA               	clrf	fsr2h,c
  2467  000C28  0E08               	movlw	8
  2468  000C2A                     L3:
  2469  000C2A  6EDF               	movwf	indf2,c
  2470  000C2C                     l299:
  2471                           
  2472                           ;ikb.c: 677: };ikb.c: 678: };ikb.c: 679: };ikb.c: 684: if (key[k].sm1 == (4))
  2473  000C2C  5023               	movf	ikey_parsing@k,w,c
  2474  000C2E  0D10               	mullw	16
  2475  000C30  50F3               	movf	prodl,w,c
  2476  000C32  0F66               	addlw	low (_key+6)
  2477  000C34  6ED9               	movwf	fsr2l,c
  2478  000C36  6ADA               	clrf	fsr2h,c
  2479  000C38  0E04               	movlw	4
  2480  000C3A  18DE               	xorwf	postinc2,w,c
  2481  000C3C  A4D8               	btfss	status,2,c
  2482  000C3E  D08C               	goto	l305
  2483                           
  2484                           ;ikb.c: 685: {;ikb.c: 686: key[k].counter1++;
  2485  000C40  5023               	movf	ikey_parsing@k,w,c
  2486  000C42  0D10               	mullw	16
  2487  000C44  50F3               	movf	prodl,w,c
  2488  000C46  0F67               	addlw	low (_key+7)
  2489  000C48  6ED9               	movwf	fsr2l,c
  2490  000C4A  6ADA               	clrf	fsr2h,c
  2491  000C4C  2ADE               	incf	postinc2,f,c
  2492  000C4E  0E00               	movlw	0
  2493  000C50  22DD               	addwfc	postdec2,f,c
  2494                           
  2495                           ;ikb.c: 688: if (key[k].bf.state == 0)
  2496  000C52  5023               	movf	ikey_parsing@k,w,c
  2497  000C54  0D10               	mullw	16
  2498  000C56  50F3               	movf	prodl,w,c
  2499  000C58  0F6A               	addlw	low (_key+10)
  2500  000C5A  6ED9               	movwf	fsr2l,c
  2501  000C5C  6ADA               	clrf	fsr2h,c
  2502  000C5E  0100               	movlb	0	; () banked
  2503  000C60  B0DF               	btfsc	indf2,0,c
  2504  000C62  D03D               	goto	l2637
  2505                           
  2506                           ; BSR set to: 0
  2507                           ;ikb.c: 689: {;ikb.c: 690: if (key[k].counter1 <= (1000E-3/5E-3))
  2508  000C64  0E00               	movlw	0
  2509  000C66  6E16               	movwf	___ftge@ff1,c
  2510  000C68  0E48               	movlw	72
  2511  000C6A  6E17               	movwf	___ftge@ff1+1,c
  2512  000C6C  0E43               	movlw	67
  2513  000C6E  6E18               	movwf	___ftge@ff1+2,c
  2514  000C70  5023               	movf	ikey_parsing@k,w,c
  2515  000C72  0D10               	mullw	16
  2516  000C74  50F3               	movf	prodl,w,c
  2517  000C76  0F67               	addlw	low (_key+7)
  2518  000C78  6ED9               	movwf	fsr2l,c
  2519  000C7A  6ADA               	clrf	fsr2h,c
  2520  000C7C  CFDE F013          	movff	postinc2,___lwtoft@c
  2521  000C80  CFDD F014          	movff	postdec2,___lwtoft@c+1
  2522  000C84  EC01  F00D         	call	___lwtoft	;wreg free
  2523  000C88  C013  F019         	movff	?___lwtoft,___ftge@ff2
  2524  000C8C  C014  F01A         	movff	?___lwtoft+1,___ftge@ff2+1
  2525  000C90  C015  F01B         	movff	?___lwtoft+2,___ftge@ff2+2
  2526  000C94  EC9D  F00A         	call	___ftge	;wreg free
  2527  000C98  A0D8               	btfss	status,0,c
  2528  000C9A  D021               	goto	l2637
  2529                           
  2530                           ;ikb.c: 691: {;ikb.c: 692: key[k].counter1 = 0;
  2531  000C9C  5023               	movf	ikey_parsing@k,w,c
  2532  000C9E  0D10               	mullw	16
  2533  000CA0  50F3               	movf	prodl,w,c
  2534  000CA2  0F67               	addlw	low (_key+7)
  2535  000CA4  6ED9               	movwf	fsr2l,c
  2536  000CA6  6ADA               	clrf	fsr2h,c
  2537  000CA8  0E00               	movlw	0
  2538  000CAA  6EDE               	movwf	postinc2,c
  2539  000CAC  0E00               	movlw	0
  2540  000CAE  6EDD               	movwf	postdec2,c
  2541                           
  2542                           ;ikb.c: 694: key[k].bf.ReadyToRead = 1;
  2543  000CB0  5023               	movf	ikey_parsing@k,w,c
  2544  000CB2  0D10               	mullw	16
  2545  000CB4  50F3               	movf	prodl,w,c
  2546  000CB6  0F6A               	addlw	low (_key+10)
  2547  000CB8  6ED9               	movwf	fsr2l,c
  2548  000CBA  6ADA               	clrf	fsr2h,c
  2549  000CBC  0100               	movlb	0	; () banked
  2550  000CBE  8CDF               	bsf	indf2,6,c
  2551                           
  2552                           ;ikb.c: 695: key[k].bf.AtTimeExpired_BeforeOrAfter = 0;
  2553  000CC0  5023               	movf	ikey_parsing@k,w,c
  2554  000CC2  0D10               	mullw	16
  2555  000CC4  50F3               	movf	prodl,w,c
  2556  000CC6  0F6A               	addlw	low (_key+10)
  2557  000CC8  6ED9               	movwf	fsr2l,c
  2558  000CCA  6ADA               	clrf	fsr2h,c
  2559  000CCC  9EDF               	bcf	indf2,7,c
  2560                           
  2561                           ;ikb.c: 697: key[k].sm1 = (2);
  2562  000CCE  5023               	movf	ikey_parsing@k,w,c
  2563  000CD0  0D10               	mullw	16
  2564  000CD2  50F3               	movf	prodl,w,c
  2565  000CD4  0F66               	addlw	low (_key+6)
  2566  000CD6  6ED9               	movwf	fsr2l,c
  2567  000CD8  6ADA               	clrf	fsr2h,c
  2568  000CDA  0E02               	movlw	2
  2569  000CDC  6EDF               	movwf	indf2,c
  2570  000CDE                     l2637:
  2571                           
  2572                           ;ikb.c: 698: };ikb.c: 699: };ikb.c: 702: if (key[k].counter1 >= (3000E-3/5E-3))
  2573  000CDE  5023               	movf	ikey_parsing@k,w,c
  2574  000CE0  0D10               	mullw	16
  2575  000CE2  50F3               	movf	prodl,w,c
  2576  000CE4  0F67               	addlw	low (_key+7)
  2577  000CE6  6ED9               	movwf	fsr2l,c
  2578  000CE8  6ADA               	clrf	fsr2h,c
  2579  000CEA  CFDE F013          	movff	postinc2,___lwtoft@c
  2580  000CEE  CFDD F014          	movff	postdec2,___lwtoft@c+1
  2581  000CF2  EC01  F00D         	call	___lwtoft	;wreg free
  2582  000CF6  C013  F016         	movff	?___lwtoft,___ftge@ff1
  2583  000CFA  C014  F017         	movff	?___lwtoft+1,___ftge@ff1+1
  2584  000CFE  C015  F018         	movff	?___lwtoft+2,___ftge@ff1+2
  2585  000D02  0E00               	movlw	0
  2586  000D04  6E19               	movwf	___ftge@ff2,c
  2587  000D06  0E16               	movlw	22
  2588  000D08  6E1A               	movwf	___ftge@ff2+1,c
  2589  000D0A  0E44               	movlw	68
  2590  000D0C  6E1B               	movwf	___ftge@ff2+2,c
  2591  000D0E  EC9D  F00A         	call	___ftge	;wreg free
  2592  000D12  A0D8               	btfss	status,0,c
  2593  000D14  D021               	goto	l305
  2594                           
  2595                           ;ikb.c: 703: {;ikb.c: 704: key[k].counter1 = 0x0000;
  2596  000D16  5023               	movf	ikey_parsing@k,w,c
  2597  000D18  0D10               	mullw	16
  2598  000D1A  50F3               	movf	prodl,w,c
  2599  000D1C  0F67               	addlw	low (_key+7)
  2600  000D1E  6ED9               	movwf	fsr2l,c
  2601  000D20  6ADA               	clrf	fsr2h,c
  2602  000D22  0E00               	movlw	0
  2603  000D24  6EDE               	movwf	postinc2,c
  2604  000D26  0E00               	movlw	0
  2605  000D28  6EDD               	movwf	postdec2,c
  2606                           
  2607                           ;ikb.c: 706: key[k].bf.ReadyToRead = 1;
  2608  000D2A  5023               	movf	ikey_parsing@k,w,c
  2609  000D2C  0D10               	mullw	16
  2610  000D2E  50F3               	movf	prodl,w,c
  2611  000D30  0F6A               	addlw	low (_key+10)
  2612  000D32  6ED9               	movwf	fsr2l,c
  2613  000D34  6ADA               	clrf	fsr2h,c
  2614  000D36  0100               	movlb	0	; () banked
  2615  000D38  8CDF               	bsf	indf2,6,c
  2616                           
  2617                           ;ikb.c: 707: key[k].bf.AtTimeExpired_BeforeOrAfter = 1;
  2618  000D3A  5023               	movf	ikey_parsing@k,w,c
  2619  000D3C  0D10               	mullw	16
  2620  000D3E  50F3               	movf	prodl,w,c
  2621  000D40  0F6A               	addlw	low (_key+10)
  2622  000D42  6ED9               	movwf	fsr2l,c
  2623  000D44  6ADA               	clrf	fsr2h,c
  2624  000D46  8EDF               	bsf	indf2,7,c
  2625                           
  2626                           ;ikb.c: 710: key[k].sm1 = (1);
  2627  000D48  5023               	movf	ikey_parsing@k,w,c
  2628  000D4A  0D10               	mullw	16
  2629  000D4C  50F3               	movf	prodl,w,c
  2630  000D4E  0F66               	addlw	low (_key+6)
  2631  000D50  6ED9               	movwf	fsr2l,c
  2632  000D52  6ADA               	clrf	fsr2h,c
  2633  000D54  0E01               	movlw	1
  2634  000D56  6EDF               	movwf	indf2,c
  2635  000D58                     l305:
  2636                           
  2637                           ;ikb.c: 711: };ikb.c: 712: };ikb.c: 715: if (key[k].sm1 == (1))
  2638  000D58  5023               	movf	ikey_parsing@k,w,c
  2639  000D5A  0D10               	mullw	16
  2640  000D5C  50F3               	movf	prodl,w,c
  2641  000D5E  0F66               	addlw	low (_key+6)
  2642  000D60  6ED9               	movwf	fsr2l,c
  2643  000D62  6ADA               	clrf	fsr2h,c
  2644  000D64  04DE               	decf	postinc2,w,c
  2645  000D66  A4D8               	btfss	status,2,c
  2646  000D68  D011               	goto	l309
  2647                           
  2648                           ;ikb.c: 716: {;ikb.c: 717: if (key[k].bf.state == 0)
  2649  000D6A  5023               	movf	ikey_parsing@k,w,c
  2650  000D6C  0D10               	mullw	16
  2651  000D6E  50F3               	movf	prodl,w,c
  2652  000D70  0F6A               	addlw	low (_key+10)
  2653  000D72  6ED9               	movwf	fsr2l,c
  2654  000D74  6ADA               	clrf	fsr2h,c
  2655  000D76  0100               	movlb	0	; () banked
  2656  000D78  B0DF               	btfsc	indf2,0,c
  2657  000D7A  D008               	goto	l309
  2658                           
  2659                           ; BSR set to: 0
  2660                           ;ikb.c: 718: {;ikb.c: 719: key[k].sm1 = (2);
  2661  000D7C  5023               	movf	ikey_parsing@k,w,c
  2662  000D7E  0D10               	mullw	16
  2663  000D80  50F3               	movf	prodl,w,c
  2664  000D82  0F66               	addlw	low (_key+6)
  2665  000D84  6ED9               	movwf	fsr2l,c
  2666  000D86  6ADA               	clrf	fsr2h,c
  2667  000D88  0E02               	movlw	2
  2668  000D8A  6EDF               	movwf	indf2,c
  2669  000D8C                     l309:
  2670                           
  2671                           ;ikb.c: 720: };ikb.c: 721: };ikb.c: 723: if (key[k].sm1 == (2))
  2672  000D8C  5023               	movf	ikey_parsing@k,w,c
  2673  000D8E  0D10               	mullw	16
  2674  000D90  50F3               	movf	prodl,w,c
  2675  000D92  0F66               	addlw	low (_key+6)
  2676  000D94  6ED9               	movwf	fsr2l,c
  2677  000D96  6ADA               	clrf	fsr2h,c
  2678  000D98  0E02               	movlw	2
  2679  000D9A  18DE               	xorwf	postinc2,w,c
  2680  000D9C  A4D8               	btfss	status,2,c
  2681  000D9E  D011               	goto	l311
  2682                           
  2683                           ;ikb.c: 724: {;ikb.c: 725: if (key[k].bf.ReadyToRead == 0)
  2684  000DA0  5023               	movf	ikey_parsing@k,w,c
  2685  000DA2  0D10               	mullw	16
  2686  000DA4  50F3               	movf	prodl,w,c
  2687  000DA6  0F6A               	addlw	low (_key+10)
  2688  000DA8  6ED9               	movwf	fsr2l,c
  2689  000DAA  6ADA               	clrf	fsr2h,c
  2690  000DAC  0100               	movlb	0	; () banked
  2691  000DAE  BCDF               	btfsc	indf2,6,c
  2692  000DB0  D008               	goto	l311
  2693                           
  2694                           ; BSR set to: 0
  2695                           ;ikb.c: 726: {;ikb.c: 727: key[k].sm1 = (9);
  2696  000DB2  5023               	movf	ikey_parsing@k,w,c
  2697  000DB4  0D10               	mullw	16
  2698  000DB6  50F3               	movf	prodl,w,c
  2699  000DB8  0F66               	addlw	low (_key+6)
  2700  000DBA  6ED9               	movwf	fsr2l,c
  2701  000DBC  6ADA               	clrf	fsr2h,c
  2702  000DBE  0E09               	movlw	9
  2703  000DC0  6EDF               	movwf	indf2,c
  2704  000DC2                     l311:
  2705                           
  2706                           ;ikb.c: 728: };ikb.c: 729: };ikb.c: 731: if (key[k].sm1 == (9))
  2707  000DC2  5023               	movf	ikey_parsing@k,w,c
  2708  000DC4  0D10               	mullw	16
  2709  000DC6  50F3               	movf	prodl,w,c
  2710  000DC8  0F66               	addlw	low (_key+6)
  2711  000DCA  6ED9               	movwf	fsr2l,c
  2712  000DCC  6ADA               	clrf	fsr2h,c
  2713  000DCE  0E09               	movlw	9
  2714  000DD0  18DE               	xorwf	postinc2,w,c
  2715  000DD2  A4D8               	btfss	status,2,c
  2716  000DD4  D02F               	goto	l2653
  2717                           
  2718                           ;ikb.c: 732: {;ikb.c: 733: if (key[k].num_group_x > 0)
  2719  000DD6  5023               	movf	ikey_parsing@k,w,c
  2720  000DD8  0D10               	mullw	16
  2721  000DDA  50F3               	movf	prodl,w,c
  2722  000DDC  0F69               	addlw	low (_key+9)
  2723  000DDE  6ED9               	movwf	fsr2l,c
  2724  000DE0  6ADA               	clrf	fsr2h,c
  2725  000DE2  50DF               	movf	indf2,w,c
  2726  000DE4  B4D8               	btfsc	status,2,c
  2727  000DE6  D016               	goto	l314
  2728                           
  2729                           ;ikb.c: 734: {;ikb.c: 735: group_x[key[k].num_group_x] = 0;
  2730  000DE8  5023               	movf	ikey_parsing@k,w,c
  2731  000DEA  0D10               	mullw	16
  2732  000DEC  50F3               	movf	prodl,w,c
  2733  000DEE  0F69               	addlw	low (_key+9)
  2734  000DF0  6ED9               	movwf	fsr2l,c
  2735  000DF2  6ADA               	clrf	fsr2h,c
  2736  000DF4  50DF               	movf	indf2,w,c
  2737  000DF6  6E1F               	movwf	??_ikey_parsing& (0+255),c
  2738  000DF8  501F               	movf	??_ikey_parsing,w,c
  2739  000DFA  0FB0               	addlw	low _group_x
  2740  000DFC  6ED9               	movwf	fsr2l,c
  2741  000DFE  6ADA               	clrf	fsr2h,c
  2742  000E00  0E00               	movlw	0
  2743  000E02  6EDF               	movwf	indf2,c
  2744                           
  2745                           ;ikb.c: 736: key[k].bf.OwnerOfGroup = 0;
  2746  000E04  5023               	movf	ikey_parsing@k,w,c
  2747  000E06  0D10               	mullw	16
  2748  000E08  50F3               	movf	prodl,w,c
  2749  000E0A  0F6B               	addlw	low (_key+11)
  2750  000E0C  6ED9               	movwf	fsr2l,c
  2751  000E0E  6ADA               	clrf	fsr2h,c
  2752  000E10  0100               	movlb	0	; () banked
  2753  000E12  90DF               	bcf	indf2,0,c
  2754  000E14                     l314:
  2755                           
  2756                           ;ikb.c: 737: };ikb.c: 739: key[k].sm1 = (0);
  2757  000E14  5023               	movf	ikey_parsing@k,w,c
  2758  000E16  0D10               	mullw	16
  2759  000E18  50F3               	movf	prodl,w,c
  2760  000E1A  0F66               	addlw	low (_key+6)
  2761  000E1C  6ED9               	movwf	fsr2l,c
  2762  000E1E  6ADA               	clrf	fsr2h,c
  2763  000E20  0E00               	movlw	0
  2764  000E22  6EDF               	movwf	indf2,c
  2765                           
  2766                           ;ikb.c: 742: key[k].bf.InProcessing = 0;
  2767  000E24  5023               	movf	ikey_parsing@k,w,c
  2768  000E26  0D10               	mullw	16
  2769  000E28  50F3               	movf	prodl,w,c
  2770  000E2A  0F6B               	addlw	low (_key+11)
  2771  000E2C  6ED9               	movwf	fsr2l,c
  2772  000E2E  6ADA               	clrf	fsr2h,c
  2773  000E30  0100               	movlb	0	; () banked
  2774  000E32  92DF               	bcf	indf2,1,c
  2775  000E34                     l2653:
  2776  000E34  2A23               	incf	ikey_parsing@k,f,c
  2777  000E36  0E04               	movlw	4
  2778  000E38  6423               	cpfsgt	ikey_parsing@k,c
  2779  000E3A  D4EB               	goto	l2567
  2780  000E3C  0012               	return	
  2781  000E3E                     __end_of_ikey_parsing:
  2782                           	opt callstack 0
  2783                           
  2784 ;; *************** function _ikey_is_accessible *****************
  2785 ;; Defined at:
  2786 ;;		line 510 in file "../../../../../../FIRWAR/eslibrary/ikb/ikb.c"
  2787 ;; Parameters:    Size  Location     Type
  2788 ;;  k               1    wreg     unsigned char 
  2789 ;; Auto vars:     Size  Location     Type
  2790 ;;  k               1   12[COMRAM] unsigned char 
  2791 ;; Return value:  Size  Location     Type
  2792 ;;                  1    wreg      unsigned char 
  2793 ;; Registers used:
  2794 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  2795 ;; Tracked objects:
  2796 ;;		On entry : 0/0
  2797 ;;		On exit  : 0/0
  2798 ;;		Unchanged: 0/0
  2799 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2800 ;;      Params:         0       0       0       0       0       0       0       0       0
  2801 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2802 ;;      Temps:          2       0       0       0       0       0       0       0       0
  2803 ;;      Totals:         3       0       0       0       0       0       0       0       0
  2804 ;;Total ram usage:        3 bytes
  2805 ;; Hardware stack levels used:    1
  2806 ;; Hardware stack levels required when called:    5
  2807 ;; This function calls:
  2808 ;;		Nothing
  2809 ;; This function is called by:
  2810 ;;		_ikey_parsing
  2811 ;; This function uses a non-reentrant model
  2812 ;;
  2813                           
  2814                           	psect	text12
  2815  00178A                     __ptext12:
  2816                           	opt callstack 0
  2817  00178A                     _ikey_is_accessible:
  2818                           	opt callstack 23
  2819                           
  2820                           ;incstack = 0
  2821                           ;ikey_is_accessible@k stored from wreg
  2822  00178A  6E0D               	movwf	ikey_is_accessible@k,c
  2823                           
  2824                           ;ikb.c: 512: if (key[k].num_group_x != 0)
  2825  00178C  500D               	movf	ikey_is_accessible@k,w,c
  2826  00178E  0D10               	mullw	16
  2827  001790  50F3               	movf	prodl,w,c
  2828  001792  0F69               	addlw	low (_key+9)
  2829  001794  6ED9               	movwf	fsr2l,c
  2830  001796  6ADA               	clrf	fsr2h,c
  2831  001798  50DF               	movf	indf2,w,c
  2832  00179A  B4D8               	btfsc	status,2,c
  2833  00179C  D01A               	goto	l2437
  2834                           
  2835                           ;ikb.c: 513: {;ikb.c: 515: if (group_x[key[k].num_group_x] == 1)
  2836  00179E  500D               	movf	ikey_is_accessible@k,w,c
  2837  0017A0  0D10               	mullw	16
  2838  0017A2  50F3               	movf	prodl,w,c
  2839  0017A4  0F69               	addlw	low (_key+9)
  2840  0017A6  6ED9               	movwf	fsr2l,c
  2841  0017A8  6ADA               	clrf	fsr2h,c
  2842  0017AA  50DF               	movf	indf2,w,c
  2843  0017AC  6E0B               	movwf	??_ikey_is_accessible& (0+255),c
  2844  0017AE  500B               	movf	??_ikey_is_accessible,w,c
  2845  0017B0  0FB0               	addlw	low _group_x
  2846  0017B2  6ED9               	movwf	fsr2l,c
  2847  0017B4  6ADA               	clrf	fsr2h,c
  2848  0017B6  04DE               	decf	postinc2,w,c
  2849  0017B8  A4D8               	btfss	status,2,c
  2850  0017BA  D00B               	goto	l2437
  2851                           
  2852                           ;ikb.c: 516: {;ikb.c: 518: if ( !key[k].bf.OwnerOfGroup)
  2853  0017BC  500D               	movf	ikey_is_accessible@k,w,c
  2854  0017BE  0D10               	mullw	16
  2855  0017C0  50F3               	movf	prodl,w,c
  2856  0017C2  0F6B               	addlw	low (_key+11)
  2857  0017C4  6ED9               	movwf	fsr2l,c
  2858  0017C6  6ADA               	clrf	fsr2h,c
  2859  0017C8  0100               	movlb	0	; () banked
  2860  0017CA  B0DF               	btfsc	indf2,0,c
  2861  0017CC  D002               	goto	l2437
  2862                           
  2863                           ; BSR set to: 0
  2864                           ;ikb.c: 519: {;ikb.c: 520: return 0;
  2865  0017CE  0E00               	movlw	0
  2866  0017D0  0012               	return	
  2867  0017D2                     l2437:
  2868                           
  2869                           ;ikb.c: 521: };ikb.c: 522: };ikb.c: 523: };ikb.c: 524: return 1;
  2870  0017D2  0E01               	movlw	1
  2871  0017D4  0012               	return		;funcret
  2872  0017D6                     __end_of_ikey_is_accessible:
  2873                           	opt callstack 0
  2874                           
  2875 ;; *************** function ___lwtoft *****************
  2876 ;; Defined at:
  2877 ;;		line 28 in file "/opt/microchip/xc8/v2.05/pic/sources/c90/common/lwtoft.c"
  2878 ;; Parameters:    Size  Location     Type
  2879 ;;  c               2   18[COMRAM] unsigned int 
  2880 ;; Auto vars:     Size  Location     Type
  2881 ;;		None
  2882 ;; Return value:  Size  Location     Type
  2883 ;;                  3   18[COMRAM] float 
  2884 ;; Registers used:
  2885 ;;		wreg, status,2, status,0, cstack
  2886 ;; Tracked objects:
  2887 ;;		On entry : 0/0
  2888 ;;		On exit  : 0/0
  2889 ;;		Unchanged: 0/0
  2890 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2891 ;;      Params:         3       0       0       0       0       0       0       0       0
  2892 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2893 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2894 ;;      Totals:         3       0       0       0       0       0       0       0       0
  2895 ;;Total ram usage:        3 bytes
  2896 ;; Hardware stack levels used:    1
  2897 ;; Hardware stack levels required when called:    6
  2898 ;; This function calls:
  2899 ;;		___ftpack
  2900 ;; This function is called by:
  2901 ;;		_ikey_parsing
  2902 ;; This function uses a non-reentrant model
  2903 ;;
  2904                           
  2905                           	psect	text13
  2906  001A02                     __ptext13:
  2907                           	opt callstack 0
  2908  001A02                     ___lwtoft:
  2909                           	opt callstack 22
  2910                           
  2911                           ;incstack = 0
  2912  001A02  C013  F00B         	movff	___lwtoft@c,___ftpack@arg
  2913  001A06  C014  F00C         	movff	___lwtoft@c+1,___ftpack@arg+1
  2914  001A0A  6A0D               	clrf	___ftpack@arg+2,c
  2915  001A0C  0E8E               	movlw	142
  2916  001A0E  6E0E               	movwf	___ftpack@exp,c
  2917  001A10  0E00               	movlw	0
  2918  001A12  6E0F               	movwf	___ftpack@sign,c
  2919  001A14  EC30  F009         	call	___ftpack	;wreg free
  2920  001A18  C00B  F013         	movff	?___ftpack,?___lwtoft
  2921  001A1C  C00C  F014         	movff	?___ftpack+1,?___lwtoft+1
  2922  001A20  C00D  F015         	movff	?___ftpack+2,?___lwtoft+2
  2923  001A24  0012               	return		;funcret
  2924  001A26                     __end_of___lwtoft:
  2925                           	opt callstack 0
  2926                           
  2927 ;; *************** function ___ftpack *****************
  2928 ;; Defined at:
  2929 ;;		line 62 in file "/opt/microchip/xc8/v2.05/pic/sources/c90/common/float.c"
  2930 ;; Parameters:    Size  Location     Type
  2931 ;;  arg             3   10[COMRAM] unsigned um
  2932 ;;  exp             1   13[COMRAM] unsigned char 
  2933 ;;  sign            1   14[COMRAM] unsigned char 
  2934 ;; Auto vars:     Size  Location     Type
  2935 ;;		None
  2936 ;; Return value:  Size  Location     Type
  2937 ;;                  3   10[COMRAM] float 
  2938 ;; Registers used:
  2939 ;;		wreg, status,2, status,0
  2940 ;; Tracked objects:
  2941 ;;		On entry : 0/0
  2942 ;;		On exit  : 0/0
  2943 ;;		Unchanged: 0/0
  2944 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2945 ;;      Params:         5       0       0       0       0       0       0       0       0
  2946 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2947 ;;      Temps:          3       0       0       0       0       0       0       0       0
  2948 ;;      Totals:         8       0       0       0       0       0       0       0       0
  2949 ;;Total ram usage:        8 bytes
  2950 ;; Hardware stack levels used:    1
  2951 ;; Hardware stack levels required when called:    5
  2952 ;; This function calls:
  2953 ;;		Nothing
  2954 ;; This function is called by:
  2955 ;;		___lwtoft
  2956 ;; This function uses a non-reentrant model
  2957 ;;
  2958                           
  2959                           	psect	text14
  2960  001260                     __ptext14:
  2961                           	opt callstack 0
  2962  001260                     ___ftpack:
  2963                           	opt callstack 22
  2964                           
  2965                           ;incstack = 0
  2966  001260  500E               	movf	___ftpack@exp,w,c
  2967  001262  B4D8               	btfsc	status,2,c
  2968  001264  D005               	goto	u1440
  2969  001266  500B               	movf	___ftpack@arg,w,c
  2970  001268  100C               	iorwf	___ftpack@arg+1,w,c
  2971  00126A  100D               	iorwf	___ftpack@arg+2,w,c
  2972  00126C  A4D8               	btfss	status,2,c
  2973  00126E  D00C               	goto	l2351
  2974  001270                     u1440:
  2975  001270  0E00               	movlw	0
  2976  001272  6E0B               	movwf	?___ftpack,c
  2977  001274  0E00               	movlw	0
  2978  001276  6E0C               	movwf	?___ftpack+1,c
  2979  001278  0E00               	movlw	0
  2980  00127A  6E0D               	movwf	?___ftpack+2,c
  2981  00127C  0012               	return	
  2982  00127E                     l2349:
  2983  00127E  2A0E               	incf	___ftpack@exp,f,c
  2984  001280  90D8               	bcf	status,0,c
  2985  001282  320D               	rrcf	___ftpack@arg+2,f,c
  2986  001284  320C               	rrcf	___ftpack@arg+1,f,c
  2987  001286  320B               	rrcf	___ftpack@arg,f,c
  2988  001288                     l2351:
  2989  001288  0E00               	movlw	0
  2990  00128A  140B               	andwf	___ftpack@arg,w,c
  2991  00128C  6E10               	movwf	??___ftpack& (0+255),c
  2992  00128E  0E00               	movlw	0
  2993  001290  140C               	andwf	___ftpack@arg+1,w,c
  2994  001292  6E11               	movwf	(??___ftpack+1)& (0+255),c
  2995  001294  0EFE               	movlw	254
  2996  001296  140D               	andwf	___ftpack@arg+2,w,c
  2997  001298  6E12               	movwf	(??___ftpack+2)& (0+255),c
  2998  00129A  5010               	movf	??___ftpack,w,c
  2999  00129C  1011               	iorwf	??___ftpack+1,w,c
  3000  00129E  1012               	iorwf	??___ftpack+2,w,c
  3001  0012A0  B4D8               	btfsc	status,2,c
  3002  0012A2  D00C               	goto	l2357
  3003  0012A4  D7EC               	goto	l2349
  3004  0012A6                     l2353:
  3005  0012A6  2A0E               	incf	___ftpack@exp,f,c
  3006  0012A8  0E01               	movlw	1
  3007  0012AA  260B               	addwf	___ftpack@arg,f,c
  3008  0012AC  0E00               	movlw	0
  3009  0012AE  220C               	addwfc	___ftpack@arg+1,f,c
  3010  0012B0  0E00               	movlw	0
  3011  0012B2  220D               	addwfc	___ftpack@arg+2,f,c
  3012  0012B4  90D8               	bcf	status,0,c
  3013  0012B6  320D               	rrcf	___ftpack@arg+2,f,c
  3014  0012B8  320C               	rrcf	___ftpack@arg+1,f,c
  3015  0012BA  320B               	rrcf	___ftpack@arg,f,c
  3016  0012BC                     l2357:
  3017  0012BC  0E00               	movlw	0
  3018  0012BE  140B               	andwf	___ftpack@arg,w,c
  3019  0012C0  6E10               	movwf	??___ftpack& (0+255),c
  3020  0012C2  0E00               	movlw	0
  3021  0012C4  140C               	andwf	___ftpack@arg+1,w,c
  3022  0012C6  6E11               	movwf	(??___ftpack+1)& (0+255),c
  3023  0012C8  0EFF               	movlw	255
  3024  0012CA  140D               	andwf	___ftpack@arg+2,w,c
  3025  0012CC  6E12               	movwf	(??___ftpack+2)& (0+255),c
  3026  0012CE  5010               	movf	??___ftpack,w,c
  3027  0012D0  1011               	iorwf	??___ftpack+1,w,c
  3028  0012D2  1012               	iorwf	??___ftpack+2,w,c
  3029  0012D4  B4D8               	btfsc	status,2,c
  3030  0012D6  D006               	goto	l2361
  3031  0012D8  D7E6               	goto	l2353
  3032  0012DA                     l2359:
  3033  0012DA  060E               	decf	___ftpack@exp,f,c
  3034  0012DC  90D8               	bcf	status,0,c
  3035  0012DE  360B               	rlcf	___ftpack@arg,f,c
  3036  0012E0  360C               	rlcf	___ftpack@arg+1,f,c
  3037  0012E2  360D               	rlcf	___ftpack@arg+2,f,c
  3038  0012E4                     l2361:
  3039  0012E4  BE0C               	btfsc	___ftpack@arg+1,7,c
  3040  0012E6  D003               	goto	u1480
  3041  0012E8  0E02               	movlw	2
  3042  0012EA  600E               	cpfslt	___ftpack@exp,c
  3043  0012EC  D7F6               	goto	l2359
  3044  0012EE                     u1480:
  3045  0012EE  A00E               	btfss	___ftpack@exp,0,c
  3046  0012F0  9E0C               	bcf	___ftpack@arg+1,7,c
  3047  0012F2  90D8               	bcf	status,0,c
  3048  0012F4  320E               	rrcf	___ftpack@exp,f,c
  3049  0012F6  500E               	movf	___ftpack@exp,w,c
  3050  0012F8  120D               	iorwf	___ftpack@arg+2,f,c
  3051  0012FA  500F               	movf	___ftpack@sign,w,c
  3052  0012FC  A4D8               	btfss	status,2,c
  3053  0012FE  8E0D               	bsf	___ftpack@arg+2,7,c
  3054  001300  C00B  F00B         	movff	___ftpack@arg,?___ftpack
  3055  001304  C00C  F00C         	movff	___ftpack@arg+1,?___ftpack+1
  3056  001308  C00D  F00D         	movff	___ftpack@arg+2,?___ftpack+2
  3057  00130C  0012               	return		;funcret
  3058  00130E                     __end_of___ftpack:
  3059                           	opt callstack 0
  3060                           
  3061 ;; *************** function ___ftge *****************
  3062 ;; Defined at:
  3063 ;;		line 4 in file "/opt/microchip/xc8/v2.05/pic/sources/c90/common/ftge.c"
  3064 ;; Parameters:    Size  Location     Type
  3065 ;;  ff1             3   21[COMRAM] float 
  3066 ;;  ff2             3   24[COMRAM] float 
  3067 ;; Auto vars:     Size  Location     Type
  3068 ;;		None
  3069 ;; Return value:  Size  Location     Type
  3070 ;;		None               void
  3071 ;; Registers used:
  3072 ;;		wreg, status,2, status,0
  3073 ;; Tracked objects:
  3074 ;;		On entry : 0/0
  3075 ;;		On exit  : 0/0
  3076 ;;		Unchanged: 0/0
  3077 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3078 ;;      Params:         6       0       0       0       0       0       0       0       0
  3079 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3080 ;;      Temps:          3       0       0       0       0       0       0       0       0
  3081 ;;      Totals:         9       0       0       0       0       0       0       0       0
  3082 ;;Total ram usage:        9 bytes
  3083 ;; Hardware stack levels used:    1
  3084 ;; Hardware stack levels required when called:    5
  3085 ;; This function calls:
  3086 ;;		Nothing
  3087 ;; This function is called by:
  3088 ;;		_ikey_parsing
  3089 ;;		_disp7s_write_f
  3090 ;; This function uses a non-reentrant model
  3091 ;;
  3092                           
  3093                           	psect	text15
  3094  00153A                     __ptext15:
  3095                           	opt callstack 0
  3096  00153A                     ___ftge:
  3097                           	opt callstack 23
  3098                           
  3099                           ;incstack = 0
  3100  00153A  AE18               	btfss	___ftge@ff1+2,7,c
  3101  00153C  D00F               	goto	l2503
  3102  00153E  0E00               	movlw	0
  3103  001540  6E1C               	movwf	??___ftge& (0+255),c
  3104  001542  0E00               	movlw	0
  3105  001544  6E1D               	movwf	(??___ftge+1)& (0+255),c
  3106  001546  0E80               	movlw	128
  3107  001548  6E1E               	movwf	(??___ftge+2)& (0+255),c
  3108  00154A  5016               	movf	___ftge@ff1,w,c
  3109  00154C  5C1C               	subwf	??___ftge,w,c
  3110  00154E  6E16               	movwf	___ftge@ff1,c
  3111  001550  5017               	movf	___ftge@ff1+1,w,c
  3112  001552  581D               	subwfb	??___ftge+1,w,c
  3113  001554  6E17               	movwf	___ftge@ff1+1,c
  3114  001556  5018               	movf	___ftge@ff1+2,w,c
  3115  001558  581E               	subwfb	??___ftge+2,w,c
  3116  00155A  6E18               	movwf	___ftge@ff1+2,c
  3117  00155C                     l2503:
  3118  00155C  AE1B               	btfss	___ftge@ff2+2,7,c
  3119  00155E  D00F               	goto	l2507
  3120  001560  0E00               	movlw	0
  3121  001562  6E1C               	movwf	??___ftge& (0+255),c
  3122  001564  0E00               	movlw	0
  3123  001566  6E1D               	movwf	(??___ftge+1)& (0+255),c
  3124  001568  0E80               	movlw	128
  3125  00156A  6E1E               	movwf	(??___ftge+2)& (0+255),c
  3126  00156C  5019               	movf	___ftge@ff2,w,c
  3127  00156E  5C1C               	subwf	??___ftge,w,c
  3128  001570  6E19               	movwf	___ftge@ff2,c
  3129  001572  501A               	movf	___ftge@ff2+1,w,c
  3130  001574  581D               	subwfb	??___ftge+1,w,c
  3131  001576  6E1A               	movwf	___ftge@ff2+1,c
  3132  001578  501B               	movf	___ftge@ff2+2,w,c
  3133  00157A  581E               	subwfb	??___ftge+2,w,c
  3134  00157C  6E1B               	movwf	___ftge@ff2+2,c
  3135  00157E                     l2507:
  3136  00157E  0E00               	movlw	0
  3137  001580  1A16               	xorwf	___ftge@ff1,f,c
  3138  001582  0E00               	movlw	0
  3139  001584  1A17               	xorwf	___ftge@ff1+1,f,c
  3140  001586  0E80               	movlw	128
  3141  001588  1A18               	xorwf	___ftge@ff1+2,f,c
  3142  00158A  0E00               	movlw	0
  3143  00158C  1A19               	xorwf	___ftge@ff2,f,c
  3144  00158E  0E00               	movlw	0
  3145  001590  1A1A               	xorwf	___ftge@ff2+1,f,c
  3146  001592  0E80               	movlw	128
  3147  001594  1A1B               	xorwf	___ftge@ff2+2,f,c
  3148  001596  5019               	movf	___ftge@ff2,w,c
  3149  001598  5C16               	subwf	___ftge@ff1,w,c
  3150  00159A  501A               	movf	___ftge@ff2+1,w,c
  3151  00159C  5817               	subwfb	___ftge@ff1+1,w,c
  3152  00159E  501B               	movf	___ftge@ff2+2,w,c
  3153  0015A0  5818               	subwfb	___ftge@ff1+2,w,c
  3154  0015A2  B0D8               	btfsc	status,0,c
  3155  0015A4  D002               	goto	l2513
  3156  0015A6  90D8               	bcf	status,0,c
  3157  0015A8  0012               	return	
  3158  0015AA                     l2513:
  3159  0015AA  80D8               	bsf	status,0,c
  3160  0015AC  0012               	return		;funcret
  3161  0015AE                     __end_of___ftge:
  3162                           	opt callstack 0
  3163                           
  3164 ;; *************** function _ikb_init *****************
  3165 ;; Defined at:
  3166 ;;		line 217 in file "../../../../../../FIRWAR/eslibrary/ikb/ikb.c"
  3167 ;; Parameters:    Size  Location     Type
  3168 ;;		None
  3169 ;; Auto vars:     Size  Location     Type
  3170 ;;  i               1   10[COMRAM] char 
  3171 ;; Return value:  Size  Location     Type
  3172 ;;                  1    wreg      void 
  3173 ;; Registers used:
  3174 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  3175 ;; Tracked objects:
  3176 ;;		On entry : 0/0
  3177 ;;		On exit  : 3F/0
  3178 ;;		Unchanged: 0/0
  3179 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3180 ;;      Params:         0       0       0       0       0       0       0       0       0
  3181 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3182 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3183 ;;      Totals:         1       0       0       0       0       0       0       0       0
  3184 ;;Total ram usage:        1 bytes
  3185 ;; Hardware stack levels used:    1
  3186 ;; Hardware stack levels required when called:    5
  3187 ;; This function calls:
  3188 ;;		Nothing
  3189 ;; This function is called by:
  3190 ;;		_main
  3191 ;; This function uses a non-reentrant model
  3192 ;;
  3193                           
  3194                           	psect	text16
  3195  0011AA                     __ptext16:
  3196                           	opt callstack 0
  3197  0011AA                     _ikb_init:
  3198                           	opt callstack 25
  3199                           
  3200                           ;incstack = 0
  3201                           ;ikb.c: 219: int8_t i;;ikb.c: 389: do{TRISC |= 1<<4;}while(0);
  3202  0011AA  8894               	bsf	3988,4,c	;volatile
  3203                           
  3204                           ;ikb.c: 390: do{TRISC |= 1<<5;}while(0);
  3205  0011AC  8A94               	bsf	3988,5,c	;volatile
  3206                           
  3207                           ;ikb.c: 391: do{TRISC |= 1<<6;}while(0);
  3208  0011AE  8C94               	bsf	3988,6,c	;volatile
  3209                           
  3210                           ;ikb.c: 392: do{TRISC |= 1<<7;}while(0);
  3211  0011B0  8E94               	bsf	3988,7,c	;volatile
  3212                           
  3213                           ;ikb.c: 393: do{TRISD |= 1<<4;}while(0);
  3214  0011B2  8895               	bsf	3989,4,c	;volatile
  3215                           
  3216                           ;ikb.c: 394: key[0].keyRead = keyRead_pin_key1;
  3217  0011B4  0E06               	movlw	low _keyRead_pin_key1
  3218  0011B6  0100               	movlb	0	; () banked
  3219  0011B8  6F60               	movwf	_key& (0+255),b	;volatile
  3220  0011BA  0E1B               	movlw	high _keyRead_pin_key1
  3221  0011BC  6F61               	movwf	(_key+1)& (0+255),b	;volatile
  3222                           
  3223                           ; BSR set to: 0
  3224                           ;ikb.c: 395: key[1].keyRead = keyRead_pin_key2;
  3225  0011BE  0ECA               	movlw	low _keyRead_pin_key2
  3226  0011C0  6F70               	movwf	(_key+16)& (0+255),b	;volatile
  3227  0011C2  0E1A               	movlw	high _keyRead_pin_key2
  3228  0011C4  6F71               	movwf	(_key+17)& (0+255),b	;volatile
  3229                           
  3230                           ; BSR set to: 0
  3231                           ;ikb.c: 396: key[2].keyRead = keyRead_pin_key3;
  3232  0011C6  0EC0               	movlw	low _keyRead_pin_key3
  3233  0011C8  6F80               	movwf	(_key+32)& (0+255),b	;volatile
  3234  0011CA  0E1A               	movlw	high _keyRead_pin_key3
  3235  0011CC  6F81               	movwf	(_key+33)& (0+255),b	;volatile
  3236                           
  3237                           ; BSR set to: 0
  3238                           ;ikb.c: 397: key[3].keyRead = keyRead_pin_key4;
  3239  0011CE  0E16               	movlw	low _keyRead_pin_key4
  3240  0011D0  6F90               	movwf	(_key+48)& (0+255),b	;volatile
  3241  0011D2  0E1B               	movlw	high _keyRead_pin_key4
  3242  0011D4  6F91               	movwf	(_key+49)& (0+255),b	;volatile
  3243                           
  3244                           ; BSR set to: 0
  3245                           ;ikb.c: 398: key[4].keyRead = keyRead_pin_key5;
  3246  0011D6  0E0E               	movlw	low _keyRead_pin_key5
  3247  0011D8  6FA0               	movwf	(_key+64)& (0+255),b	;volatile
  3248  0011DA  0E1B               	movlw	high _keyRead_pin_key5
  3249  0011DC  6FA1               	movwf	(_key+65)& (0+255),b	;volatile
  3250                           
  3251                           ; BSR set to: 0
  3252                           ;ikb.c: 401: for (i=0; i<5; i++)
  3253  0011DE  0E00               	movlw	0
  3254  0011E0  6E0B               	movwf	ikb_init@i,c
  3255  0011E2                     l2847:
  3256                           
  3257                           ; BSR set to: 0
  3258                           ;ikb.c: 402: {;ikb.c: 403: key[i].bf.OnKeyPressed = 1;
  3259  0011E2  500B               	movf	ikb_init@i,w,c
  3260  0011E4  0D10               	mullw	16
  3261  0011E6  50F3               	movf	prodl,w,c
  3262  0011E8  0F6A               	addlw	low (_key+10)
  3263  0011EA  6ED9               	movwf	fsr2l,c
  3264  0011EC  6ADA               	clrf	fsr2h,c
  3265  0011EE  82DF               	bsf	indf2,1,c
  3266                           
  3267                           ;ikb.c: 404: key[i].bf.OnKeyPressedAndKeyRelease = 0;
  3268  0011F0  500B               	movf	ikb_init@i,w,c
  3269  0011F2  0D10               	mullw	16
  3270  0011F4  50F3               	movf	prodl,w,c
  3271  0011F6  0F6A               	addlw	low (_key+10)
  3272  0011F8  6ED9               	movwf	fsr2l,c
  3273  0011FA  6ADA               	clrf	fsr2h,c
  3274  0011FC  94DF               	bcf	indf2,2,c
  3275                           
  3276                           ;ikb.c: 405: key[i].bf.AtTimeExpired = 0;
  3277  0011FE  500B               	movf	ikb_init@i,w,c
  3278  001200  0D10               	mullw	16
  3279  001202  50F3               	movf	prodl,w,c
  3280  001204  0F6A               	addlw	low (_key+10)
  3281  001206  6ED9               	movwf	fsr2l,c
  3282  001208  6ADA               	clrf	fsr2h,c
  3283  00120A  96DF               	bcf	indf2,3,c
  3284                           
  3285                           ;ikb.c: 406: key[i].bf.Reptt = 0;
  3286  00120C  500B               	movf	ikb_init@i,w,c
  3287  00120E  0D10               	mullw	16
  3288  001210  50F3               	movf	prodl,w,c
  3289  001212  0F6A               	addlw	low (_key+10)
  3290  001214  6ED9               	movwf	fsr2l,c
  3291  001216  6ADA               	clrf	fsr2h,c
  3292  001218  9ADF               	bcf	indf2,5,c
  3293                           
  3294                           ;ikb.c: 407: key[i].num_group_x = 0;
  3295  00121A  500B               	movf	ikb_init@i,w,c
  3296  00121C  0D10               	mullw	16
  3297  00121E  50F3               	movf	prodl,w,c
  3298  001220  0F69               	addlw	low (_key+9)
  3299  001222  6ED9               	movwf	fsr2l,c
  3300  001224  6ADA               	clrf	fsr2h,c
  3301  001226  0E00               	movlw	0
  3302  001228  6EDF               	movwf	indf2,c
  3303                           
  3304                           ;ikb.c: 408: key[i].repp.to_start= (uint16_t)500.0/5;
  3305  00122A  500B               	movf	ikb_init@i,w,c
  3306  00122C  0D10               	mullw	16
  3307  00122E  50F3               	movf	prodl,w,c
  3308  001230  0F6C               	addlw	low (_key+12)
  3309  001232  6ED9               	movwf	fsr2l,c
  3310  001234  6ADA               	clrf	fsr2h,c
  3311  001236  0E64               	movlw	100
  3312  001238  6EDE               	movwf	postinc2,c
  3313  00123A  0E00               	movlw	0
  3314  00123C  6EDD               	movwf	postdec2,c
  3315                           
  3316                           ;ikb.c: 409: key[i].repp.after_start = (uint16_t)200.0/5;
  3317  00123E  500B               	movf	ikb_init@i,w,c
  3318  001240  0D10               	mullw	16
  3319  001242  50F3               	movf	prodl,w,c
  3320  001244  0F6E               	addlw	low (_key+14)
  3321  001246  6ED9               	movwf	fsr2l,c
  3322  001248  6ADA               	clrf	fsr2h,c
  3323  00124A  0E28               	movlw	40
  3324  00124C  6EDE               	movwf	postinc2,c
  3325  00124E  0E00               	movlw	0
  3326  001250  6EDD               	movwf	postdec2,c
  3327                           
  3328                           ; BSR set to: 0
  3329  001252  2A0B               	incf	ikb_init@i,f,c
  3330                           
  3331                           ; BSR set to: 0
  3332  001254  500B               	movf	ikb_init@i,w,c
  3333  001256  0A80               	xorlw	128
  3334  001258  0F7B               	addlw	-133
  3335  00125A  B0D8               	btfsc	status,0,c
  3336  00125C  0012               	return	
  3337  00125E  D7C1               	goto	l2847
  3338  001260                     __end_of_ikb_init:
  3339                           	opt callstack 0
  3340                           
  3341 ;; *************** function _ikb_flush *****************
  3342 ;; Defined at:
  3343 ;;		line 419 in file "../../../../../../FIRWAR/eslibrary/ikb/ikb.c"
  3344 ;; Parameters:    Size  Location     Type
  3345 ;;		None
  3346 ;; Auto vars:     Size  Location     Type
  3347 ;;		None
  3348 ;; Return value:  Size  Location     Type
  3349 ;;                  1    wreg      void 
  3350 ;; Registers used:
  3351 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3352 ;; Tracked objects:
  3353 ;;		On entry : 0/0
  3354 ;;		On exit  : 3F/0
  3355 ;;		Unchanged: 0/0
  3356 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3357 ;;      Params:         0       0       0       0       0       0       0       0       0
  3358 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3359 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3360 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3361 ;;Total ram usage:        0 bytes
  3362 ;; Hardware stack levels used:    1
  3363 ;; Hardware stack levels required when called:    6
  3364 ;; This function calls:
  3365 ;;		_ikey_clear_all_flag
  3366 ;; This function is called by:
  3367 ;;		_main
  3368 ;; This function uses a non-reentrant model
  3369 ;;
  3370                           
  3371                           	psect	text17
  3372  001B1C                     __ptext17:
  3373                           	opt callstack 0
  3374  001B1C                     _ikb_flush:
  3375                           	opt callstack 24
  3376                           
  3377                           ;ikb.c: 421: ikey_clear_all_flag();
  3378                           
  3379                           ; BSR set to: 0
  3380                           ;incstack = 0
  3381  001B1C  EC24  F00D         	call	_ikey_clear_all_flag	;wreg free
  3382                           
  3383                           ; BSR set to: 0
  3384  001B20  0012               	return		;funcret
  3385  001B22                     __end_of_ikb_flush:
  3386                           	opt callstack 0
  3387                           
  3388 ;; *************** function _ikey_clear_all_flag *****************
  3389 ;; Defined at:
  3390 ;;		line 761 in file "../../../../../../FIRWAR/eslibrary/ikb/ikb.c"
  3391 ;; Parameters:    Size  Location     Type
  3392 ;;		None
  3393 ;; Auto vars:     Size  Location     Type
  3394 ;;  i               1   10[COMRAM] unsigned char 
  3395 ;; Return value:  Size  Location     Type
  3396 ;;                  1    wreg      void 
  3397 ;; Registers used:
  3398 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  3399 ;; Tracked objects:
  3400 ;;		On entry : 0/0
  3401 ;;		On exit  : 3F/0
  3402 ;;		Unchanged: 0/0
  3403 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3404 ;;      Params:         0       0       0       0       0       0       0       0       0
  3405 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3406 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3407 ;;      Totals:         1       0       0       0       0       0       0       0       0
  3408 ;;Total ram usage:        1 bytes
  3409 ;; Hardware stack levels used:    1
  3410 ;; Hardware stack levels required when called:    5
  3411 ;; This function calls:
  3412 ;;		Nothing
  3413 ;; This function is called by:
  3414 ;;		_ikb_flush
  3415 ;; This function uses a non-reentrant model
  3416 ;;
  3417                           
  3418                           	psect	text18
  3419  001A48                     __ptext18:
  3420                           	opt callstack 0
  3421  001A48                     _ikey_clear_all_flag:
  3422                           	opt callstack 24
  3423                           
  3424                           ;ikb.c: 763: uint8_t i;;ikb.c: 764: for (i=0; i<5; i++)
  3425                           
  3426                           ; BSR set to: 0
  3427                           ;incstack = 0
  3428  001A48  0E00               	movlw	0
  3429  001A4A  6E0B               	movwf	ikey_clear_all_flag@i,c
  3430  001A4C                     l2663:
  3431                           
  3432                           ;ikb.c: 765: {;ikb.c: 767: key[i].bf.ReadyToRead = 0;
  3433  001A4C  500B               	movf	ikey_clear_all_flag@i,w,c
  3434  001A4E  0D10               	mullw	16
  3435  001A50  50F3               	movf	prodl,w,c
  3436  001A52  0F6A               	addlw	low (_key+10)
  3437  001A54  6ED9               	movwf	fsr2l,c
  3438  001A56  6ADA               	clrf	fsr2h,c
  3439  001A58  0100               	movlb	0	; () banked
  3440  001A5A  9CDF               	bcf	indf2,6,c
  3441                           
  3442                           ; BSR set to: 0
  3443  001A5C  2A0B               	incf	ikey_clear_all_flag@i,f,c
  3444                           
  3445                           ; BSR set to: 0
  3446  001A5E  0E04               	movlw	4
  3447  001A60  640B               	cpfsgt	ikey_clear_all_flag@i,c
  3448  001A62  D7F4               	goto	l2663
  3449  001A64  0012               	return	
  3450  001A66                     __end_of_ikey_clear_all_flag:
  3451                           	opt callstack 0
  3452                           
  3453 ;; *************** function _disp7s_qtyDisp_writeInt *****************
  3454 ;; Defined at:
  3455 ;;		line 254 in file "display.c"
  3456 ;; Parameters:    Size  Location     Type
  3457 ;;  num             2   41[COMRAM] int 
  3458 ;; Auto vars:     Size  Location     Type
  3459 ;;		None
  3460 ;; Return value:  Size  Location     Type
  3461 ;;                  1    wreg      void 
  3462 ;; Registers used:
  3463 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3464 ;; Tracked objects:
  3465 ;;		On entry : 3F/0
  3466 ;;		On exit  : 3F/0
  3467 ;;		Unchanged: 0/0
  3468 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3469 ;;      Params:         2       0       0       0       0       0       0       0       0
  3470 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3471 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3472 ;;      Totals:         2       0       0       0       0       0       0       0       0
  3473 ;;Total ram usage:        2 bytes
  3474 ;; Hardware stack levels used:    1
  3475 ;; Hardware stack levels required when called:    9
  3476 ;; This function calls:
  3477 ;;		_disp7s_write_i
  3478 ;; This function is called by:
  3479 ;;		_main
  3480 ;; This function uses a non-reentrant model
  3481 ;;
  3482                           
  3483                           	psect	text19
  3484  001A82                     __ptext19:
  3485                           	opt callstack 0
  3486  001A82                     _disp7s_qtyDisp_writeInt:
  3487                           	opt callstack 21
  3488                           
  3489                           ; BSR set to: 0
  3490                           ;display.c: 256: disp7s_write_i(pulsonic.disp7s.qty, 3, num);
  3491                           
  3492                           ; BSR set to: 0
  3493                           ;incstack = 0
  3494  001A82  0E3B               	movlw	low (_pulsonic+59)
  3495  001A84  6E20               	movwf	disp7s_write_i@pDisp,c
  3496  001A86  0E01               	movlw	high (_pulsonic+59)
  3497  001A88  6E21               	movwf	disp7s_write_i@pDisp+1,c
  3498  001A8A  0E03               	movlw	3
  3499  001A8C  6E22               	movwf	disp7s_write_i@NUM_OF_DISP,c
  3500  001A8E  C02A  F023         	movff	disp7s_qtyDisp_writeInt@num,disp7s_write_i@num
  3501  001A92  C02B  F024         	movff	disp7s_qtyDisp_writeInt@num+1,disp7s_write_i@num+1
  3502  001A96  ECEF  F007         	call	_disp7s_write_i	;wreg free
  3503                           
  3504                           ; BSR set to: 0
  3505  001A9A  0012               	return		;funcret
  3506  001A9C                     __end_of_disp7s_qtyDisp_writeInt:
  3507                           	opt callstack 0
  3508                           
  3509 ;; *************** function _disp7s_modeDisp_writeInt *****************
  3510 ;; Defined at:
  3511 ;;		line 258 in file "display.c"
  3512 ;; Parameters:    Size  Location     Type
  3513 ;;  num             2   41[COMRAM] int 
  3514 ;; Auto vars:     Size  Location     Type
  3515 ;;		None
  3516 ;; Return value:  Size  Location     Type
  3517 ;;                  1    wreg      void 
  3518 ;; Registers used:
  3519 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3520 ;; Tracked objects:
  3521 ;;		On entry : 0/0
  3522 ;;		On exit  : 3F/0
  3523 ;;		Unchanged: 0/0
  3524 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3525 ;;      Params:         2       0       0       0       0       0       0       0       0
  3526 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3527 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3528 ;;      Totals:         2       0       0       0       0       0       0       0       0
  3529 ;;Total ram usage:        2 bytes
  3530 ;; Hardware stack levels used:    1
  3531 ;; Hardware stack levels required when called:    9
  3532 ;; This function calls:
  3533 ;;		_disp7s_write_i
  3534 ;; This function is called by:
  3535 ;;		_main
  3536 ;; This function uses a non-reentrant model
  3537 ;;
  3538                           
  3539                           	psect	text20
  3540  001A9C                     __ptext20:
  3541                           	opt callstack 0
  3542  001A9C                     _disp7s_modeDisp_writeInt:
  3543                           	opt callstack 21
  3544                           
  3545                           ;display.c: 260: disp7s_write_i(pulsonic.disp7s.mode, 2, num);
  3546                           
  3547                           ; BSR set to: 0
  3548                           ;incstack = 0
  3549  001A9C  0E3E               	movlw	low (_pulsonic+62)
  3550  001A9E  6E20               	movwf	disp7s_write_i@pDisp,c
  3551  001AA0  0E01               	movlw	high (_pulsonic+62)
  3552  001AA2  6E21               	movwf	disp7s_write_i@pDisp+1,c
  3553  001AA4  0E02               	movlw	2
  3554  001AA6  6E22               	movwf	disp7s_write_i@NUM_OF_DISP,c
  3555  001AA8  C02A  F023         	movff	disp7s_modeDisp_writeInt@num,disp7s_write_i@num
  3556  001AAC  C02B  F024         	movff	disp7s_modeDisp_writeInt@num+1,disp7s_write_i@num+1
  3557  001AB0  ECEF  F007         	call	_disp7s_write_i	;wreg free
  3558                           
  3559                           ; BSR set to: 0
  3560  001AB4  0012               	return		;funcret
  3561  001AB6                     __end_of_disp7s_modeDisp_writeInt:
  3562                           	opt callstack 0
  3563                           
  3564 ;; *************** function _disp7s_write_i *****************
  3565 ;; Defined at:
  3566 ;;		line 224 in file "display.c"
  3567 ;; Parameters:    Size  Location     Type
  3568 ;;  pDisp           2   31[COMRAM] PTR unsigned char 
  3569 ;;		 -> pulsonic.disp7s(5), pulsonic(64), 
  3570 ;;  NUM_OF_DISP     1   33[COMRAM] char 
  3571 ;;  num             2   34[COMRAM] int 
  3572 ;; Auto vars:     Size  Location     Type
  3573 ;;  buff           10    0[BANK0 ] unsigned char [10]
  3574 ;;  K10MULT         2   11[BANK0 ] int 
  3575 ;;  i               1   13[BANK0 ] char 
  3576 ;;  pi              1   10[BANK0 ] char 
  3577 ;; Return value:  Size  Location     Type
  3578 ;;                  1    wreg      void 
  3579 ;; Registers used:
  3580 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3581 ;; Tracked objects:
  3582 ;;		On entry : 0/0
  3583 ;;		On exit  : 3F/0
  3584 ;;		Unchanged: 0/0
  3585 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3586 ;;      Params:         5       0       0       0       0       0       0       0       0
  3587 ;;      Locals:         0      14       0       0       0       0       0       0       0
  3588 ;;      Temps:          5       0       0       0       0       0       0       0       0
  3589 ;;      Totals:        10      14       0       0       0       0       0       0       0
  3590 ;;Total ram usage:       24 bytes
  3591 ;; Hardware stack levels used:    1
  3592 ;; Hardware stack levels required when called:    8
  3593 ;; This function calls:
  3594 ;;		___wmul
  3595 ;;		_itoa
  3596 ;;		_strlen
  3597 ;; This function is called by:
  3598 ;;		_disp7s_qtyDisp_writeInt
  3599 ;;		_disp7s_modeDisp_writeInt
  3600 ;; This function uses a non-reentrant model
  3601 ;;
  3602                           
  3603                           	psect	text21
  3604  000FDE                     __ptext21:
  3605                           	opt callstack 0
  3606  000FDE                     _disp7s_write_i:
  3607                           	opt callstack 21
  3608                           
  3609                           ;display.c: 226: int16_t K10MULT;;display.c: 227: char buff[10];;display.c: 228: int8_t 
      +                          i;;display.c: 229: int8_t pi;;display.c: 231: K10MULT = 1;
  3610                           
  3611                           ; BSR set to: 0
  3612                           ;incstack = 0
  3613  000FDE  0E00               	movlw	0
  3614  000FE0  0100               	movlb	0	; () banked
  3615  000FE2  6FDD               	movwf	(disp7s_write_i@K10MULT+1)& (0+255),b
  3616  000FE4  0E01               	movlw	1
  3617  000FE6  6FDC               	movwf	disp7s_write_i@K10MULT& (0+255),b
  3618                           
  3619                           ; BSR set to: 0
  3620                           ;display.c: 232: i = NUM_OF_DISP;
  3621  000FE8  C022  F0DE         	movff	disp7s_write_i@NUM_OF_DISP,disp7s_write_i@i
  3622                           
  3623                           ;display.c: 233: while (i--)
  3624  000FEC  D00E               	goto	l3233
  3625  000FEE                     l3231:
  3626                           
  3627                           ; BSR set to: 0
  3628                           ;display.c: 234: {K10MULT *=10;}
  3629  000FEE  C0DC  F00B         	movff	disp7s_write_i@K10MULT,___wmul@multiplier
  3630  000FF2  C0DD  F00C         	movff	disp7s_write_i@K10MULT+1,___wmul@multiplier+1
  3631  000FF6  0E00               	movlw	0
  3632  000FF8  6E0E               	movwf	___wmul@multiplicand+1,c
  3633  000FFA  0E0A               	movlw	10
  3634  000FFC  6E0D               	movwf	___wmul@multiplicand,c
  3635  000FFE  ECEE  F00C         	call	___wmul	;wreg free
  3636  001002  C00B  F0DC         	movff	?___wmul,disp7s_write_i@K10MULT
  3637  001006  C00C  F0DD         	movff	?___wmul+1,disp7s_write_i@K10MULT+1
  3638  00100A                     l3233:
  3639  00100A  0100               	movlb	0	; () banked
  3640  00100C  07DE               	decf	disp7s_write_i@i& (0+255),f,b
  3641  00100E  29DE               	incf	disp7s_write_i@i& (0+255),w,b
  3642  001010  A4D8               	btfss	status,2,c
  3643  001012  D7ED               	goto	l3231
  3644                           
  3645                           ; BSR set to: 0
  3646                           ;display.c: 236: if (num >= K10MULT)
  3647  001014  51DC               	movf	disp7s_write_i@K10MULT& (0+255),w,b
  3648  001016  5C23               	subwf	disp7s_write_i@num,w,c
  3649  001018  5024               	movf	disp7s_write_i@num+1,w,c
  3650  00101A  0A80               	xorlw	128
  3651  00101C  6E25               	movwf	??_disp7s_write_i& (0+255),c
  3652  00101E  51DD               	movf	(disp7s_write_i@K10MULT+1)& (0+255),w,b
  3653  001020  0A80               	xorlw	128
  3654  001022  5825               	subwfb	??_disp7s_write_i& (0+255),w,c
  3655  001024  A0D8               	btfss	status,0,c
  3656  001026  D006               	goto	l3239
  3657                           
  3658                           ; BSR set to: 0
  3659                           ;display.c: 237: {num= K10MULT-1;}
  3660  001028  0EFF               	movlw	255
  3661  00102A  25DC               	addwf	disp7s_write_i@K10MULT& (0+255),w,b
  3662  00102C  6E23               	movwf	disp7s_write_i@num,c
  3663  00102E  0EFF               	movlw	255
  3664  001030  21DD               	addwfc	(disp7s_write_i@K10MULT+1)& (0+255),w,b
  3665  001032  6E24               	movwf	disp7s_write_i@num+1,c
  3666  001034                     l3239:
  3667                           
  3668                           ; BSR set to: 0
  3669                           ;display.c: 239: itoa(buff, num, 10);
  3670  001034  0ED1               	movlw	low disp7s_write_i@buff
  3671  001036  6E1A               	movwf	itoa@buf,c
  3672  001038  C023  F01B         	movff	disp7s_write_i@num,itoa@val
  3673  00103C  C024  F01C         	movff	disp7s_write_i@num+1,itoa@val+1
  3674  001040  0E00               	movlw	0
  3675  001042  6E1E               	movwf	itoa@base+1,c
  3676  001044  0E0A               	movlw	10
  3677  001046  6E1D               	movwf	itoa@base,c
  3678  001048  ECD5  F00C         	call	_itoa	;wreg free
  3679                           
  3680                           ;display.c: 242: for (i=0; i<NUM_OF_DISP; i++)
  3681  00104C  0E00               	movlw	0
  3682  00104E  0100               	movlb	0	; () banked
  3683  001050  6FDE               	movwf	disp7s_write_i@i& (0+255),b
  3684  001052  D013               	goto	l3247
  3685  001054                     l3243:
  3686                           
  3687                           ; BSR set to: 0
  3688                           ;display.c: 243: {pDisp[i] = DISP7S_CHARS[OFF];}
  3689  001054  0E0B               	movlw	low _DISP7S_CHARS
  3690  001056  6EF6               	movwf	tblptrl,c
  3691  001058                     	if	1	;There is more than 1 active tblptr byte
  3692  001058  0E08               	movlw	high _DISP7S_CHARS
  3693  00105A  6EF7               	movwf	tblptrh,c
  3694  00105C                     	endif
  3695  00105C                     	if	0	;There are less than 3 active tblptr bytes
  3696  00105C                     	endif
  3697  00105C  C0DE  F025         	movff	disp7s_write_i@i,??_disp7s_write_i
  3698  001060  6A26               	clrf	(??_disp7s_write_i+1)& (0+255),c
  3699  001062  BE25               	btfsc	??_disp7s_write_i& (0+255),7,c
  3700  001064  0626               	decf	(??_disp7s_write_i+1)& (0+255),f,c
  3701  001066  5025               	movf	??_disp7s_write_i,w,c
  3702  001068  2420               	addwf	disp7s_write_i@pDisp,w,c
  3703  00106A  6ED9               	movwf	fsr2l,c
  3704  00106C  5026               	movf	??_disp7s_write_i+1,w,c
  3705  00106E  2021               	addwfc	disp7s_write_i@pDisp+1,w,c
  3706  001070  6EDA               	movwf	fsr2h,c
  3707  001072  0008               	tblrd		*
  3708  001074  CFF5 FFDF          	movff	tablat,indf2
  3709                           
  3710                           ; BSR set to: 0
  3711  001078  2BDE               	incf	disp7s_write_i@i& (0+255),f,b
  3712  00107A                     l3247:
  3713                           
  3714                           ; BSR set to: 0
  3715  00107A  51DE               	movf	disp7s_write_i@i& (0+255),w,b
  3716  00107C  0A80               	xorlw	128
  3717  00107E  6E25               	movwf	??_disp7s_write_i& (0+255),c
  3718  001080  5022               	movf	disp7s_write_i@NUM_OF_DISP,w,c
  3719  001082  0A80               	xorlw	128
  3720  001084  5C25               	subwf	??_disp7s_write_i& (0+255),w,c
  3721  001086  A0D8               	btfss	status,0,c
  3722  001088  D7E5               	goto	l3243
  3723                           
  3724                           ; BSR set to: 0
  3725                           ;display.c: 245: i=0;
  3726  00108A  0E00               	movlw	0
  3727  00108C  6FDE               	movwf	disp7s_write_i@i& (0+255),b
  3728                           
  3729                           ; BSR set to: 0
  3730                           ;display.c: 246: pi = strlen(buff)-1;
  3731  00108E  0ED1               	movlw	low disp7s_write_i@buff
  3732  001090  6E0B               	movwf	strlen@s,c
  3733  001092  EC13  F00D         	call	_strlen	;wreg free
  3734  001096  040B               	decf	?_strlen,w,c
  3735  001098  6FDB               	movwf	disp7s_write_i@pi& (0+255),b
  3736                           
  3737                           ;display.c: 247: while (buff[i] != '\0')
  3738  00109A  D021               	goto	l3259
  3739  00109C                     l3253:
  3740                           
  3741                           ; BSR set to: 0
  3742                           ;display.c: 248: {;display.c: 249: pDisp[pi--] |= DISP7S_NUMS[ buff[i] - 0x30 ];
  3743  00109C  51DE               	movf	disp7s_write_i@i& (0+255),w,b
  3744  00109E  0FD1               	addlw	low disp7s_write_i@buff
  3745  0010A0  6ED9               	movwf	fsr2l,c
  3746  0010A2  6ADA               	clrf	fsr2h,c
  3747  0010A4  50DF               	movf	indf2,w,c
  3748  0010A6  6E25               	movwf	??_disp7s_write_i& (0+255),c
  3749  0010A8  0ED0               	movlw	208
  3750  0010AA  2625               	addwf	??_disp7s_write_i,f,c
  3751  0010AC  5025               	movf	??_disp7s_write_i,w,c
  3752  0010AE  0F01               	addlw	low _DISP7S_NUMS
  3753  0010B0  6E26               	movwf	(??_disp7s_write_i+1)& (0+255),c
  3754  0010B2  C026  FFF6         	movff	??_disp7s_write_i+1,tblptrl
  3755  0010B6                     	if	1	;There is more than 1 active tblptr byte
  3756  0010B6  0E08               	movlw	high __smallconst
  3757  0010B8  6EF7               	movwf	tblptrh,c
  3758  0010BA                     	endif
  3759  0010BA                     	if	0	;tblptru may be non-zero
  3760  0010BA                     	endif
  3761  0010BA                     	if	0	;tblptru may be non-zero
  3762  0010BA                     	endif
  3763  0010BA  0008               	tblrd		*
  3764  0010BC  CFF5 F027          	movff	tablat,??_disp7s_write_i+2
  3765  0010C0  C0DB  F028         	movff	disp7s_write_i@pi,??_disp7s_write_i+3
  3766  0010C4  6A29               	clrf	(??_disp7s_write_i+4)& (0+255),c
  3767  0010C6  BE28               	btfsc	(??_disp7s_write_i+3)& (0+255),7,c
  3768  0010C8  0629               	decf	(??_disp7s_write_i+4)& (0+255),f,c
  3769  0010CA  5028               	movf	??_disp7s_write_i+3,w,c
  3770  0010CC  2420               	addwf	disp7s_write_i@pDisp,w,c
  3771  0010CE  6ED9               	movwf	fsr2l,c
  3772  0010D0  5029               	movf	??_disp7s_write_i+4,w,c
  3773  0010D2  2021               	addwfc	disp7s_write_i@pDisp+1,w,c
  3774  0010D4  6EDA               	movwf	fsr2h,c
  3775  0010D6  5027               	movf	??_disp7s_write_i+2,w,c
  3776  0010D8  12DF               	iorwf	indf2,f,c
  3777                           
  3778                           ; BSR set to: 0
  3779  0010DA  07DB               	decf	disp7s_write_i@pi& (0+255),f,b
  3780                           
  3781                           ; BSR set to: 0
  3782                           ;display.c: 250: i++;
  3783  0010DC  2BDE               	incf	disp7s_write_i@i& (0+255),f,b
  3784  0010DE                     l3259:
  3785                           
  3786                           ; BSR set to: 0
  3787  0010DE  51DE               	movf	disp7s_write_i@i& (0+255),w,b
  3788  0010E0  0FD1               	addlw	low disp7s_write_i@buff
  3789  0010E2  6ED9               	movwf	fsr2l,c
  3790  0010E4  6ADA               	clrf	fsr2h,c
  3791  0010E6  50DF               	movf	indf2,w,c
  3792  0010E8  B4D8               	btfsc	status,2,c
  3793  0010EA  0012               	return	
  3794  0010EC  D7D7               	goto	l3253
  3795  0010EE                     __end_of_disp7s_write_i:
  3796                           	opt callstack 0
  3797                           
  3798 ;; *************** function _strlen *****************
  3799 ;; Defined at:
  3800 ;;		line 4 in file "/opt/microchip/xc8/v2.05/pic/sources/c90/common/strlen.c"
  3801 ;; Parameters:    Size  Location     Type
  3802 ;;  s               1   10[COMRAM] PTR const unsigned char 
  3803 ;;		 -> disp7s_write_i@buff(10), 
  3804 ;; Auto vars:     Size  Location     Type
  3805 ;;  cp              1   12[COMRAM] PTR const unsigned char 
  3806 ;;		 -> disp7s_write_i@buff(10), 
  3807 ;; Return value:  Size  Location     Type
  3808 ;;                  2   10[COMRAM] unsigned int 
  3809 ;; Registers used:
  3810 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3811 ;; Tracked objects:
  3812 ;;		On entry : 3F/0
  3813 ;;		On exit  : 3F/0
  3814 ;;		Unchanged: 3F/0
  3815 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3816 ;;      Params:         2       0       0       0       0       0       0       0       0
  3817 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3818 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3819 ;;      Totals:         3       0       0       0       0       0       0       0       0
  3820 ;;Total ram usage:        3 bytes
  3821 ;; Hardware stack levels used:    1
  3822 ;; Hardware stack levels required when called:    5
  3823 ;; This function calls:
  3824 ;;		Nothing
  3825 ;; This function is called by:
  3826 ;;		_disp7s_write_i
  3827 ;; This function uses a non-reentrant model
  3828 ;;
  3829                           
  3830                           	psect	text22
  3831  001A26                     __ptext22:
  3832                           	opt callstack 0
  3833  001A26                     _strlen:
  3834                           	opt callstack 23
  3835                           
  3836                           ; BSR set to: 0
  3837                           
  3838                           ; BSR set to: 0
  3839                           ;incstack = 0
  3840  001A26  C00B  F00D         	movff	strlen@s,strlen@cp
  3841  001A2A  D001               	goto	l3155
  3842  001A2C                     l3153:
  3843                           
  3844                           ; BSR set to: 0
  3845  001A2C  2A0D               	incf	strlen@cp,f,c
  3846  001A2E                     l3155:
  3847                           
  3848                           ; BSR set to: 0
  3849  001A2E  500D               	movf	strlen@cp,w,c
  3850  001A30  6ED9               	movwf	fsr2l,c
  3851  001A32  6ADA               	clrf	fsr2h,c
  3852  001A34  50DF               	movf	indf2,w,c
  3853  001A36  A4D8               	btfss	status,2,c
  3854  001A38  D7F9               	goto	l3153
  3855                           
  3856                           ; BSR set to: 0
  3857  001A3A  500B               	movf	strlen@s,w,c
  3858  001A3C  5C0D               	subwf	strlen@cp,w,c
  3859  001A3E  6E0B               	movwf	?_strlen,c
  3860  001A40  6A0C               	clrf	?_strlen+1,c
  3861  001A42  BE0B               	btfsc	?_strlen,7,c
  3862  001A44  060C               	decf	?_strlen+1,f,c
  3863                           
  3864                           ; BSR set to: 0
  3865  001A46  0012               	return		;funcret
  3866  001A48                     __end_of_strlen:
  3867                           	opt callstack 0
  3868                           
  3869 ;; *************** function _itoa *****************
  3870 ;; Defined at:
  3871 ;;		line 4 in file "/opt/microchip/xc8/v2.05/pic/sources/c90/common/itoa.c"
  3872 ;; Parameters:    Size  Location     Type
  3873 ;;  buf             1   25[COMRAM] PTR unsigned char 
  3874 ;;		 -> disp7s_write_i@buff(10), disp7s_write_f@buff(10), 
  3875 ;;  val             2   26[COMRAM] int 
  3876 ;;  base            2   28[COMRAM] int 
  3877 ;; Auto vars:     Size  Location     Type
  3878 ;;  cp              1    0        PTR unsigned char 
  3879 ;;		 -> disp7s_write_i@buff(10), disp7s_write_f@buff(10), 
  3880 ;; Return value:  Size  Location     Type
  3881 ;;                  1    wreg      PTR unsigned char 
  3882 ;; Registers used:
  3883 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3884 ;; Tracked objects:
  3885 ;;		On entry : 3F/0
  3886 ;;		On exit  : 0/0
  3887 ;;		Unchanged: 0/0
  3888 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3889 ;;      Params:         5       0       0       0       0       0       0       0       0
  3890 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3891 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3892 ;;      Totals:         6       0       0       0       0       0       0       0       0
  3893 ;;Total ram usage:        6 bytes
  3894 ;; Hardware stack levels used:    1
  3895 ;; Hardware stack levels required when called:    7
  3896 ;; This function calls:
  3897 ;;		_utoa
  3898 ;; This function is called by:
  3899 ;;		_disp7s_write_i
  3900 ;;		_disp7s_write_f
  3901 ;; This function uses a non-reentrant model
  3902 ;;
  3903                           
  3904                           	psect	text23
  3905  0019AA                     __ptext23:
  3906                           	opt callstack 0
  3907  0019AA                     _itoa:
  3908                           	opt callstack 21
  3909                           
  3910                           ; BSR set to: 0
  3911                           
  3912                           ; BSR set to: 0
  3913                           ;incstack = 0
  3914  0019AA  AE1C               	btfss	itoa@val+1,7,c
  3915  0019AC  D00A               	goto	l3147
  3916                           
  3917                           ; BSR set to: 0
  3918  0019AE  501A               	movf	itoa@buf,w,c
  3919  0019B0  6ED9               	movwf	fsr2l,c
  3920  0019B2  6ADA               	clrf	fsr2h,c
  3921  0019B4  0E2D               	movlw	45
  3922  0019B6  6EDF               	movwf	indf2,c
  3923                           
  3924                           ; BSR set to: 0
  3925  0019B8  2A1A               	incf	itoa@buf,f,c
  3926                           
  3927                           ; BSR set to: 0
  3928  0019BA  6C1B               	negf	itoa@val,c
  3929  0019BC  1E1C               	comf	itoa@val+1,f,c
  3930  0019BE  B0D8               	btfsc	status,0,c
  3931  0019C0  2A1C               	incf	itoa@val+1,f,c
  3932  0019C2                     l3147:
  3933                           
  3934                           ; BSR set to: 0
  3935  0019C2  C01A  F012         	movff	itoa@buf,utoa@buf
  3936  0019C6  C01B  F013         	movff	itoa@val,utoa@val
  3937  0019CA  C01C  F014         	movff	itoa@val+1,utoa@val+1
  3938  0019CE  C01D  F015         	movff	itoa@base,utoa@base
  3939  0019D2  C01E  F016         	movff	itoa@base+1,utoa@base+1
  3940  0019D6  ECD7  F009         	call	_utoa	;wreg free
  3941  0019DA  0012               	return		;funcret
  3942  0019DC                     __end_of_itoa:
  3943                           	opt callstack 0
  3944                           
  3945 ;; *************** function _utoa *****************
  3946 ;; Defined at:
  3947 ;;		line 17 in file "/opt/microchip/xc8/v2.05/pic/sources/c90/common/itoa.c"
  3948 ;; Parameters:    Size  Location     Type
  3949 ;;  buf             1   17[COMRAM] PTR unsigned char 
  3950 ;;		 -> disp7s_write_i@buff(10), disp7s_write_f@buff(10), 
  3951 ;;  val             2   18[COMRAM] unsigned int 
  3952 ;;  base            2   20[COMRAM] int 
  3953 ;; Auto vars:     Size  Location     Type
  3954 ;;  v               2   22[COMRAM] unsigned int 
  3955 ;;  c               1   24[COMRAM] unsigned char 
  3956 ;; Return value:  Size  Location     Type
  3957 ;;                  1    wreg      PTR unsigned char 
  3958 ;; Registers used:
  3959 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3960 ;; Tracked objects:
  3961 ;;		On entry : 3F/0
  3962 ;;		On exit  : 0/0
  3963 ;;		Unchanged: 0/0
  3964 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3965 ;;      Params:         5       0       0       0       0       0       0       0       0
  3966 ;;      Locals:         3       0       0       0       0       0       0       0       0
  3967 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3968 ;;      Totals:         8       0       0       0       0       0       0       0       0
  3969 ;;Total ram usage:        8 bytes
  3970 ;; Hardware stack levels used:    1
  3971 ;; Hardware stack levels required when called:    6
  3972 ;; This function calls:
  3973 ;;		___lwdiv
  3974 ;;		___lwmod
  3975 ;; This function is called by:
  3976 ;;		_itoa
  3977 ;; This function uses a non-reentrant model
  3978 ;;
  3979                           
  3980                           	psect	text24
  3981  0013AE                     __ptext24:
  3982                           	opt callstack 0
  3983  0013AE                     _utoa:
  3984                           	opt callstack 21
  3985                           
  3986                           ; BSR set to: 0
  3987                           
  3988                           ;incstack = 0
  3989  0013AE  C013  F017         	movff	utoa@val,utoa@v
  3990  0013B2  C014  F018         	movff	utoa@val+1,utoa@v+1
  3991  0013B6                     l3111:
  3992  0013B6  C017  F00B         	movff	utoa@v,___lwdiv@dividend
  3993  0013BA  C018  F00C         	movff	utoa@v+1,___lwdiv@dividend+1
  3994  0013BE  C015  F00D         	movff	utoa@base,___lwdiv@divisor
  3995  0013C2  C016  F00E         	movff	utoa@base+1,___lwdiv@divisor+1
  3996  0013C6  EC9C  F00B         	call	___lwdiv	;wreg free
  3997  0013CA  C00B  F017         	movff	?___lwdiv,utoa@v
  3998  0013CE  C00C  F018         	movff	?___lwdiv+1,utoa@v+1
  3999  0013D2  2A12               	incf	utoa@buf,f,c
  4000  0013D4  5017               	movf	utoa@v,w,c
  4001  0013D6  1018               	iorwf	utoa@v+1,w,c
  4002  0013D8  A4D8               	btfss	status,2,c
  4003  0013DA  D7ED               	goto	l3111
  4004  0013DC  5012               	movf	utoa@buf,w,c
  4005  0013DE  6ED9               	movwf	fsr2l,c
  4006  0013E0  6ADA               	clrf	fsr2h,c
  4007  0013E2  0E00               	movlw	0
  4008  0013E4  6EDF               	movwf	indf2,c
  4009  0013E6  0612               	decf	utoa@buf,f,c
  4010  0013E8                     l3121:
  4011  0013E8  C013  F00B         	movff	utoa@val,___lwmod@dividend
  4012  0013EC  C014  F00C         	movff	utoa@val+1,___lwmod@dividend+1
  4013  0013F0  C015  F00D         	movff	utoa@base,___lwmod@divisor
  4014  0013F4  C016  F00E         	movff	utoa@base+1,___lwmod@divisor+1
  4015  0013F8  EC57  F00C         	call	___lwmod	;wreg free
  4016  0013FC  500B               	movf	?___lwmod,w,c
  4017  0013FE  6E19               	movwf	utoa@c,c
  4018  001400  C013  F00B         	movff	utoa@val,___lwdiv@dividend
  4019  001404  C014  F00C         	movff	utoa@val+1,___lwdiv@dividend+1
  4020  001408  C015  F00D         	movff	utoa@base,___lwdiv@divisor
  4021  00140C  C016  F00E         	movff	utoa@base+1,___lwdiv@divisor+1
  4022  001410  EC9C  F00B         	call	___lwdiv	;wreg free
  4023  001414  C00B  F013         	movff	?___lwdiv,utoa@val
  4024  001418  C00C  F014         	movff	?___lwdiv+1,utoa@val+1
  4025  00141C  0E09               	movlw	9
  4026  00141E  6419               	cpfsgt	utoa@c,c
  4027  001420  D002               	goto	l1429
  4028  001422  0E07               	movlw	7
  4029  001424  2619               	addwf	utoa@c,f,c
  4030  001426                     l1429:
  4031  001426  0E30               	movlw	48
  4032  001428  2619               	addwf	utoa@c,f,c
  4033  00142A  5012               	movf	utoa@buf,w,c
  4034  00142C  6ED9               	movwf	fsr2l,c
  4035  00142E  6ADA               	clrf	fsr2h,c
  4036  001430  C019  FFDF         	movff	utoa@c,indf2
  4037  001434  0612               	decf	utoa@buf,f,c
  4038  001436  5013               	movf	utoa@val,w,c
  4039  001438  1014               	iorwf	utoa@val+1,w,c
  4040  00143A  A4D8               	btfss	status,2,c
  4041  00143C  D7D5               	goto	l3121
  4042                           
  4043                           ;	Return value of _utoa is never used
  4044  00143E  2A12               	incf	utoa@buf,f,c
  4045  001440  0012               	return		;funcret
  4046  001442                     __end_of_utoa:
  4047                           	opt callstack 0
  4048                           
  4049 ;; *************** function ___lwmod *****************
  4050 ;; Defined at:
  4051 ;;		line 7 in file "/opt/microchip/xc8/v2.05/pic/sources/c90/common/lwmod.c"
  4052 ;; Parameters:    Size  Location     Type
  4053 ;;  dividend        2   10[COMRAM] unsigned int 
  4054 ;;  divisor         2   12[COMRAM] unsigned int 
  4055 ;; Auto vars:     Size  Location     Type
  4056 ;;  counter         1   14[COMRAM] unsigned char 
  4057 ;; Return value:  Size  Location     Type
  4058 ;;                  2   10[COMRAM] unsigned int 
  4059 ;; Registers used:
  4060 ;;		wreg, status,2, status,0
  4061 ;; Tracked objects:
  4062 ;;		On entry : 0/0
  4063 ;;		On exit  : 0/0
  4064 ;;		Unchanged: 0/0
  4065 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4066 ;;      Params:         4       0       0       0       0       0       0       0       0
  4067 ;;      Locals:         1       0       0       0       0       0       0       0       0
  4068 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4069 ;;      Totals:         5       0       0       0       0       0       0       0       0
  4070 ;;Total ram usage:        5 bytes
  4071 ;; Hardware stack levels used:    1
  4072 ;; Hardware stack levels required when called:    5
  4073 ;; This function calls:
  4074 ;;		Nothing
  4075 ;; This function is called by:
  4076 ;;		_utoa
  4077 ;; This function uses a non-reentrant model
  4078 ;;
  4079                           
  4080                           	psect	text25
  4081  0018AE                     __ptext25:
  4082                           	opt callstack 0
  4083  0018AE                     ___lwmod:
  4084                           	opt callstack 21
  4085                           
  4086                           ;incstack = 0
  4087  0018AE  500D               	movf	___lwmod@divisor,w,c
  4088  0018B0  100E               	iorwf	___lwmod@divisor+1,w,c
  4089  0018B2  B4D8               	btfsc	status,2,c
  4090  0018B4  D018               	goto	l1247
  4091  0018B6  0E01               	movlw	1
  4092  0018B8  6E0F               	movwf	___lwmod@counter,c
  4093  0018BA  D004               	goto	l3099
  4094  0018BC                     l3097:
  4095  0018BC  90D8               	bcf	status,0,c
  4096  0018BE  360D               	rlcf	___lwmod@divisor,f,c
  4097  0018C0  360E               	rlcf	___lwmod@divisor+1,f,c
  4098  0018C2  2A0F               	incf	___lwmod@counter,f,c
  4099  0018C4                     l3099:
  4100  0018C4  AE0E               	btfss	___lwmod@divisor+1,7,c
  4101  0018C6  D7FA               	goto	l3097
  4102  0018C8                     u2770:
  4103  0018C8  500D               	movf	___lwmod@divisor,w,c
  4104  0018CA  5C0B               	subwf	___lwmod@dividend,w,c
  4105  0018CC  500E               	movf	___lwmod@divisor+1,w,c
  4106  0018CE  580C               	subwfb	___lwmod@dividend+1,w,c
  4107  0018D0  A0D8               	btfss	status,0,c
  4108  0018D2  D004               	goto	l3105
  4109  0018D4  500D               	movf	___lwmod@divisor,w,c
  4110  0018D6  5E0B               	subwf	___lwmod@dividend,f,c
  4111  0018D8  500E               	movf	___lwmod@divisor+1,w,c
  4112  0018DA  5A0C               	subwfb	___lwmod@dividend+1,f,c
  4113  0018DC                     l3105:
  4114  0018DC  90D8               	bcf	status,0,c
  4115  0018DE  320E               	rrcf	___lwmod@divisor+1,f,c
  4116  0018E0  320D               	rrcf	___lwmod@divisor,f,c
  4117  0018E2  2E0F               	decfsz	___lwmod@counter,f,c
  4118  0018E4  D7F1               	goto	u2770
  4119  0018E6                     l1247:
  4120  0018E6  C00B  F00B         	movff	___lwmod@dividend,?___lwmod
  4121  0018EA  C00C  F00C         	movff	___lwmod@dividend+1,?___lwmod+1
  4122  0018EE  0012               	return		;funcret
  4123  0018F0                     __end_of___lwmod:
  4124                           	opt callstack 0
  4125                           
  4126 ;; *************** function ___lwdiv *****************
  4127 ;; Defined at:
  4128 ;;		line 7 in file "/opt/microchip/xc8/v2.05/pic/sources/c90/common/lwdiv.c"
  4129 ;; Parameters:    Size  Location     Type
  4130 ;;  dividend        2   10[COMRAM] unsigned int 
  4131 ;;  divisor         2   12[COMRAM] unsigned int 
  4132 ;; Auto vars:     Size  Location     Type
  4133 ;;  quotient        2   15[COMRAM] unsigned int 
  4134 ;;  counter         1   14[COMRAM] unsigned char 
  4135 ;; Return value:  Size  Location     Type
  4136 ;;                  2   10[COMRAM] unsigned int 
  4137 ;; Registers used:
  4138 ;;		wreg, status,2, status,0
  4139 ;; Tracked objects:
  4140 ;;		On entry : 0/0
  4141 ;;		On exit  : 0/0
  4142 ;;		Unchanged: 0/0
  4143 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4144 ;;      Params:         4       0       0       0       0       0       0       0       0
  4145 ;;      Locals:         3       0       0       0       0       0       0       0       0
  4146 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4147 ;;      Totals:         7       0       0       0       0       0       0       0       0
  4148 ;;Total ram usage:        7 bytes
  4149 ;; Hardware stack levels used:    1
  4150 ;; Hardware stack levels required when called:    5
  4151 ;; This function calls:
  4152 ;;		Nothing
  4153 ;; This function is called by:
  4154 ;;		_utoa
  4155 ;; This function uses a non-reentrant model
  4156 ;;
  4157                           
  4158                           	psect	text26
  4159  001738                     __ptext26:
  4160                           	opt callstack 0
  4161  001738                     ___lwdiv:
  4162                           	opt callstack 21
  4163                           
  4164                           ;incstack = 0
  4165  001738  0E00               	movlw	0
  4166  00173A  6E11               	movwf	___lwdiv@quotient+1,c
  4167  00173C  0E00               	movlw	0
  4168  00173E  6E10               	movwf	___lwdiv@quotient,c
  4169  001740  500D               	movf	___lwdiv@divisor,w,c
  4170  001742  100E               	iorwf	___lwdiv@divisor+1,w,c
  4171  001744  B4D8               	btfsc	status,2,c
  4172  001746  D01C               	goto	l1237
  4173  001748  0E01               	movlw	1
  4174  00174A  6E0F               	movwf	___lwdiv@counter,c
  4175  00174C  D004               	goto	l3079
  4176  00174E                     l3077:
  4177  00174E  90D8               	bcf	status,0,c
  4178  001750  360D               	rlcf	___lwdiv@divisor,f,c
  4179  001752  360E               	rlcf	___lwdiv@divisor+1,f,c
  4180  001754  2A0F               	incf	___lwdiv@counter,f,c
  4181  001756                     l3079:
  4182  001756  AE0E               	btfss	___lwdiv@divisor+1,7,c
  4183  001758  D7FA               	goto	l3077
  4184  00175A                     u2740:
  4185  00175A  90D8               	bcf	status,0,c
  4186  00175C  3610               	rlcf	___lwdiv@quotient,f,c
  4187  00175E  3611               	rlcf	___lwdiv@quotient+1,f,c
  4188  001760  500D               	movf	___lwdiv@divisor,w,c
  4189  001762  5C0B               	subwf	___lwdiv@dividend,w,c
  4190  001764  500E               	movf	___lwdiv@divisor+1,w,c
  4191  001766  580C               	subwfb	___lwdiv@dividend+1,w,c
  4192  001768  A0D8               	btfss	status,0,c
  4193  00176A  D005               	goto	l3089
  4194  00176C  500D               	movf	___lwdiv@divisor,w,c
  4195  00176E  5E0B               	subwf	___lwdiv@dividend,f,c
  4196  001770  500E               	movf	___lwdiv@divisor+1,w,c
  4197  001772  5A0C               	subwfb	___lwdiv@dividend+1,f,c
  4198  001774  8010               	bsf	___lwdiv@quotient,0,c
  4199  001776                     l3089:
  4200  001776  90D8               	bcf	status,0,c
  4201  001778  320E               	rrcf	___lwdiv@divisor+1,f,c
  4202  00177A  320D               	rrcf	___lwdiv@divisor,f,c
  4203  00177C  2E0F               	decfsz	___lwdiv@counter,f,c
  4204  00177E  D7ED               	goto	u2740
  4205  001780                     l1237:
  4206  001780  C010  F00B         	movff	___lwdiv@quotient,?___lwdiv
  4207  001784  C011  F00C         	movff	___lwdiv@quotient+1,?___lwdiv+1
  4208  001788  0012               	return		;funcret
  4209  00178A                     __end_of___lwdiv:
  4210                           	opt callstack 0
  4211                           
  4212 ;; *************** function ___wmul *****************
  4213 ;; Defined at:
  4214 ;;		line 15 in file "/opt/microchip/xc8/v2.05/pic/sources/c90/common/Umul16.c"
  4215 ;; Parameters:    Size  Location     Type
  4216 ;;  multiplier      2   10[COMRAM] unsigned int 
  4217 ;;  multiplicand    2   12[COMRAM] unsigned int 
  4218 ;; Auto vars:     Size  Location     Type
  4219 ;;  product         2   14[COMRAM] unsigned int 
  4220 ;; Return value:  Size  Location     Type
  4221 ;;                  2   10[COMRAM] unsigned int 
  4222 ;; Registers used:
  4223 ;;		wreg, status,2, status,0, prodl, prodh
  4224 ;; Tracked objects:
  4225 ;;		On entry : 0/0
  4226 ;;		On exit  : 0/0
  4227 ;;		Unchanged: 0/0
  4228 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4229 ;;      Params:         4       0       0       0       0       0       0       0       0
  4230 ;;      Locals:         2       0       0       0       0       0       0       0       0
  4231 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4232 ;;      Totals:         6       0       0       0       0       0       0       0       0
  4233 ;;Total ram usage:        6 bytes
  4234 ;; Hardware stack levels used:    1
  4235 ;; Hardware stack levels required when called:    5
  4236 ;; This function calls:
  4237 ;;		Nothing
  4238 ;; This function is called by:
  4239 ;;		_disp7s_write_i
  4240 ;; This function uses a non-reentrant model
  4241 ;;
  4242                           
  4243                           	psect	text27
  4244  0019DC                     __ptext27:
  4245                           	opt callstack 0
  4246  0019DC                     ___wmul:
  4247                           	opt callstack 23
  4248                           
  4249                           ;incstack = 0
  4250  0019DC  500B               	movf	___wmul@multiplier,w,c
  4251  0019DE  020D               	mulwf	___wmul@multiplicand,c
  4252  0019E0  CFF3 F00F          	movff	prodl,___wmul@product
  4253  0019E4  CFF4 F010          	movff	prodh,___wmul@product+1
  4254  0019E8  500B               	movf	___wmul@multiplier,w,c
  4255  0019EA  020E               	mulwf	___wmul@multiplicand+1,c
  4256  0019EC  50F3               	movf	prodl,w,c
  4257  0019EE  2610               	addwf	___wmul@product+1,f,c
  4258  0019F0  500C               	movf	___wmul@multiplier+1,w,c
  4259  0019F2  020D               	mulwf	___wmul@multiplicand,c
  4260  0019F4  50F3               	movf	prodl,w,c
  4261  0019F6  2610               	addwf	___wmul@product+1,f,c
  4262  0019F8  C00F  F00B         	movff	___wmul@product,?___wmul
  4263  0019FC  C010  F00C         	movff	___wmul@product+1,?___wmul+1
  4264  001A00  0012               	return		;funcret
  4265  001A02                     __end_of___wmul:
  4266                           	opt callstack 0
  4267                           
  4268 ;; *************** function _disp7s_job *****************
  4269 ;; Defined at:
  4270 ;;		line 128 in file "display.c"
  4271 ;; Parameters:    Size  Location     Type
  4272 ;;		None
  4273 ;; Auto vars:     Size  Location     Type
  4274 ;;  pq              1   20[COMRAM] char 
  4275 ;; Return value:  Size  Location     Type
  4276 ;;                  1    wreg      void 
  4277 ;; Registers used:
  4278 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
  4279 ;; Tracked objects:
  4280 ;;		On entry : 0/0
  4281 ;;		On exit  : 0/0
  4282 ;;		Unchanged: 0/0
  4283 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4284 ;;      Params:         0       0       0       0       0       0       0       0       0
  4285 ;;      Locals:         1       0       0       0       0       0       0       0       0
  4286 ;;      Temps:          2       0       0       0       0       0       0       0       0
  4287 ;;      Totals:         3       0       0       0       0       0       0       0       0
  4288 ;;Total ram usage:        3 bytes
  4289 ;; Hardware stack levels used:    1
  4290 ;; Hardware stack levels required when called:    7
  4291 ;; This function calls:
  4292 ;;		_disp7s_mux0_off
  4293 ;;		_disp7s_mux0_on
  4294 ;;		_disp7s_mux1_off
  4295 ;;		_disp7s_mux1_on
  4296 ;;		_disp7s_mux2_off
  4297 ;;		_disp7s_mux2_on
  4298 ;;		_disp7s_mux3_off
  4299 ;;		_disp7s_mux3_on
  4300 ;;		_disp7s_mux4_off
  4301 ;;		_disp7s_mux4_on
  4302 ;;		_disp7s_mux_Q
  4303 ;; This function is called by:
  4304 ;;		_main
  4305 ;; This function uses a non-reentrant model
  4306 ;;
  4307                           
  4308                           	psect	text28
  4309  0014C2                     __ptext28:
  4310                           	opt callstack 0
  4311  0014C2                     _disp7s_job:
  4312                           	opt callstack 23
  4313                           
  4314                           ;display.c: 134: pq= q-1;
  4315                           
  4316                           ;incstack = 0
  4317  0014C2  043D               	decf	disp7s_job@q,w,c
  4318  0014C4  6E15               	movwf	disp7s_job@pq,c
  4319                           
  4320                           ;display.c: 135: if (pq<0)
  4321  0014C6  AE15               	btfss	disp7s_job@pq,7,c
  4322  0014C8  D002               	goto	l2909
  4323                           
  4324                           ;display.c: 136: {pq=(2 + 3)-1;}
  4325  0014CA  0E04               	movlw	4
  4326  0014CC  6E15               	movwf	disp7s_job@pq,c
  4327  0014CE                     l2909:
  4328                           
  4329                           ;display.c: 137: disp7s_mux[pq].Qonoff[0]();
  4330  0014CE  5015               	movf	disp7s_job@pq,w,c
  4331  0014D0  0D04               	mullw	4
  4332  0014D2  50F3               	movf	prodl,w,c
  4333  0014D4  0FB5               	addlw	low _disp7s_mux
  4334  0014D6  6ED9               	movwf	fsr2l,c
  4335  0014D8  6ADA               	clrf	fsr2h,c
  4336  0014DA  D801               	call	u2478
  4337  0014DC  D00A               	goto	u2479
  4338  0014DE                     u2478:
  4339  0014DE  0005               	push	
  4340  0014E0  6EFA               	movwf	pclath,c
  4341  0014E2  50DE               	movf	postinc2,w,c
  4342  0014E4  6EFD               	movwf	tosl,c
  4343  0014E6  50DE               	movf	postinc2,w,c
  4344  0014E8  6EFE               	movwf	tosh,c
  4345  0014EA  50F8               	movf	tblptru,w,c
  4346  0014EC  6EFF               	movwf	tosu,c
  4347  0014EE  50FA               	movf	pclath,w,c
  4348  0014F0  0012               	return		;indir
  4349  0014F2                     u2479:
  4350                           
  4351                           ;display.c: 139: if (q < 3)
  4352  0014F2  503D               	movf	disp7s_job@q,w,c
  4353  0014F4  0A80               	xorlw	128
  4354  0014F6  0F7D               	addlw	-131
  4355  0014F8  B0D8               	btfsc	status,0,c
  4356  0014FA  D007               	goto	l2915
  4357                           
  4358                           ;display.c: 140: {LATB = pulsonic.disp7s.qty[q];}
  4359  0014FC  0E3B               	movlw	low (_pulsonic+59)
  4360  0014FE  243D               	addwf	disp7s_job@q,w,c
  4361  001500  6ED9               	movwf	fsr2l,c
  4362  001502  6ADA               	clrf	fsr2h,c
  4363  001504  0E01               	movlw	high (_pulsonic+59)
  4364  001506  22DA               	addwfc	fsr2h,f,c
  4365  001508  D00B               	goto	L4
  4366  00150A                     l2915:
  4367                           
  4368                           ;display.c: 141: else;display.c: 142: {LATB = pulsonic.disp7s.mode[q-3];}
  4369  00150A  C03D  F013         	movff	disp7s_job@q,??_disp7s_job
  4370  00150E  6A14               	clrf	(??_disp7s_job+1)& (0+255),c
  4371  001510  BE13               	btfsc	??_disp7s_job& (0+255),7,c
  4372  001512  0614               	decf	(??_disp7s_job+1)& (0+255),f,c
  4373  001514  0E3B               	movlw	low (_pulsonic+59)
  4374  001516  2413               	addwf	??_disp7s_job,w,c
  4375  001518  6ED9               	movwf	fsr2l,c
  4376  00151A  0E01               	movlw	high (_pulsonic+59)
  4377  00151C  2014               	addwfc	??_disp7s_job+1,w,c
  4378  00151E  6EDA               	movwf	fsr2h,c
  4379  001520                     L4:
  4380  001520  50DF               	movf	indf2,w,c
  4381  001522  6E8A               	movwf	3978,c	;volatile
  4382                           
  4383                           ;display.c: 144: disp7s_mux_Q(q);
  4384  001524  503D               	movf	disp7s_job@q,w,c
  4385  001526  EC87  F009         	call	_disp7s_mux_Q
  4386                           
  4387                           ;display.c: 146: if (++q == (2 + 3))
  4388  00152A  2A3D               	incf	disp7s_job@q,f,c
  4389  00152C  0E05               	movlw	5
  4390  00152E  183D               	xorwf	disp7s_job@q,w,c
  4391  001530  A4D8               	btfss	status,2,c
  4392  001532  0012               	return	
  4393                           
  4394                           ;display.c: 147: {q=0x0;}
  4395  001534  0E00               	movlw	0
  4396  001536  6E3D               	movwf	disp7s_job@q,c
  4397  001538  0012               	return		;funcret
  4398  00153A                     __end_of_disp7s_job:
  4399                           	opt callstack 0
  4400                           
  4401 ;; *************** function _disp7s_mux_Q *****************
  4402 ;; Defined at:
  4403 ;;		line 97 in file "display.c"
  4404 ;; Parameters:    Size  Location     Type
  4405 ;;  q               1    wreg     char 
  4406 ;; Auto vars:     Size  Location     Type
  4407 ;;  q               1   16[COMRAM] char 
  4408 ;;  i               1   17[COMRAM] char 
  4409 ;; Return value:  Size  Location     Type
  4410 ;;                  1    wreg      void 
  4411 ;; Registers used:
  4412 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
  4413 ;; Tracked objects:
  4414 ;;		On entry : 0/0
  4415 ;;		On exit  : 0/0
  4416 ;;		Unchanged: 0/0
  4417 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4418 ;;      Params:         0       0       0       0       0       0       0       0       0
  4419 ;;      Locals:         2       0       0       0       0       0       0       0       0
  4420 ;;      Temps:          6       0       0       0       0       0       0       0       0
  4421 ;;      Totals:         8       0       0       0       0       0       0       0       0
  4422 ;;Total ram usage:        8 bytes
  4423 ;; Hardware stack levels used:    1
  4424 ;; Hardware stack levels required when called:    6
  4425 ;; This function calls:
  4426 ;;		_disp7s_mux0_off
  4427 ;;		_disp7s_mux0_on
  4428 ;;		_disp7s_mux1_off
  4429 ;;		_disp7s_mux1_on
  4430 ;;		_disp7s_mux2_off
  4431 ;;		_disp7s_mux2_on
  4432 ;;		_disp7s_mux3_off
  4433 ;;		_disp7s_mux3_on
  4434 ;;		_disp7s_mux4_off
  4435 ;;		_disp7s_mux4_on
  4436 ;; This function is called by:
  4437 ;;		_disp7s_job
  4438 ;; This function uses a non-reentrant model
  4439 ;;
  4440                           
  4441                           	psect	text29
  4442  00130E                     __ptext29:
  4443                           	opt callstack 0
  4444  00130E                     _disp7s_mux_Q:
  4445                           	opt callstack 23
  4446                           
  4447                           ;incstack = 0
  4448                           ;disp7s_mux_Q@q stored from wreg
  4449  00130E  6E11               	movwf	disp7s_mux_Q@q,c
  4450                           
  4451                           ;display.c: 99: int8_t i;;display.c: 100: for (i=0; i< (2 + 3); i++)
  4452  001310  0E00               	movlw	0
  4453  001312  6E12               	movwf	disp7s_mux_Q@i,c
  4454  001314                     l2725:
  4455                           
  4456                           ;display.c: 101: {;display.c: 102: if ( (1<<i) & (1<<q) )
  4457  001314  C011  F00B         	movff	disp7s_mux_Q@q,??_disp7s_mux_Q
  4458  001318  0E01               	movlw	1
  4459  00131A  6E0C               	movwf	(??_disp7s_mux_Q+1)& (0+255),c
  4460  00131C  0E00               	movlw	0
  4461  00131E  6E0D               	movwf	(??_disp7s_mux_Q+2)& (0+255),c
  4462  001320  2A0B               	incf	??_disp7s_mux_Q,f,c
  4463  001322  D003               	goto	u2244
  4464  001324                     u2245:
  4465  001324  90D8               	bcf	status,0,c
  4466  001326  360C               	rlcf	??_disp7s_mux_Q+1,f,c
  4467  001328  360D               	rlcf	??_disp7s_mux_Q+2,f,c
  4468  00132A                     u2244:
  4469  00132A  2E0B               	decfsz	??_disp7s_mux_Q,f,c
  4470  00132C  D7FB               	goto	u2245
  4471  00132E  C012  F00E         	movff	disp7s_mux_Q@i,??_disp7s_mux_Q+3
  4472  001332  0E01               	movlw	1
  4473  001334  6E0F               	movwf	(??_disp7s_mux_Q+4)& (0+255),c
  4474  001336  0E00               	movlw	0
  4475  001338  6E10               	movwf	(??_disp7s_mux_Q+5)& (0+255),c
  4476  00133A  2A0E               	incf	??_disp7s_mux_Q+3,f,c
  4477  00133C  D003               	goto	u2254
  4478  00133E                     u2255:
  4479  00133E  90D8               	bcf	status,0,c
  4480  001340  360F               	rlcf	??_disp7s_mux_Q+4,f,c
  4481  001342  3610               	rlcf	??_disp7s_mux_Q+5,f,c
  4482  001344                     u2254:
  4483  001344  2E0E               	decfsz	??_disp7s_mux_Q+3,f,c
  4484  001346  D7FB               	goto	u2255
  4485  001348  500C               	movf	??_disp7s_mux_Q+1,w,c
  4486  00134A  160F               	andwf	??_disp7s_mux_Q+4,f,c
  4487  00134C  500D               	movf	??_disp7s_mux_Q+2,w,c
  4488  00134E  1610               	andwf	??_disp7s_mux_Q+5,f,c
  4489  001350  500F               	movf	??_disp7s_mux_Q+4,w,c
  4490  001352  1010               	iorwf	??_disp7s_mux_Q+5,w,c
  4491  001354  B4D8               	btfsc	status,2,c
  4492  001356  D012               	goto	l2729
  4493                           
  4494                           ;display.c: 103: disp7s_mux[i].Qonoff[1]();
  4495  001358  5012               	movf	disp7s_mux_Q@i,w,c
  4496  00135A  0D04               	mullw	4
  4497  00135C  50F3               	movf	prodl,w,c
  4498  00135E  0FB7               	addlw	low (_disp7s_mux+2)
  4499  001360  6ED9               	movwf	fsr2l,c
  4500  001362  6ADA               	clrf	fsr2h,c
  4501  001364  D801               	call	u2278
  4502  001366  D01C               	goto	u2289
  4503  001368                     u2278:
  4504  001368  0005               	push	
  4505  00136A  6EFA               	movwf	pclath,c
  4506  00136C  50DE               	movf	postinc2,w,c
  4507  00136E  6EFD               	movwf	tosl,c
  4508  001370  50DE               	movf	postinc2,w,c
  4509  001372  6EFE               	movwf	tosh,c
  4510  001374  50F8               	movf	tblptru,w,c
  4511  001376  6EFF               	movwf	tosu,c
  4512  001378  50FA               	movf	pclath,w,c
  4513  00137A  0012               	return		;indir
  4514  00137C                     l2729:
  4515                           
  4516                           ;display.c: 104: else;display.c: 105: disp7s_mux[i].Qonoff[0]();
  4517  00137C  5012               	movf	disp7s_mux_Q@i,w,c
  4518  00137E  0D04               	mullw	4
  4519  001380  50F3               	movf	prodl,w,c
  4520  001382  0FB5               	addlw	low _disp7s_mux
  4521  001384  6ED9               	movwf	fsr2l,c
  4522  001386  6ADA               	clrf	fsr2h,c
  4523  001388  D801               	call	u2288
  4524  00138A  D00A               	goto	u2289
  4525  00138C                     u2288:
  4526  00138C  0005               	push	
  4527  00138E  6EFA               	movwf	pclath,c
  4528  001390  50DE               	movf	postinc2,w,c
  4529  001392  6EFD               	movwf	tosl,c
  4530  001394  50DE               	movf	postinc2,w,c
  4531  001396  6EFE               	movwf	tosh,c
  4532  001398  50F8               	movf	tblptru,w,c
  4533  00139A  6EFF               	movwf	tosu,c
  4534  00139C  50FA               	movf	pclath,w,c
  4535  00139E  0012               	return		;indir
  4536  0013A0                     u2289:
  4537  0013A0  2A12               	incf	disp7s_mux_Q@i,f,c
  4538  0013A2  5012               	movf	disp7s_mux_Q@i,w,c
  4539  0013A4  0A80               	xorlw	128
  4540  0013A6  0F7B               	addlw	-133
  4541  0013A8  B0D8               	btfsc	status,0,c
  4542  0013AA  0012               	return	
  4543  0013AC  D7B3               	goto	l2725
  4544  0013AE                     __end_of_disp7s_mux_Q:
  4545                           	opt callstack 0
  4546                           
  4547 ;; *************** function _disp7s_init *****************
  4548 ;; Defined at:
  4549 ;;		line 112 in file "display.c"
  4550 ;; Parameters:    Size  Location     Type
  4551 ;;		None
  4552 ;; Auto vars:     Size  Location     Type
  4553 ;;  i               1   11[COMRAM] char 
  4554 ;; Return value:  Size  Location     Type
  4555 ;;                  1    wreg      void 
  4556 ;; Registers used:
  4557 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4558 ;; Tracked objects:
  4559 ;;		On entry : 3F/0
  4560 ;;		On exit  : 0/0
  4561 ;;		Unchanged: 0/0
  4562 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4563 ;;      Params:         0       0       0       0       0       0       0       0       0
  4564 ;;      Locals:         1       0       0       0       0       0       0       0       0
  4565 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4566 ;;      Totals:         1       0       0       0       0       0       0       0       0
  4567 ;;Total ram usage:        1 bytes
  4568 ;; Hardware stack levels used:    1
  4569 ;; Hardware stack levels required when called:    7
  4570 ;; This function calls:
  4571 ;;		_disp7s_mux_init
  4572 ;; This function is called by:
  4573 ;;		_main
  4574 ;; This function uses a non-reentrant model
  4575 ;;
  4576                           
  4577                           	psect	text30
  4578  001682                     __ptext30:
  4579                           	opt callstack 0
  4580  001682                     _disp7s_init:
  4581                           	opt callstack 23
  4582                           
  4583                           ; BSR set to: 0
  4584                           ;display.c: 114: int8_t i;;display.c: 115: for (i=0; i<2; i++)
  4585                           
  4586                           ;incstack = 0
  4587  001682  0E00               	movlw	0
  4588  001684  6E0C               	movwf	disp7s_init@i,c
  4589  001686                     l2859:
  4590                           
  4591                           ; BSR set to: 0
  4592                           ;display.c: 116: {pulsonic.disp7s.mode[i] = DISP7S_CHARS[OFF];}
  4593  001686  0E0B               	movlw	low _DISP7S_CHARS
  4594  001688  6EF6               	movwf	tblptrl,c
  4595  00168A                     	if	1	;There is more than 1 active tblptr byte
  4596  00168A  0E08               	movlw	high _DISP7S_CHARS
  4597  00168C  6EF7               	movwf	tblptrh,c
  4598  00168E                     	endif
  4599  00168E                     	if	0	;There are less than 3 active tblptr bytes
  4600  00168E                     	endif
  4601  00168E  0E3E               	movlw	low (_pulsonic+62)
  4602  001690  240C               	addwf	disp7s_init@i,w,c
  4603  001692  6ED9               	movwf	fsr2l,c
  4604  001694  6ADA               	clrf	fsr2h,c
  4605  001696  0E01               	movlw	high (_pulsonic+62)
  4606  001698  22DA               	addwfc	fsr2h,f,c
  4607  00169A  0008               	tblrd		*
  4608  00169C  CFF5 FFDF          	movff	tablat,indf2
  4609                           
  4610                           ; BSR set to: 0
  4611  0016A0  2A0C               	incf	disp7s_init@i,f,c
  4612                           
  4613                           ; BSR set to: 0
  4614  0016A2  500C               	movf	disp7s_init@i,w,c
  4615  0016A4  0A80               	xorlw	128
  4616  0016A6  0F7E               	addlw	-130
  4617  0016A8  A0D8               	btfss	status,0,c
  4618  0016AA  D7ED               	goto	l2859
  4619                           
  4620                           ; BSR set to: 0
  4621                           ;display.c: 118: for (i=0; i<3; i++)
  4622  0016AC  0E00               	movlw	0
  4623  0016AE  6E0C               	movwf	disp7s_init@i,c
  4624  0016B0                     l2871:
  4625                           
  4626                           ; BSR set to: 0
  4627                           ;display.c: 119: {pulsonic.disp7s.qty[i] = DISP7S_CHARS[OFF];}
  4628  0016B0  0E0B               	movlw	low _DISP7S_CHARS
  4629  0016B2  6EF6               	movwf	tblptrl,c
  4630  0016B4                     	if	1	;There is more than 1 active tblptr byte
  4631  0016B4  0E08               	movlw	high _DISP7S_CHARS
  4632  0016B6  6EF7               	movwf	tblptrh,c
  4633  0016B8                     	endif
  4634  0016B8                     	if	0	;There are less than 3 active tblptr bytes
  4635  0016B8                     	endif
  4636  0016B8  0E3B               	movlw	low (_pulsonic+59)
  4637  0016BA  240C               	addwf	disp7s_init@i,w,c
  4638  0016BC  6ED9               	movwf	fsr2l,c
  4639  0016BE  6ADA               	clrf	fsr2h,c
  4640  0016C0  0E01               	movlw	high (_pulsonic+59)
  4641  0016C2  22DA               	addwfc	fsr2h,f,c
  4642  0016C4  0008               	tblrd		*
  4643  0016C6  CFF5 FFDF          	movff	tablat,indf2
  4644                           
  4645                           ; BSR set to: 0
  4646  0016CA  2A0C               	incf	disp7s_init@i,f,c
  4647                           
  4648                           ; BSR set to: 0
  4649  0016CC  500C               	movf	disp7s_init@i,w,c
  4650  0016CE  0A80               	xorlw	128
  4651  0016D0  0F7D               	addlw	-131
  4652  0016D2  A0D8               	btfss	status,0,c
  4653  0016D4  D7ED               	goto	l2871
  4654                           
  4655                           ; BSR set to: 0
  4656                           ;display.c: 121: TRISB = 0x00;
  4657  0016D6  0E00               	movlw	0
  4658  0016D8  6E93               	movwf	3987,c	;volatile
  4659                           
  4660                           ; BSR set to: 0
  4661                           ;display.c: 122: disp7s_mux_init();
  4662  0016DA  EC99  F00C         	call	_disp7s_mux_init	;wreg free
  4663  0016DE  0012               	return		;funcret
  4664  0016E0                     __end_of_disp7s_init:
  4665                           	opt callstack 0
  4666                           
  4667 ;; *************** function _disp7s_mux_init *****************
  4668 ;; Defined at:
  4669 ;;		line 83 in file "display.c"
  4670 ;; Parameters:    Size  Location     Type
  4671 ;;		None
  4672 ;; Auto vars:     Size  Location     Type
  4673 ;;  i               1   10[COMRAM] char 
  4674 ;; Return value:  Size  Location     Type
  4675 ;;                  1    wreg      void 
  4676 ;; Registers used:
  4677 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
  4678 ;; Tracked objects:
  4679 ;;		On entry : 3F/0
  4680 ;;		On exit  : 0/0
  4681 ;;		Unchanged: 0/0
  4682 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4683 ;;      Params:         0       0       0       0       0       0       0       0       0
  4684 ;;      Locals:         1       0       0       0       0       0       0       0       0
  4685 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4686 ;;      Totals:         1       0       0       0       0       0       0       0       0
  4687 ;;Total ram usage:        1 bytes
  4688 ;; Hardware stack levels used:    1
  4689 ;; Hardware stack levels required when called:    6
  4690 ;; This function calls:
  4691 ;;		_disp7s_mux0_off
  4692 ;;		_disp7s_mux0_on
  4693 ;;		_disp7s_mux1_off
  4694 ;;		_disp7s_mux1_on
  4695 ;;		_disp7s_mux2_off
  4696 ;;		_disp7s_mux2_on
  4697 ;;		_disp7s_mux3_off
  4698 ;;		_disp7s_mux3_on
  4699 ;;		_disp7s_mux4_off
  4700 ;;		_disp7s_mux4_on
  4701 ;; This function is called by:
  4702 ;;		_disp7s_init
  4703 ;; This function uses a non-reentrant model
  4704 ;;
  4705                           
  4706                           	psect	text31
  4707  001932                     __ptext31:
  4708                           	opt callstack 0
  4709  001932                     _disp7s_mux_init:
  4710                           	opt callstack 23
  4711                           
  4712                           ; BSR set to: 0
  4713                           ;display.c: 85: int8_t i;;display.c: 86: for (i=0; i< (2 + 3); i++)
  4714                           
  4715                           ;incstack = 0
  4716  001932  0E00               	movlw	0
  4717  001934  6E0B               	movwf	disp7s_mux_init@i,c
  4718  001936                     l2711:
  4719                           
  4720                           ;display.c: 87: {;display.c: 88: disp7s_mux[i].Qonoff[0]();
  4721  001936  500B               	movf	disp7s_mux_init@i,w,c
  4722  001938  0D04               	mullw	4
  4723  00193A  50F3               	movf	prodl,w,c
  4724  00193C  0FB5               	addlw	low _disp7s_mux
  4725  00193E  6ED9               	movwf	fsr2l,c
  4726  001940  6ADA               	clrf	fsr2h,c
  4727  001942  D801               	call	u2228
  4728  001944  D00A               	goto	u2229
  4729  001946                     u2228:
  4730  001946  0005               	push	
  4731  001948  6EFA               	movwf	pclath,c
  4732  00194A  50DE               	movf	postinc2,w,c
  4733  00194C  6EFD               	movwf	tosl,c
  4734  00194E  50DE               	movf	postinc2,w,c
  4735  001950  6EFE               	movwf	tosh,c
  4736  001952  50F8               	movf	tblptru,w,c
  4737  001954  6EFF               	movwf	tosu,c
  4738  001956  50FA               	movf	pclath,w,c
  4739  001958  0012               	return		;indir
  4740  00195A                     u2229:
  4741  00195A  2A0B               	incf	disp7s_mux_init@i,f,c
  4742  00195C  500B               	movf	disp7s_mux_init@i,w,c
  4743  00195E  0A80               	xorlw	128
  4744  001960  0F7B               	addlw	-133
  4745  001962  A0D8               	btfss	status,0,c
  4746  001964  D7E8               	goto	l2711
  4747  001966  9892               	bcf	3986,4,c	;volatile
  4748                           
  4749                           ;display.c: 91: do{TRISA &= ~(1<<3);}while(0);
  4750  001968  9692               	bcf	3986,3,c	;volatile
  4751                           
  4752                           ;display.c: 92: do{TRISA &= ~(1<<2);}while(0);
  4753  00196A  9492               	bcf	3986,2,c	;volatile
  4754                           
  4755                           ;display.c: 93: do{TRISA &= ~(1<<1);}while(0);
  4756  00196C  9292               	bcf	3986,1,c	;volatile
  4757                           
  4758                           ;display.c: 94: do{TRISA &= ~(1<<0);}while(0);
  4759  00196E  9092               	bcf	3986,0,c	;volatile
  4760  001970  0012               	return		;funcret
  4761  001972                     __end_of_disp7s_mux_init:
  4762                           	opt callstack 0
  4763                           
  4764 ;; *************** function _disp7s_mux4_off *****************
  4765 ;; Defined at:
  4766 ;;		line 41 in file "display.c"
  4767 ;; Parameters:    Size  Location     Type
  4768 ;;		None
  4769 ;; Auto vars:     Size  Location     Type
  4770 ;;		None
  4771 ;; Return value:  Size  Location     Type
  4772 ;;                  1    wreg      void 
  4773 ;; Registers used:
  4774 ;;		status,2, status,0
  4775 ;; Tracked objects:
  4776 ;;		On entry : 0/0
  4777 ;;		On exit  : 0/0
  4778 ;;		Unchanged: 0/0
  4779 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4780 ;;      Params:         0       0       0       0       0       0       0       0       0
  4781 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4782 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4783 ;;      Totals:         0       0       0       0       0       0       0       0       0
  4784 ;;Total ram usage:        0 bytes
  4785 ;; Hardware stack levels used:    1
  4786 ;; Hardware stack levels required when called:    5
  4787 ;; This function calls:
  4788 ;;		Nothing
  4789 ;; This function is called by:
  4790 ;;		_disp7s_mux_init
  4791 ;;		_disp7s_mux_Q
  4792 ;;		_disp7s_job
  4793 ;; This function uses a non-reentrant model
  4794 ;;
  4795                           
  4796                           	psect	text32
  4797  001B22                     __ptext32:
  4798                           	opt callstack 0
  4799  001B22                     _disp7s_mux4_off:
  4800                           	opt callstack 23
  4801                           
  4802                           ;incstack = 0
  4803                           ;display.c: 43: do{LATA |= 1<<0;}while(0);
  4804  001B22  8089               	bsf	3977,0,c	;volatile
  4805  001B24  0012               	return		;funcret
  4806  001B26                     __end_of_disp7s_mux4_off:
  4807                           	opt callstack 0
  4808                           
  4809 ;; *************** function _disp7s_mux3_on *****************
  4810 ;; Defined at:
  4811 ;;		line 36 in file "display.c"
  4812 ;; Parameters:    Size  Location     Type
  4813 ;;		None
  4814 ;; Auto vars:     Size  Location     Type
  4815 ;;		None
  4816 ;; Return value:  Size  Location     Type
  4817 ;;                  1    wreg      void 
  4818 ;; Registers used:
  4819 ;;		status,2, status,0
  4820 ;; Tracked objects:
  4821 ;;		On entry : 0/0
  4822 ;;		On exit  : 0/0
  4823 ;;		Unchanged: 0/0
  4824 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4825 ;;      Params:         0       0       0       0       0       0       0       0       0
  4826 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4827 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4828 ;;      Totals:         0       0       0       0       0       0       0       0       0
  4829 ;;Total ram usage:        0 bytes
  4830 ;; Hardware stack levels used:    1
  4831 ;; Hardware stack levels required when called:    5
  4832 ;; This function calls:
  4833 ;;		Nothing
  4834 ;; This function is called by:
  4835 ;;		_disp7s_mux_init
  4836 ;;		_disp7s_mux_Q
  4837 ;;		_disp7s_job
  4838 ;; This function uses a non-reentrant model
  4839 ;;
  4840                           
  4841                           	psect	text33
  4842  001B26                     __ptext33:
  4843                           	opt callstack 0
  4844  001B26                     _disp7s_mux3_on:
  4845                           	opt callstack 23
  4846                           
  4847                           ;incstack = 0
  4848                           ;display.c: 38: do{LATA &= ~(1<<1);}while(0);
  4849  001B26  9289               	bcf	3977,1,c	;volatile
  4850  001B28  0012               	return		;funcret
  4851  001B2A                     __end_of_disp7s_mux3_on:
  4852                           	opt callstack 0
  4853                           
  4854 ;; *************** function _disp7s_mux3_off *****************
  4855 ;; Defined at:
  4856 ;;		line 32 in file "display.c"
  4857 ;; Parameters:    Size  Location     Type
  4858 ;;		None
  4859 ;; Auto vars:     Size  Location     Type
  4860 ;;		None
  4861 ;; Return value:  Size  Location     Type
  4862 ;;                  1    wreg      void 
  4863 ;; Registers used:
  4864 ;;		status,2, status,0
  4865 ;; Tracked objects:
  4866 ;;		On entry : 0/0
  4867 ;;		On exit  : 0/0
  4868 ;;		Unchanged: 0/0
  4869 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4870 ;;      Params:         0       0       0       0       0       0       0       0       0
  4871 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4872 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4873 ;;      Totals:         0       0       0       0       0       0       0       0       0
  4874 ;;Total ram usage:        0 bytes
  4875 ;; Hardware stack levels used:    1
  4876 ;; Hardware stack levels required when called:    5
  4877 ;; This function calls:
  4878 ;;		Nothing
  4879 ;; This function is called by:
  4880 ;;		_disp7s_mux_init
  4881 ;;		_disp7s_mux_Q
  4882 ;;		_disp7s_job
  4883 ;; This function uses a non-reentrant model
  4884 ;;
  4885                           
  4886                           	psect	text34
  4887  001B2A                     __ptext34:
  4888                           	opt callstack 0
  4889  001B2A                     _disp7s_mux3_off:
  4890                           	opt callstack 23
  4891                           
  4892                           ;incstack = 0
  4893                           ;display.c: 34: do{LATA |= 1<<1;}while(0);
  4894  001B2A  8289               	bsf	3977,1,c	;volatile
  4895  001B2C  0012               	return		;funcret
  4896  001B2E                     __end_of_disp7s_mux3_off:
  4897                           	opt callstack 0
  4898                           
  4899 ;; *************** function _disp7s_mux2_on *****************
  4900 ;; Defined at:
  4901 ;;		line 27 in file "display.c"
  4902 ;; Parameters:    Size  Location     Type
  4903 ;;		None
  4904 ;; Auto vars:     Size  Location     Type
  4905 ;;		None
  4906 ;; Return value:  Size  Location     Type
  4907 ;;                  1    wreg      void 
  4908 ;; Registers used:
  4909 ;;		status,2, status,0
  4910 ;; Tracked objects:
  4911 ;;		On entry : 0/0
  4912 ;;		On exit  : 0/0
  4913 ;;		Unchanged: 0/0
  4914 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4915 ;;      Params:         0       0       0       0       0       0       0       0       0
  4916 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4917 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4918 ;;      Totals:         0       0       0       0       0       0       0       0       0
  4919 ;;Total ram usage:        0 bytes
  4920 ;; Hardware stack levels used:    1
  4921 ;; Hardware stack levels required when called:    5
  4922 ;; This function calls:
  4923 ;;		Nothing
  4924 ;; This function is called by:
  4925 ;;		_disp7s_mux_init
  4926 ;;		_disp7s_mux_Q
  4927 ;;		_disp7s_job
  4928 ;; This function uses a non-reentrant model
  4929 ;;
  4930                           
  4931                           	psect	text35
  4932  001B2E                     __ptext35:
  4933                           	opt callstack 0
  4934  001B2E                     _disp7s_mux2_on:
  4935                           	opt callstack 23
  4936                           
  4937                           ;incstack = 0
  4938                           ;display.c: 29: do{LATA &= ~(1<<2);}while(0);
  4939  001B2E  9489               	bcf	3977,2,c	;volatile
  4940  001B30  0012               	return		;funcret
  4941  001B32                     __end_of_disp7s_mux2_on:
  4942                           	opt callstack 0
  4943                           
  4944 ;; *************** function _disp7s_mux2_off *****************
  4945 ;; Defined at:
  4946 ;;		line 23 in file "display.c"
  4947 ;; Parameters:    Size  Location     Type
  4948 ;;		None
  4949 ;; Auto vars:     Size  Location     Type
  4950 ;;		None
  4951 ;; Return value:  Size  Location     Type
  4952 ;;                  1    wreg      void 
  4953 ;; Registers used:
  4954 ;;		status,2, status,0
  4955 ;; Tracked objects:
  4956 ;;		On entry : 0/0
  4957 ;;		On exit  : 0/0
  4958 ;;		Unchanged: 0/0
  4959 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4960 ;;      Params:         0       0       0       0       0       0       0       0       0
  4961 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4962 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4963 ;;      Totals:         0       0       0       0       0       0       0       0       0
  4964 ;;Total ram usage:        0 bytes
  4965 ;; Hardware stack levels used:    1
  4966 ;; Hardware stack levels required when called:    5
  4967 ;; This function calls:
  4968 ;;		Nothing
  4969 ;; This function is called by:
  4970 ;;		_disp7s_mux_init
  4971 ;;		_disp7s_mux_Q
  4972 ;;		_disp7s_job
  4973 ;; This function uses a non-reentrant model
  4974 ;;
  4975                           
  4976                           	psect	text36
  4977  001B32                     __ptext36:
  4978                           	opt callstack 0
  4979  001B32                     _disp7s_mux2_off:
  4980                           	opt callstack 23
  4981                           
  4982                           ;incstack = 0
  4983                           ;display.c: 25: do{LATA |= 1<<2;}while(0);
  4984  001B32  8489               	bsf	3977,2,c	;volatile
  4985  001B34  0012               	return		;funcret
  4986  001B36                     __end_of_disp7s_mux2_off:
  4987                           	opt callstack 0
  4988                           
  4989 ;; *************** function _disp7s_mux1_on *****************
  4990 ;; Defined at:
  4991 ;;		line 18 in file "display.c"
  4992 ;; Parameters:    Size  Location     Type
  4993 ;;		None
  4994 ;; Auto vars:     Size  Location     Type
  4995 ;;		None
  4996 ;; Return value:  Size  Location     Type
  4997 ;;                  1    wreg      void 
  4998 ;; Registers used:
  4999 ;;		status,2, status,0
  5000 ;; Tracked objects:
  5001 ;;		On entry : 0/0
  5002 ;;		On exit  : 0/0
  5003 ;;		Unchanged: 0/0
  5004 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5005 ;;      Params:         0       0       0       0       0       0       0       0       0
  5006 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5007 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5008 ;;      Totals:         0       0       0       0       0       0       0       0       0
  5009 ;;Total ram usage:        0 bytes
  5010 ;; Hardware stack levels used:    1
  5011 ;; Hardware stack levels required when called:    5
  5012 ;; This function calls:
  5013 ;;		Nothing
  5014 ;; This function is called by:
  5015 ;;		_disp7s_mux_init
  5016 ;;		_disp7s_mux_Q
  5017 ;;		_disp7s_job
  5018 ;; This function uses a non-reentrant model
  5019 ;;
  5020                           
  5021                           	psect	text37
  5022  001B36                     __ptext37:
  5023                           	opt callstack 0
  5024  001B36                     _disp7s_mux1_on:
  5025                           	opt callstack 23
  5026                           
  5027                           ;incstack = 0
  5028                           ;display.c: 20: do{LATA &= ~(1<<3);}while(0);
  5029  001B36  9689               	bcf	3977,3,c	;volatile
  5030  001B38  0012               	return		;funcret
  5031  001B3A                     __end_of_disp7s_mux1_on:
  5032                           	opt callstack 0
  5033                           
  5034 ;; *************** function _disp7s_mux1_off *****************
  5035 ;; Defined at:
  5036 ;;		line 14 in file "display.c"
  5037 ;; Parameters:    Size  Location     Type
  5038 ;;		None
  5039 ;; Auto vars:     Size  Location     Type
  5040 ;;		None
  5041 ;; Return value:  Size  Location     Type
  5042 ;;                  1    wreg      void 
  5043 ;; Registers used:
  5044 ;;		status,2, status,0
  5045 ;; Tracked objects:
  5046 ;;		On entry : 0/0
  5047 ;;		On exit  : 0/0
  5048 ;;		Unchanged: 0/0
  5049 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5050 ;;      Params:         0       0       0       0       0       0       0       0       0
  5051 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5052 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5053 ;;      Totals:         0       0       0       0       0       0       0       0       0
  5054 ;;Total ram usage:        0 bytes
  5055 ;; Hardware stack levels used:    1
  5056 ;; Hardware stack levels required when called:    5
  5057 ;; This function calls:
  5058 ;;		Nothing
  5059 ;; This function is called by:
  5060 ;;		_disp7s_mux_init
  5061 ;;		_disp7s_mux_Q
  5062 ;;		_disp7s_job
  5063 ;; This function uses a non-reentrant model
  5064 ;;
  5065                           
  5066                           	psect	text38
  5067  001B3A                     __ptext38:
  5068                           	opt callstack 0
  5069  001B3A                     _disp7s_mux1_off:
  5070                           	opt callstack 23
  5071                           
  5072                           ;incstack = 0
  5073                           ;display.c: 16: do{LATA |= 1<<3;}while(0);
  5074  001B3A  8689               	bsf	3977,3,c	;volatile
  5075  001B3C  0012               	return		;funcret
  5076  001B3E                     __end_of_disp7s_mux1_off:
  5077                           	opt callstack 0
  5078                           
  5079 ;; *************** function _disp7s_mux0_on *****************
  5080 ;; Defined at:
  5081 ;;		line 9 in file "display.c"
  5082 ;; Parameters:    Size  Location     Type
  5083 ;;		None
  5084 ;; Auto vars:     Size  Location     Type
  5085 ;;		None
  5086 ;; Return value:  Size  Location     Type
  5087 ;;                  1    wreg      void 
  5088 ;; Registers used:
  5089 ;;		status,2, status,0
  5090 ;; Tracked objects:
  5091 ;;		On entry : 0/0
  5092 ;;		On exit  : 0/0
  5093 ;;		Unchanged: 0/0
  5094 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5095 ;;      Params:         0       0       0       0       0       0       0       0       0
  5096 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5097 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5098 ;;      Totals:         0       0       0       0       0       0       0       0       0
  5099 ;;Total ram usage:        0 bytes
  5100 ;; Hardware stack levels used:    1
  5101 ;; Hardware stack levels required when called:    5
  5102 ;; This function calls:
  5103 ;;		Nothing
  5104 ;; This function is called by:
  5105 ;;		_disp7s_mux_init
  5106 ;;		_disp7s_mux_Q
  5107 ;;		_disp7s_job
  5108 ;; This function uses a non-reentrant model
  5109 ;;
  5110                           
  5111                           	psect	text39
  5112  001B3E                     __ptext39:
  5113                           	opt callstack 0
  5114  001B3E                     _disp7s_mux0_on:
  5115                           	opt callstack 23
  5116                           
  5117                           ;incstack = 0
  5118                           ;display.c: 11: do{LATA &= ~(1<<4);}while(0);
  5119  001B3E  9889               	bcf	3977,4,c	;volatile
  5120  001B40  0012               	return		;funcret
  5121  001B42                     __end_of_disp7s_mux0_on:
  5122                           	opt callstack 0
  5123                           
  5124 ;; *************** function _disp7s_mux0_off *****************
  5125 ;; Defined at:
  5126 ;;		line 5 in file "display.c"
  5127 ;; Parameters:    Size  Location     Type
  5128 ;;		None
  5129 ;; Auto vars:     Size  Location     Type
  5130 ;;		None
  5131 ;; Return value:  Size  Location     Type
  5132 ;;                  1    wreg      void 
  5133 ;; Registers used:
  5134 ;;		status,2, status,0
  5135 ;; Tracked objects:
  5136 ;;		On entry : 0/0
  5137 ;;		On exit  : 0/0
  5138 ;;		Unchanged: 0/0
  5139 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5140 ;;      Params:         0       0       0       0       0       0       0       0       0
  5141 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5142 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5143 ;;      Totals:         0       0       0       0       0       0       0       0       0
  5144 ;;Total ram usage:        0 bytes
  5145 ;; Hardware stack levels used:    1
  5146 ;; Hardware stack levels required when called:    5
  5147 ;; This function calls:
  5148 ;;		Nothing
  5149 ;; This function is called by:
  5150 ;;		_disp7s_mux_init
  5151 ;;		_disp7s_mux_Q
  5152 ;;		_disp7s_job
  5153 ;; This function uses a non-reentrant model
  5154 ;;
  5155                           
  5156                           	psect	text40
  5157  001B42                     __ptext40:
  5158                           	opt callstack 0
  5159  001B42                     _disp7s_mux0_off:
  5160                           	opt callstack 23
  5161                           
  5162                           ;incstack = 0
  5163                           ;display.c: 7: do{LATA |= 1<<4;}while(0);
  5164  001B42  8889               	bsf	3977,4,c	;volatile
  5165  001B44  0012               	return		;funcret
  5166  001B46                     __end_of_disp7s_mux0_off:
  5167                           	opt callstack 0
  5168                           
  5169 ;; *************** function _disp7s_mux4_on *****************
  5170 ;; Defined at:
  5171 ;;		line 45 in file "display.c"
  5172 ;; Parameters:    Size  Location     Type
  5173 ;;		None
  5174 ;; Auto vars:     Size  Location     Type
  5175 ;;		None
  5176 ;; Return value:  Size  Location     Type
  5177 ;;                  1    wreg      void 
  5178 ;; Registers used:
  5179 ;;		status,2, status,0
  5180 ;; Tracked objects:
  5181 ;;		On entry : 0/0
  5182 ;;		On exit  : 0/0
  5183 ;;		Unchanged: 0/0
  5184 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5185 ;;      Params:         0       0       0       0       0       0       0       0       0
  5186 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5187 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5188 ;;      Totals:         0       0       0       0       0       0       0       0       0
  5189 ;;Total ram usage:        0 bytes
  5190 ;; Hardware stack levels used:    1
  5191 ;; Hardware stack levels required when called:    5
  5192 ;; This function calls:
  5193 ;;		Nothing
  5194 ;; This function is called by:
  5195 ;;		_disp7s_mux_init
  5196 ;;		_disp7s_mux_Q
  5197 ;;		_disp7s_job
  5198 ;; This function uses a non-reentrant model
  5199 ;;
  5200                           
  5201                           	psect	text41
  5202  001B46                     __ptext41:
  5203                           	opt callstack 0
  5204  001B46                     _disp7s_mux4_on:
  5205                           	opt callstack 23
  5206                           
  5207                           ;incstack = 0
  5208                           ;display.c: 47: do{LATA &= ~(1<<0);}while(0);
  5209  001B46  9089               	bcf	3977,0,c	;volatile
  5210  001B48  0012               	return		;funcret
  5211  001B4A                     __end_of_disp7s_mux4_on:
  5212                           	opt callstack 0
  5213                           
  5214 ;; *************** function _INTERRUPCION *****************
  5215 ;; Defined at:
  5216 ;;		line 228 in file "main.c"
  5217 ;; Parameters:    Size  Location     Type
  5218 ;;		None
  5219 ;; Auto vars:     Size  Location     Type
  5220 ;;		None
  5221 ;; Return value:  Size  Location     Type
  5222 ;;                  1    wreg      void 
  5223 ;; Registers used:
  5224 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
  5225 ;; Tracked objects:
  5226 ;;		On entry : 0/0
  5227 ;;		On exit  : 0/0
  5228 ;;		Unchanged: 0/0
  5229 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5230 ;;      Params:         0       0       0       0       0       0       0       0       0
  5231 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5232 ;;      Temps:          6       0       0       0       0       0       0       0       0
  5233 ;;      Totals:         6       0       0       0       0       0       0       0       0
  5234 ;;Total ram usage:        6 bytes
  5235 ;; Hardware stack levels used:    1
  5236 ;; Hardware stack levels required when called:    4
  5237 ;; This function calls:
  5238 ;;		_mpap_job
  5239 ;; This function is called by:
  5240 ;;		Interrupt level 2
  5241 ;; This function uses a non-reentrant model
  5242 ;;
  5243                           
  5244                           	psect	intcode
  5245  000008                     __pintcode:
  5246                           	opt callstack 0
  5247  000008                     _INTERRUPCION:
  5248                           	opt callstack 21
  5249                           
  5250                           ;incstack = 0
  5251  000008  8251               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  5252  00000A  EDEB  F00B         	call	int_func,f	;refresh shadow registers
  5253                           
  5254                           	psect	intcode_body
  5255  0017D6                     __pintcode_body:
  5256                           	opt callstack 21
  5257  0017D6                     int_func:
  5258                           	opt callstack 21
  5259  0017D6  0006               	pop		; remove dummy address from shadow register refresh
  5260  0017D8  CFFA F005          	movff	pclath,??_INTERRUPCION
  5261  0017DC  CFFB F006          	movff	pclatu,??_INTERRUPCION+1
  5262  0017E0  CFD9 F007          	movff	fsr2l,??_INTERRUPCION+2
  5263  0017E4  CFDA F008          	movff	fsr2h,??_INTERRUPCION+3
  5264  0017E8  CFF3 F009          	movff	prodl,??_INTERRUPCION+4
  5265  0017EC  CFF4 F00A          	movff	prodh,??_INTERRUPCION+5
  5266                           
  5267                           ;main.c: 230: if (TMR0IF)
  5268  0017F0  A4F2               	btfss	4082,2,c	;volatile
  5269  0017F2  D007               	goto	i2l125
  5270                           
  5271                           ;main.c: 231: {;main.c: 232: isr_flag.f1ms = 1;
  5272  0017F4  804D               	bsf	_isr_flag,0,c	;volatile
  5273                           
  5274                           ;main.c: 233: mpap_job();
  5275  0017F6  EC0F  F00C         	call	_mpap_job	;wreg free
  5276                           
  5277                           ;main.c: 235: TMR0IF = 0;
  5278  0017FA  94F2               	bcf	4082,2,c	;volatile
  5279                           
  5280                           ;main.c: 236: TMR0H = (uint8_t)((uint16_t)((1UL<<16) - ( 1.0E-3 *48000000UL / (256*4)) )
      +                           >> 8);
  5281  0017FC  68D7               	setf	4055,c	;volatile
  5282                           
  5283                           ;main.c: 237: TMR0L = (uint8_t)((uint16_t)((1UL<<16) - ( 1.0E-3 *48000000UL / (256*4)) )
      +                          );
  5284  0017FE  0ED1               	movlw	209
  5285  001800  6ED6               	movwf	4054,c	;volatile
  5286  001802                     i2l125:
  5287  001802  C00A  FFF4         	movff	??_INTERRUPCION+5,prodh
  5288  001806  C009  FFF3         	movff	??_INTERRUPCION+4,prodl
  5289  00180A  C008  FFDA         	movff	??_INTERRUPCION+3,fsr2h
  5290  00180E  C007  FFD9         	movff	??_INTERRUPCION+2,fsr2l
  5291  001812  C006  FFFB         	movff	??_INTERRUPCION+1,pclatu
  5292  001816  C005  FFFA         	movff	??_INTERRUPCION,pclath
  5293  00181A  9251               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  5294  00181C  0011               	retfie		f
  5295  00181E                     __end_of_INTERRUPCION:
  5296                           	opt callstack 0
  5297                           
  5298 ;; *************** function _mpap_job *****************
  5299 ;; Defined at:
  5300 ;;		line 140 in file "mpap.c"
  5301 ;; Parameters:    Size  Location     Type
  5302 ;;		None
  5303 ;; Auto vars:     Size  Location     Type
  5304 ;;  cod_ret         1    0        char 
  5305 ;; Return value:  Size  Location     Type
  5306 ;;                  1    wreg      char 
  5307 ;; Registers used:
  5308 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
  5309 ;; Tracked objects:
  5310 ;;		On entry : 0/0
  5311 ;;		On exit  : 0/0
  5312 ;;		Unchanged: 0/0
  5313 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5314 ;;      Params:         0       0       0       0       0       0       0       0       0
  5315 ;;      Locals:         1       0       0       0       0       0       0       0       0
  5316 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5317 ;;      Totals:         1       0       0       0       0       0       0       0       0
  5318 ;;Total ram usage:        1 bytes
  5319 ;; Hardware stack levels used:    1
  5320 ;; Hardware stack levels required when called:    3
  5321 ;; This function calls:
  5322 ;;		__mpap_off
  5323 ;;		_mpap_homming
  5324 ;;		_mpap_normal_mode
  5325 ;; This function is called by:
  5326 ;;		_INTERRUPCION
  5327 ;; This function uses a non-reentrant model
  5328 ;;
  5329                           
  5330                           	psect	text43
  5331  00181E                     __ptext43:
  5332                           	opt callstack 0
  5333  00181E                     _mpap_job:
  5334                           	opt callstack 21
  5335                           
  5336                           ;mpap.c: 142: int8_t cod_ret;;mpap.c: 144: if (mpap.mode == MPAP_HOMMING_MODE)
  5337                           
  5338                           ;incstack = 0
  5339  00181E  0E02               	movlw	2
  5340  001820  1835               	xorwf	_mpap+7,w,c	;volatile
  5341  001822  A4D8               	btfss	status,2,c
  5342  001824  D003               	goto	i2l2973
  5343  001826  EC70  F00B         	call	_mpap_homming	;wreg free
  5344  00182A  0012               	return	
  5345  00182C                     i2l2973:
  5346                           
  5347                           ;mpap.c: 147: else if (mpap.mode == MPAP_NORMAL_MODE)
  5348  00182C  0E03               	movlw	3
  5349  00182E  1835               	xorwf	_mpap+7,w,c	;volatile
  5350  001830  A4D8               	btfss	status,2,c
  5351  001832  D003               	goto	i2l2977
  5352  001834  EC33  F00C         	call	_mpap_normal_mode	;wreg free
  5353  001838  0012               	return	
  5354  00183A                     i2l2977:
  5355                           
  5356                           ;mpap.c: 150: else if (mpap.mode == MPAP_STALL_MODE)
  5357  00183A  0435               	decf	_mpap+7,w,c	;volatile
  5358  00183C  A4D8               	btfss	status,2,c
  5359  00183E  0012               	return	
  5360                           
  5361                           ;mpap.c: 151: {;mpap.c: 152: mpap.numSteps_tomove = 0x00;
  5362  001840  0E00               	movlw	0
  5363  001842  6E33               	movwf	_mpap+5,c	;volatile
  5364  001844  0E00               	movlw	0
  5365  001846  6E32               	movwf	_mpap+4,c	;volatile
  5366                           
  5367                           ;mpap.c: 153: mpap_off();
  5368  001848  D801               	call	i2u266_48
  5369  00184A  D00A               	goto	i2u266_49
  5370  00184C                     i2u266_48:
  5371  00184C  0005               	push	
  5372  00184E  6EFA               	movwf	pclath,c
  5373  001850  504E               	movf	_mpap_off,w,c
  5374  001852  6EFD               	movwf	tosl,c
  5375  001854  504F               	movf	_mpap_off+1,w,c
  5376  001856  6EFE               	movwf	tosh,c
  5377  001858  50F8               	movf	tblptru,w,c
  5378  00185A  6EFF               	movwf	tosu,c
  5379  00185C  50FA               	movf	pclath,w,c
  5380  00185E  0012               	return		;indir
  5381  001860                     i2u266_49:
  5382                           
  5383                           ;mpap.c: 155: mpap.mode = MPAP_IDLE_MODE;
  5384  001860  0E00               	movlw	0
  5385  001862  6E35               	movwf	_mpap+7,c	;volatile
  5386  001864  0012               	return	
  5387  001866                     __end_of_mpap_job:
  5388                           	opt callstack 0
  5389                           
  5390 ;; *************** function _mpap_normal_mode *****************
  5391 ;; Defined at:
  5392 ;;		line 120 in file "mpap.c"
  5393 ;; Parameters:    Size  Location     Type
  5394 ;;		None
  5395 ;; Auto vars:     Size  Location     Type
  5396 ;;  cod_ret         1    1[COMRAM] char 
  5397 ;; Return value:  Size  Location     Type
  5398 ;;                  1    wreg      char 
  5399 ;; Registers used:
  5400 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
  5401 ;; Tracked objects:
  5402 ;;		On entry : 0/0
  5403 ;;		On exit  : 0/0
  5404 ;;		Unchanged: 0/0
  5405 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5406 ;;      Params:         0       0       0       0       0       0       0       0       0
  5407 ;;      Locals:         1       0       0       0       0       0       0       0       0
  5408 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5409 ;;      Totals:         1       0       0       0       0       0       0       0       0
  5410 ;;Total ram usage:        1 bytes
  5411 ;; Hardware stack levels used:    1
  5412 ;; Hardware stack levels required when called:    2
  5413 ;; This function calls:
  5414 ;;		_mpap_do1step
  5415 ;; This function is called by:
  5416 ;;		_mpap_job
  5417 ;; This function uses a non-reentrant model
  5418 ;;
  5419                           
  5420                           	psect	text44
  5421  001866                     __ptext44:
  5422                           	opt callstack 0
  5423  001866                     _mpap_normal_mode:
  5424                           	opt callstack 21
  5425                           
  5426                           ;mpap.c: 122: int8_t cod_ret = 0;
  5427                           
  5428                           ;incstack = 0
  5429  001866  0E00               	movlw	0
  5430  001868  6E02               	movwf	mpap_normal_mode@cod_ret,c
  5431                           
  5432                           ;mpap.c: 123: if (mpap.numSteps_tomove!=0)
  5433  00186A  5032               	movf	_mpap+4,w,c	;volatile
  5434  00186C  1033               	iorwf	_mpap+5,w,c	;volatile
  5435  00186E  B4D8               	btfsc	status,2,c
  5436  001870  D01C               	goto	i2l440
  5437                           
  5438                           ;mpap.c: 124: {;mpap.c: 125: mpap_do1step(mpap.KI);
  5439  001872  5034               	movf	_mpap+6,w,c	;volatile
  5440  001874  EC78  F00C         	call	_mpap_do1step
  5441                           
  5442                           ;mpap.c: 127: mpap.counter_steps+= mpap.KI;
  5443  001878  5034               	movf	_mpap+6,w,c	;volatile
  5444  00187A  2630               	addwf	_mpap+2,f,c	;volatile
  5445  00187C  0E00               	movlw	0
  5446  00187E  BE34               	btfsc	_mpap+6,7,c	;volatile
  5447  001880  0EFF               	movlw	255
  5448  001882  2231               	addwfc	_mpap+3,f,c	;volatile
  5449                           
  5450                           ;mpap.c: 129: mpap.numSteps_current+= mpap.KI;
  5451  001884  5034               	movf	_mpap+6,w,c	;volatile
  5452  001886  262E               	addwf	_mpap,f,c	;volatile
  5453  001888  0E00               	movlw	0
  5454  00188A  BE34               	btfsc	_mpap+6,7,c	;volatile
  5455  00188C  0EFF               	movlw	255
  5456  00188E  222F               	addwfc	_mpap+1,f,c	;volatile
  5457                           
  5458                           ;mpap.c: 131: if ( mpap.counter_steps== mpap.numSteps_tomove)
  5459  001890  5032               	movf	_mpap+4,w,c	;volatile
  5460  001892  1830               	xorwf	_mpap+2,w,c	;volatile
  5461  001894  E10A               	bnz	i2l440
  5462  001896  5033               	movf	_mpap+5,w,c	;volatile
  5463  001898  1831               	xorwf	_mpap+3,w,c	;volatile
  5464  00189A  A4D8               	btfss	status,2,c
  5465  00189C  D006               	goto	i2l440
  5466                           
  5467                           ;mpap.c: 132: {;mpap.c: 133: mpap.numSteps_tomove = 0;
  5468  00189E  0E00               	movlw	0
  5469  0018A0  6E33               	movwf	_mpap+5,c	;volatile
  5470  0018A2  0E00               	movlw	0
  5471  0018A4  6E32               	movwf	_mpap+4,c	;volatile
  5472                           
  5473                           ;mpap.c: 134: cod_ret = 1;
  5474  0018A6  0E01               	movlw	1
  5475  0018A8  6E02               	movwf	mpap_normal_mode@cod_ret,c
  5476  0018AA                     i2l440:
  5477                           
  5478                           ;mpap.c: 135: };mpap.c: 136: };mpap.c: 137: return cod_ret;
  5479  0018AA  5002               	movf	mpap_normal_mode@cod_ret,w,c
  5480  0018AC  0012               	return		;funcret
  5481  0018AE                     __end_of_mpap_normal_mode:
  5482                           	opt callstack 0
  5483                           
  5484 ;; *************** function _mpap_homming *****************
  5485 ;; Defined at:
  5486 ;;		line 96 in file "mpap.c"
  5487 ;; Parameters:    Size  Location     Type
  5488 ;;		None
  5489 ;; Auto vars:     Size  Location     Type
  5490 ;;  cod_ret         1    2[COMRAM] char 
  5491 ;; Return value:  Size  Location     Type
  5492 ;;                  1    wreg      char 
  5493 ;; Registers used:
  5494 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
  5495 ;; Tracked objects:
  5496 ;;		On entry : 0/0
  5497 ;;		On exit  : 0/0
  5498 ;;		Unchanged: 0/0
  5499 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5500 ;;      Params:         0       0       0       0       0       0       0       0       0
  5501 ;;      Locals:         1       0       0       0       0       0       0       0       0
  5502 ;;      Temps:          1       0       0       0       0       0       0       0       0
  5503 ;;      Totals:         2       0       0       0       0       0       0       0       0
  5504 ;;Total ram usage:        2 bytes
  5505 ;; Hardware stack levels used:    1
  5506 ;; Hardware stack levels required when called:    2
  5507 ;; This function calls:
  5508 ;;		_mpap_do1step
  5509 ;; This function is called by:
  5510 ;;		_mpap_job
  5511 ;; This function uses a non-reentrant model
  5512 ;;
  5513                           
  5514                           	psect	text45
  5515  0016E0                     __ptext45:
  5516                           	opt callstack 0
  5517  0016E0                     _mpap_homming:
  5518                           	opt callstack 21
  5519                           
  5520                           ;mpap.c: 98: int8_t cod_ret = 0;
  5521                           
  5522                           ;incstack = 0
  5523  0016E0  0E00               	movlw	0
  5524  0016E2  6E03               	movwf	mpap_homming@cod_ret,c
  5525                           
  5526                           ;mpap.c: 99: if (mpap.numSteps_tomove!=0)
  5527  0016E4  5032               	movf	_mpap+4,w,c	;volatile
  5528  0016E6  1033               	iorwf	_mpap+5,w,c	;volatile
  5529  0016E8  B4D8               	btfsc	status,2,c
  5530  0016EA  D024               	goto	i2l434
  5531                           
  5532                           ;mpap.c: 100: {;mpap.c: 101: mpap_do1step(mpap.KI);
  5533  0016EC  5034               	movf	_mpap+6,w,c	;volatile
  5534  0016EE  EC78  F00C         	call	_mpap_do1step
  5535                           
  5536                           ;mpap.c: 103: mpap.counter_steps+= mpap.KI;
  5537  0016F2  5034               	movf	_mpap+6,w,c	;volatile
  5538  0016F4  2630               	addwf	_mpap+2,f,c	;volatile
  5539  0016F6  0E00               	movlw	0
  5540  0016F8  BE34               	btfsc	_mpap+6,7,c	;volatile
  5541  0016FA  0EFF               	movlw	255
  5542  0016FC  2231               	addwfc	_mpap+3,f,c	;volatile
  5543                           
  5544                           ;mpap.c: 105: if (((PORTE & (1<<1))>>1) == 0)
  5545  0016FE  CF84 F002          	movff	3972,??_mpap_homming	;volatile
  5546  001702  90D8               	bcf	status,0,c
  5547  001704  3202               	rrcf	??_mpap_homming,f,c
  5548  001706  B002               	btfsc	??_mpap_homming,0,c
  5549  001708  D006               	goto	i2l2681
  5550                           
  5551                           ;mpap.c: 106: {;mpap.c: 107: mpap.numSteps_tomove = 0x0000;
  5552  00170A  0E00               	movlw	0
  5553  00170C  6E33               	movwf	_mpap+5,c	;volatile
  5554  00170E  0E00               	movlw	0
  5555  001710  6E32               	movwf	_mpap+4,c	;volatile
  5556                           
  5557                           ;mpap.c: 108: cod_ret = 1;
  5558  001712  0E01               	movlw	1
  5559  001714  6E03               	movwf	mpap_homming@cod_ret,c
  5560  001716                     i2l2681:
  5561                           
  5562                           ;mpap.c: 109: };mpap.c: 110: if ( mpap.counter_steps == mpap.numSteps_tomove)
  5563  001716  5032               	movf	_mpap+4,w,c	;volatile
  5564  001718  1830               	xorwf	_mpap+2,w,c	;volatile
  5565  00171A  E10C               	bnz	i2l434
  5566  00171C  5033               	movf	_mpap+5,w,c	;volatile
  5567  00171E  1831               	xorwf	_mpap+3,w,c	;volatile
  5568  001720  A4D8               	btfss	status,2,c
  5569  001722  D008               	goto	i2l434
  5570                           
  5571                           ;mpap.c: 111: {;mpap.c: 112: mpap.numSteps_tomove = 0x0000;
  5572  001724  0E00               	movlw	0
  5573  001726  6E33               	movwf	_mpap+5,c	;volatile
  5574  001728  0E00               	movlw	0
  5575  00172A  6E32               	movwf	_mpap+4,c	;volatile
  5576                           
  5577                           ;mpap.c: 113: cod_ret = 1;
  5578  00172C  0E01               	movlw	1
  5579  00172E  6E03               	movwf	mpap_homming@cod_ret,c
  5580                           
  5581                           ;mpap.c: 114: pulsonic.errors.flag.mpap_home_sensor = 1;
  5582  001730  0101               	movlb	1	; () banked
  5583  001732  813A               	bsf	(_pulsonic+58)& (0+255),0,b
  5584  001734                     i2l434:
  5585                           
  5586                           ;mpap.c: 115: };mpap.c: 116: };mpap.c: 117: return cod_ret;
  5587  001734  5003               	movf	mpap_homming@cod_ret,w,c
  5588  001736  0012               	return		;funcret
  5589  001738                     __end_of_mpap_homming:
  5590                           	opt callstack 0
  5591                           
  5592 ;; *************** function _mpap_do1step *****************
  5593 ;; Defined at:
  5594 ;;		line 76 in file "mpap.c"
  5595 ;; Parameters:    Size  Location     Type
  5596 ;;  KI              1    wreg     char 
  5597 ;; Auto vars:     Size  Location     Type
  5598 ;;  KI              1    0[COMRAM] char 
  5599 ;; Return value:  Size  Location     Type
  5600 ;;                  1    wreg      void 
  5601 ;; Registers used:
  5602 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
  5603 ;; Tracked objects:
  5604 ;;		On entry : 0/0
  5605 ;;		On exit  : 0/0
  5606 ;;		Unchanged: 0/0
  5607 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5608 ;;      Params:         0       0       0       0       0       0       0       0       0
  5609 ;;      Locals:         1       0       0       0       0       0       0       0       0
  5610 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5611 ;;      Totals:         1       0       0       0       0       0       0       0       0
  5612 ;;Total ram usage:        1 bytes
  5613 ;; Hardware stack levels used:    1
  5614 ;; Hardware stack levels required when called:    1
  5615 ;; This function calls:
  5616 ;;		__mpap_step1
  5617 ;;		__mpap_step2
  5618 ;;		__mpap_step3
  5619 ;;		__mpap_step4
  5620 ;; This function is called by:
  5621 ;;		_mpap_homming
  5622 ;;		_mpap_normal_mode
  5623 ;; This function uses a non-reentrant model
  5624 ;;
  5625                           
  5626                           	psect	text46
  5627  0018F0                     __ptext46:
  5628                           	opt callstack 0
  5629  0018F0                     _mpap_do1step:
  5630                           	opt callstack 21
  5631                           
  5632                           ;incstack = 0
  5633                           ;mpap_do1step@KI stored from wreg
  5634  0018F0  6E01               	movwf	mpap_do1step@KI,c
  5635                           
  5636                           ;mpap.c: 78: static int8_t i = -1;;mpap.c: 80: i= i + KI;
  5637  0018F2  5050               	movf	mpap_do1step@i,w,c
  5638  0018F4  2401               	addwf	mpap_do1step@KI,w,c
  5639  0018F6  6E50               	movwf	mpap_do1step@i,c
  5640                           
  5641                           ;mpap.c: 82: if (i>3){i=0;}
  5642  0018F8  5050               	movf	mpap_do1step@i,w,c
  5643  0018FA  0A80               	xorlw	128
  5644  0018FC  0F7C               	addlw	-132
  5645  0018FE  A0D8               	btfss	status,0,c
  5646  001900  D002               	goto	i2l2445
  5647  001902  0E00               	movlw	0
  5648  001904  6E50               	movwf	mpap_do1step@i,c
  5649  001906                     i2l2445:
  5650                           
  5651                           ;mpap.c: 83: if (i<0){i=3;}
  5652  001906  AE50               	btfss	mpap_do1step@i,7,c
  5653  001908  D002               	goto	i2l2449
  5654  00190A  0E03               	movlw	3
  5655  00190C  6E50               	movwf	mpap_do1step@i,c
  5656  00190E                     i2l2449:
  5657                           
  5658                           ;mpap.c: 85: mpap_step[i]();
  5659  00190E  5050               	movf	mpap_do1step@i,w,c
  5660  001910  0D02               	mullw	2
  5661  001912  50F3               	movf	prodl,w,c
  5662  001914  0FC9               	addlw	low _mpap_step
  5663  001916  6ED9               	movwf	fsr2l,c
  5664  001918  6ADA               	clrf	fsr2h,c
  5665  00191A  D801               	call	i2u159_48
  5666  00191C  0012               	return	
  5667  00191E                     i2u159_48:
  5668  00191E  0005               	push	
  5669  001920  6EFA               	movwf	pclath,c
  5670  001922  50DE               	movf	postinc2,w,c
  5671  001924  6EFD               	movwf	tosl,c
  5672  001926  50DE               	movf	postinc2,w,c
  5673  001928  6EFE               	movwf	tosh,c
  5674  00192A  50F8               	movf	tblptru,w,c
  5675  00192C  6EFF               	movwf	tosu,c
  5676  00192E  50FA               	movf	pclath,w,c
  5677  001930  0012               	return		;indir
  5678  001932                     __end_of_mpap_do1step:
  5679                           	opt callstack 0
  5680                           
  5681 ;; *************** function __mpap_step3 *****************
  5682 ;; Defined at:
  5683 ;;		line 21 in file "mpap.c"
  5684 ;; Parameters:    Size  Location     Type
  5685 ;;		None
  5686 ;; Auto vars:     Size  Location     Type
  5687 ;;		None
  5688 ;; Return value:  Size  Location     Type
  5689 ;;                  1    wreg      void 
  5690 ;; Registers used:
  5691 ;;		status,2, status,0
  5692 ;; Tracked objects:
  5693 ;;		On entry : 0/0
  5694 ;;		On exit  : 0/0
  5695 ;;		Unchanged: 0/0
  5696 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5697 ;;      Params:         0       0       0       0       0       0       0       0       0
  5698 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5699 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5700 ;;      Totals:         0       0       0       0       0       0       0       0       0
  5701 ;;Total ram usage:        0 bytes
  5702 ;; Hardware stack levels used:    1
  5703 ;; This function calls:
  5704 ;;		Nothing
  5705 ;; This function is called by:
  5706 ;;		_mpap_do1step
  5707 ;; This function uses a non-reentrant model
  5708 ;;
  5709                           
  5710                           	psect	text47
  5711  001AD4                     __ptext47:
  5712                           	opt callstack 0
  5713  001AD4                     __mpap_step3:
  5714                           	opt callstack 21
  5715                           
  5716                           ;incstack = 0
  5717                           ;mpap.c: 23: do{LATD &= ~(1<<0);}while(0);
  5718  001AD4  908C               	bcf	3980,0,c	;volatile
  5719                           
  5720                           ;mpap.c: 24: do{LATD |= 1<<1;}while(0);
  5721  001AD6  828C               	bsf	3980,1,c	;volatile
  5722                           
  5723                           ;mpap.c: 25: do{LATD &= ~(1<<2);}while(0);
  5724  001AD8  948C               	bcf	3980,2,c	;volatile
  5725                           
  5726                           ;mpap.c: 26: do{LATD &= ~(1<<3);}while(0);
  5727  001ADA  968C               	bcf	3980,3,c	;volatile
  5728  001ADC  0012               	return		;funcret
  5729  001ADE                     __end_of__mpap_step3:
  5730                           	opt callstack 0
  5731                           
  5732 ;; *************** function __mpap_step2 *****************
  5733 ;; Defined at:
  5734 ;;		line 13 in file "mpap.c"
  5735 ;; Parameters:    Size  Location     Type
  5736 ;;		None
  5737 ;; Auto vars:     Size  Location     Type
  5738 ;;		None
  5739 ;; Return value:  Size  Location     Type
  5740 ;;                  1    wreg      void 
  5741 ;; Registers used:
  5742 ;;		status,2, status,0
  5743 ;; Tracked objects:
  5744 ;;		On entry : 0/0
  5745 ;;		On exit  : 0/0
  5746 ;;		Unchanged: 0/0
  5747 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5748 ;;      Params:         0       0       0       0       0       0       0       0       0
  5749 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5750 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5751 ;;      Totals:         0       0       0       0       0       0       0       0       0
  5752 ;;Total ram usage:        0 bytes
  5753 ;; Hardware stack levels used:    1
  5754 ;; This function calls:
  5755 ;;		Nothing
  5756 ;; This function is called by:
  5757 ;;		_mpap_do1step
  5758 ;; This function uses a non-reentrant model
  5759 ;;
  5760                           
  5761                           	psect	text48
  5762  001ADE                     __ptext48:
  5763                           	opt callstack 0
  5764  001ADE                     __mpap_step2:
  5765                           	opt callstack 21
  5766                           
  5767                           ;incstack = 0
  5768                           ;mpap.c: 15: do{LATD &= ~(1<<0);}while(0);
  5769  001ADE  908C               	bcf	3980,0,c	;volatile
  5770                           
  5771                           ;mpap.c: 16: do{LATD &= ~(1<<1);}while(0);
  5772  001AE0  928C               	bcf	3980,1,c	;volatile
  5773                           
  5774                           ;mpap.c: 17: do{LATD |= 1<<2;}while(0);
  5775  001AE2  848C               	bsf	3980,2,c	;volatile
  5776                           
  5777                           ;mpap.c: 18: do{LATD &= ~(1<<3);}while(0);
  5778  001AE4  968C               	bcf	3980,3,c	;volatile
  5779  001AE6  0012               	return		;funcret
  5780  001AE8                     __end_of__mpap_step2:
  5781                           	opt callstack 0
  5782                           
  5783 ;; *************** function __mpap_step1 *****************
  5784 ;; Defined at:
  5785 ;;		line 5 in file "mpap.c"
  5786 ;; Parameters:    Size  Location     Type
  5787 ;;		None
  5788 ;; Auto vars:     Size  Location     Type
  5789 ;;		None
  5790 ;; Return value:  Size  Location     Type
  5791 ;;                  1    wreg      void 
  5792 ;; Registers used:
  5793 ;;		status,2, status,0
  5794 ;; Tracked objects:
  5795 ;;		On entry : 0/0
  5796 ;;		On exit  : 0/0
  5797 ;;		Unchanged: 0/0
  5798 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5799 ;;      Params:         0       0       0       0       0       0       0       0       0
  5800 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5801 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5802 ;;      Totals:         0       0       0       0       0       0       0       0       0
  5803 ;;Total ram usage:        0 bytes
  5804 ;; Hardware stack levels used:    1
  5805 ;; This function calls:
  5806 ;;		Nothing
  5807 ;; This function is called by:
  5808 ;;		_mpap_do1step
  5809 ;; This function uses a non-reentrant model
  5810 ;;
  5811                           
  5812                           	psect	text49
  5813  001AE8                     __ptext49:
  5814                           	opt callstack 0
  5815  001AE8                     __mpap_step1:
  5816                           	opt callstack 21
  5817                           
  5818                           ;incstack = 0
  5819                           ;mpap.c: 7: do{LATD &= ~(1<<0);}while(0);
  5820  001AE8  908C               	bcf	3980,0,c	;volatile
  5821                           
  5822                           ;mpap.c: 8: do{LATD &= ~(1<<1);}while(0);
  5823  001AEA  928C               	bcf	3980,1,c	;volatile
  5824                           
  5825                           ;mpap.c: 9: do{LATD &= ~(1<<2);}while(0);
  5826  001AEC  948C               	bcf	3980,2,c	;volatile
  5827                           
  5828                           ;mpap.c: 10: do{LATD |= 1<<3;}while(0);
  5829  001AEE  868C               	bsf	3980,3,c	;volatile
  5830  001AF0  0012               	return		;funcret
  5831  001AF2                     __end_of__mpap_step1:
  5832                           	opt callstack 0
  5833                           
  5834 ;; *************** function __mpap_step4 *****************
  5835 ;; Defined at:
  5836 ;;		line 29 in file "mpap.c"
  5837 ;; Parameters:    Size  Location     Type
  5838 ;;		None
  5839 ;; Auto vars:     Size  Location     Type
  5840 ;;		None
  5841 ;; Return value:  Size  Location     Type
  5842 ;;                  1    wreg      void 
  5843 ;; Registers used:
  5844 ;;		status,2, status,0
  5845 ;; Tracked objects:
  5846 ;;		On entry : 0/0
  5847 ;;		On exit  : 0/0
  5848 ;;		Unchanged: 0/0
  5849 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5850 ;;      Params:         0       0       0       0       0       0       0       0       0
  5851 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5852 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5853 ;;      Totals:         0       0       0       0       0       0       0       0       0
  5854 ;;Total ram usage:        0 bytes
  5855 ;; Hardware stack levels used:    1
  5856 ;; This function calls:
  5857 ;;		Nothing
  5858 ;; This function is called by:
  5859 ;;		_mpap_do1step
  5860 ;; This function uses a non-reentrant model
  5861 ;;
  5862                           
  5863                           	psect	text50
  5864  001AF2                     __ptext50:
  5865                           	opt callstack 0
  5866  001AF2                     __mpap_step4:
  5867                           	opt callstack 21
  5868                           
  5869                           ;incstack = 0
  5870                           ;mpap.c: 31: do{LATD |= 1<<0;}while(0);
  5871  001AF2  808C               	bsf	3980,0,c	;volatile
  5872                           
  5873                           ;mpap.c: 32: do{LATD &= ~(1<<1);}while(0);
  5874  001AF4  928C               	bcf	3980,1,c	;volatile
  5875                           
  5876                           ;mpap.c: 33: do{LATD &= ~(1<<2);}while(0);
  5877  001AF6  948C               	bcf	3980,2,c	;volatile
  5878                           
  5879                           ;mpap.c: 34: do{LATD &= ~(1<<3);}while(0);
  5880  001AF8  968C               	bcf	3980,3,c	;volatile
  5881  001AFA  0012               	return		;funcret
  5882  001AFC                     __end_of__mpap_step4:
  5883                           	opt callstack 0
  5884                           
  5885 ;; *************** function __mpap_off *****************
  5886 ;; Defined at:
  5887 ;;		line 43 in file "mpap.c"
  5888 ;; Parameters:    Size  Location     Type
  5889 ;;		None
  5890 ;; Auto vars:     Size  Location     Type
  5891 ;;		None
  5892 ;; Return value:  Size  Location     Type
  5893 ;;                  1    wreg      void 
  5894 ;; Registers used:
  5895 ;;		status,2, status,0
  5896 ;; Tracked objects:
  5897 ;;		On entry : 0/0
  5898 ;;		On exit  : 0/0
  5899 ;;		Unchanged: 0/0
  5900 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5901 ;;      Params:         0       0       0       0       0       0       0       0       0
  5902 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5903 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5904 ;;      Totals:         0       0       0       0       0       0       0       0       0
  5905 ;;Total ram usage:        0 bytes
  5906 ;; Hardware stack levels used:    1
  5907 ;; This function calls:
  5908 ;;		Nothing
  5909 ;; This function is called by:
  5910 ;;		_mpap_job
  5911 ;; This function uses a non-reentrant model
  5912 ;;
  5913                           
  5914                           	psect	text51
  5915  001AFC                     __ptext51:
  5916                           	opt callstack 0
  5917  001AFC                     __mpap_off:
  5918                           	opt callstack 23
  5919                           
  5920                           ;incstack = 0
  5921                           ;mpap.c: 45: do{LATD &= ~(1<<0);}while(0);
  5922  001AFC  908C               	bcf	3980,0,c	;volatile
  5923                           
  5924                           ;mpap.c: 46: do{LATD &= ~(1<<1);}while(0);
  5925  001AFE  928C               	bcf	3980,1,c	;volatile
  5926                           
  5927                           ;mpap.c: 47: do{LATD &= ~(1<<2);}while(0);
  5928  001B00  948C               	bcf	3980,2,c	;volatile
  5929                           
  5930                           ;mpap.c: 48: do{LATD &= ~(1<<3);}while(0);
  5931  001B02  968C               	bcf	3980,3,c	;volatile
  5932  001B04  0012               	return		;funcret
  5933  001B06                     __end_of__mpap_off:
  5934                           	opt callstack 0
  5935                           
  5936                           	psect	text52
  5937  000000                     __ptext52:
  5938                           	opt callstack 0
  5939                           
  5940                           	psect	rparam
  5941  0000                     
  5942                           	psect	temp
  5943  000051                     btemp:
  5944                           	opt callstack 0
  5945  000051                     	ds	1
  5946  0000                     int$flags	set	btemp
  5947  0000                     wtemp8	set	btemp+1
  5948  0000                     ttemp5	set	btemp+1
  5949  0000                     ttemp6	set	btemp+4
  5950  0000                     ttemp7	set	btemp+8
  5951                           tosu	equ	0xFFF
  5952                           tosh	equ	0xFFE
  5953                           tosl	equ	0xFFD
  5954                           stkptr	equ	0xFFC
  5955                           pclatu	equ	0xFFB
  5956                           pclath	equ	0xFFA
  5957                           pcl	equ	0xFF9
  5958                           tblptru	equ	0xFF8
  5959                           tblptrh	equ	0xFF7
  5960                           tblptrl	equ	0xFF6
  5961                           tablat	equ	0xFF5
  5962                           prodh	equ	0xFF4
  5963                           prodl	equ	0xFF3
  5964                           indf0	equ	0xFEF
  5965                           postinc0	equ	0xFEE
  5966                           postdec0	equ	0xFED
  5967                           preinc0	equ	0xFEC
  5968                           plusw0	equ	0xFEB
  5969                           fsr0h	equ	0xFEA
  5970                           fsr0l	equ	0xFE9
  5971                           wreg	equ	0xFE8
  5972                           indf1	equ	0xFE7
  5973                           postinc1	equ	0xFE6
  5974                           postdec1	equ	0xFE5
  5975                           preinc1	equ	0xFE4
  5976                           plusw1	equ	0xFE3
  5977                           fsr1h	equ	0xFE2
  5978                           fsr1l	equ	0xFE1
  5979                           bsr	equ	0xFE0
  5980                           indf2	equ	0xFDF
  5981                           postinc2	equ	0xFDE
  5982                           postdec2	equ	0xFDD
  5983                           preinc2	equ	0xFDC
  5984                           plusw2	equ	0xFDB
  5985                           fsr2h	equ	0xFDA
  5986                           fsr2l	equ	0xFD9
  5987                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    12
    Data        31
    BSS         181
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     45      80
    BANK0           160     14     127
    BANK1           256      0      64
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    strlen@s	PTR const unsigned char  size(1) Largest target is 10
		 -> disp7s_write_i@buff(BANK0[10]), 

    strlen@cp	PTR const unsigned char  size(1) Largest target is 10
		 -> disp7s_write_i@buff(BANK0[10]), 

    utoa@buf	PTR unsigned char  size(1) Largest target is 10
		 -> disp7s_write_i@buff(BANK0[10]), disp7s_write_f@buff(COMRAM[10]), 

    sp__utoa	PTR unsigned char  size(1) Largest target is 10
		 -> disp7s_write_i@buff(BANK0[10]), disp7s_write_f@buff(COMRAM[10]), 

    itoa@buf	PTR unsigned char  size(1) Largest target is 10
		 -> disp7s_write_i@buff(BANK0[10]), disp7s_write_f@buff(COMRAM[10]), 

    itoa@cp	PTR unsigned char  size(1) Largest target is 10
		 -> disp7s_write_i@buff(BANK0[10]), disp7s_write_f@buff(COMRAM[10]), 

    disp7s_write_i@pDisp	PTR unsigned char  size(2) Largest target is 64
		 -> pulsonic.disp7s(BANK1[5]), pulsonic(BANK1[64]), 

    sp__itoa	PTR unsigned char  size(1) Largest target is 10
		 -> disp7s_write_i@buff(BANK0[10]), disp7s_write_f@buff(COMRAM[10]), 

    S471_disp7s_mux$Qonoff	PTR FTN()void [2] size(2) Largest target is 1
		 -> disp7s_mux4_on(), disp7s_mux4_off(), disp7s_mux3_on(), disp7s_mux3_off(), 
		 -> disp7s_mux2_on(), disp7s_mux2_off(), disp7s_mux1_on(), disp7s_mux1_off(), 
		 -> disp7s_mux0_on(), disp7s_mux0_off(), 

    disp7s_mux.Qonoff	PTR FTN()void [2] size(2) Largest target is 1
		 -> disp7s_mux4_on(), disp7s_mux4_off(), disp7s_mux3_on(), disp7s_mux3_off(), 
		 -> disp7s_mux2_on(), disp7s_mux2_off(), disp7s_mux1_on(), disp7s_mux1_off(), 
		 -> disp7s_mux0_on(), disp7s_mux0_off(), 

    mpap_off	PTR FTN()void  size(2) Largest target is 1
		 -> _mpap_off(), 

    mpap_step	PTR FTN()void [4] size(2) Largest target is 1
		 -> _mpap_step4(), _mpap_step3(), _mpap_step2(), _mpap_step1(), 

    S226_key$keyDo	PTR FTN()void  size(2) Largest target is 0

    key.keyDo	PTR FTN()void  size(2) Largest target is 0

    S226_key$keyRead	PTR FTN()unsigned char  size(2) Largest target is 1
		 -> keyRead_pin_key5(), keyRead_pin_key4(), keyRead_pin_key3(), keyRead_pin_key2(), 
		 -> keyRead_pin_key1(), 

    key.keyRead	PTR FTN()unsigned char  size(2) Largest target is 1
		 -> keyRead_pin_key5(), keyRead_pin_key4(), keyRead_pin_key3(), keyRead_pin_key2(), 
		 -> keyRead_pin_key1(), 


Critical Paths under _main in COMRAM

    _main->_disp7s_modeDisp_writeInt
    _main->_disp7s_qtyDisp_writeInt
    _ikb_job->_ikey_parsing
    _ikey_parsing->___ftge
    ___lwtoft->___ftpack
    ___ftge->___lwtoft
    _ikb_flush->_ikey_clear_all_flag
    _disp7s_qtyDisp_writeInt->_disp7s_write_i
    _disp7s_modeDisp_writeInt->_disp7s_write_i
    _disp7s_write_i->_itoa
    _itoa->_utoa
    _utoa->___lwdiv
    _disp7s_job->_disp7s_mux_Q
    _disp7s_init->_disp7s_mux_init

Critical Paths under _INTERRUPCION in COMRAM

    _INTERRUPCION->_mpap_job
    _mpap_job->_mpap_homming
    _mpap_normal_mode->_mpap_do1step
    _mpap_homming->_mpap_do1step

Critical Paths under _main in BANK0

    _disp7s_qtyDisp_writeInt->_disp7s_write_i
    _disp7s_modeDisp_writeInt->_disp7s_write_i

Critical Paths under _INTERRUPCION in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPCION in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPCION in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPCION in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPCION in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPCION in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPCION in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INTERRUPCION in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0   18236
                                             43 COMRAM     2     2      0
                        _disp7s_init
                         _disp7s_job
           _disp7s_modeDisp_writeInt
            _disp7s_qtyDisp_writeInt
                          _ikb_flush
                           _ikb_init
                            _ikb_job
                          _mpap_sych
                      _pulsonic_init
                           _pump_job
 ---------------------------------------------------------------------------------
 (1) _pump_job                                             1     1      0       5
                                             10 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _pulsonic_init                                        1     1      0      68
                                             10 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _mpap_sych                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ikb_job                                              0     0      0    6662
                       _ikey_parsing
                          _ikey_scan
 ---------------------------------------------------------------------------------
 (2) _ikey_scan                                            2     2      0     463
                                             10 COMRAM     2     2      0
                   _keyRead_pin_key1 *
                   _keyRead_pin_key2 *
                   _keyRead_pin_key3 *
                   _keyRead_pin_key4 *
                   _keyRead_pin_key5 *
 ---------------------------------------------------------------------------------
 (3) _keyRead_pin_key5                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _keyRead_pin_key4                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _keyRead_pin_key3                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _keyRead_pin_key2                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _keyRead_pin_key1                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ikey_parsing                                         5     5      0    6199
                                             30 COMRAM     5     5      0
                             ___ftge
                           ___lwtoft
                 _ikey_is_accessible
 ---------------------------------------------------------------------------------
 (3) _ikey_is_accessible                                   3     3      0      66
                                             10 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (3) ___lwtoft                                             3     0      3    3179
                                             18 COMRAM     3     0      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             8     3      5    2727
                                             10 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (3) ___ftge                                               9     3      6    1126
                                             21 COMRAM     9     3      6
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (1) _ikb_init                                             1     1      0     200
                                             10 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _ikb_flush                                            0     0      0      68
                _ikey_clear_all_flag
 ---------------------------------------------------------------------------------
 (2) _ikey_clear_all_flag                                  1     1      0      68
                                             10 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _disp7s_qtyDisp_writeInt                              2     0      2    5387
                                             41 COMRAM     2     0      2
                     _disp7s_write_i
 ---------------------------------------------------------------------------------
 (1) _disp7s_modeDisp_writeInt                             2     0      2    5387
                                             41 COMRAM     2     0      2
                     _disp7s_write_i
 ---------------------------------------------------------------------------------
 (2) _disp7s_write_i                                      24    19      5    5266
                                             31 COMRAM    10     5      5
                                              0 BANK0     14    14      0
                             ___wmul
                               _itoa
                             _strlen
 ---------------------------------------------------------------------------------
 (3) _strlen                                               3     1      2     220
                                             10 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (3) _itoa                                                 6     1      5    2448
                                             25 COMRAM     6     1      5
                               _utoa
 ---------------------------------------------------------------------------------
 (4) _utoa                                                 8     3      5    1723
                                             17 COMRAM     8     3      5
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (5) ___lwmod                                              5     1      4     412
                                             10 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (5) ___lwdiv                                              7     3      4     601
                                             10 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4    1412
                                             10 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (1) _disp7s_job                                           3     3      0     181
                                             18 COMRAM     3     3      0
                    _disp7s_mux0_off *
                     _disp7s_mux0_on *
                    _disp7s_mux1_off *
                     _disp7s_mux1_on *
                    _disp7s_mux2_off *
                     _disp7s_mux2_on *
                    _disp7s_mux3_off *
                     _disp7s_mux3_on *
                    _disp7s_mux4_off *
                     _disp7s_mux4_on *
                       _disp7s_mux_Q
 ---------------------------------------------------------------------------------
 (2) _disp7s_mux_Q                                         8     8      0     134
                                             10 COMRAM     8     8      0
                    _disp7s_mux0_off *
                     _disp7s_mux0_on *
                    _disp7s_mux1_off *
                     _disp7s_mux1_on *
                    _disp7s_mux2_off *
                     _disp7s_mux2_on *
                    _disp7s_mux3_off *
                     _disp7s_mux3_on *
                    _disp7s_mux4_off *
                     _disp7s_mux4_on *
 ---------------------------------------------------------------------------------
 (1) _disp7s_init                                          1     1      0     204
                                             11 COMRAM     1     1      0
                    _disp7s_mux_init
 ---------------------------------------------------------------------------------
 (2) _disp7s_mux_init                                      1     1      0      68
                                             10 COMRAM     1     1      0
                    _disp7s_mux0_off *
                     _disp7s_mux0_on *
                    _disp7s_mux1_off *
                     _disp7s_mux1_on *
                    _disp7s_mux2_off *
                     _disp7s_mux2_on *
                    _disp7s_mux3_off *
                     _disp7s_mux3_on *
                    _disp7s_mux4_off *
                     _disp7s_mux4_on *
 ---------------------------------------------------------------------------------
 (3) _disp7s_mux4_on                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _disp7s_mux4_off                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _disp7s_mux3_on                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _disp7s_mux3_off                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _disp7s_mux2_on                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _disp7s_mux2_off                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _disp7s_mux1_on                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _disp7s_mux1_off                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _disp7s_mux0_on                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _disp7s_mux0_off                                      0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _INTERRUPCION                                         6     6      0     101
                                              4 COMRAM     6     6      0
                           _mpap_job
 ---------------------------------------------------------------------------------
 (7) _mpap_job                                             1     1      0     101
                                              3 COMRAM     1     1      0
                          __mpap_off *
                       _mpap_homming
                   _mpap_normal_mode
 ---------------------------------------------------------------------------------
 (8) _mpap_normal_mode                                     1     1      0      46
                                              1 COMRAM     1     1      0
                       _mpap_do1step
 ---------------------------------------------------------------------------------
 (8) _mpap_homming                                         2     2      0      47
                                              1 COMRAM     2     2      0
                       _mpap_do1step
 ---------------------------------------------------------------------------------
 (9) _mpap_do1step                                         1     1      0      22
                                              0 COMRAM     1     1      0
                        __mpap_step1 *
                        __mpap_step2 *
                        __mpap_step3 *
                        __mpap_step4 *
 ---------------------------------------------------------------------------------
 (10) __mpap_step4                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (10) __mpap_step3                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (10) __mpap_step2                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (10) __mpap_step1                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (8) __mpap_off                                            0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _disp7s_init
     _disp7s_mux_init
       _disp7s_mux0_off *
       _disp7s_mux0_on *
       _disp7s_mux1_off *
       _disp7s_mux1_on *
       _disp7s_mux2_off *
       _disp7s_mux2_on *
       _disp7s_mux3_off *
       _disp7s_mux3_on *
       _disp7s_mux4_off *
       _disp7s_mux4_on *
   _disp7s_job
     _disp7s_mux0_off *
     _disp7s_mux0_on *
     _disp7s_mux1_off *
     _disp7s_mux1_on *
     _disp7s_mux2_off *
     _disp7s_mux2_on *
     _disp7s_mux3_off *
     _disp7s_mux3_on *
     _disp7s_mux4_off *
     _disp7s_mux4_on *
     _disp7s_mux_Q *
       _disp7s_mux0_off *
       _disp7s_mux0_on *
       _disp7s_mux1_off *
       _disp7s_mux1_on *
       _disp7s_mux2_off *
       _disp7s_mux2_on *
       _disp7s_mux3_off *
       _disp7s_mux3_on *
       _disp7s_mux4_off *
       _disp7s_mux4_on *
   _disp7s_modeDisp_writeInt
     _disp7s_write_i
       ___wmul
       _itoa
         _utoa
           ___lwdiv
           ___lwmod
       _strlen
   _disp7s_qtyDisp_writeInt
     _disp7s_write_i
       ___wmul
       _itoa
         _utoa
           ___lwdiv
           ___lwmod
       _strlen
   _ikb_flush
     _ikey_clear_all_flag
   _ikb_init
   _ikb_job
     _ikey_parsing
       ___ftge
         ___lwtoft (ARG)
           ___ftpack
       ___lwtoft
         ___ftpack
       _ikey_is_accessible
     _ikey_scan
       _keyRead_pin_key1 *
       _keyRead_pin_key2 *
       _keyRead_pin_key3 *
       _keyRead_pin_key4 *
       _keyRead_pin_key5 *
   _mpap_sych
   _pulsonic_init
   _pump_job

 _INTERRUPCION (ROOT)
   _mpap_job
     __mpap_off *
     _mpap_homming *
       _mpap_do1step
         __mpap_step1 *
         __mpap_step2 *
         __mpap_step3 *
         __mpap_step4 *
     _mpap_normal_mode *
       _mpap_do1step
         __mpap_step1 *
         __mpap_step2 *
         __mpap_step3 *
         __mpap_step4 *

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      40       7       25.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      E      7F       5       79.4%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     2D      50       1       85.1%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     10F      20        0.0%
DATA                 0      0     10F       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Sat Jul 13 00:11:05 2019

              ___wmul@multiplicand 000D                        __CFG_BORV$3 000000  
            disp7s_write_i@K10MULT 00DC                                l108 116A  
                              l311 0DC2                                l305 0D58  
                              l314 0E14                                l309 0D8C  
                              l282 08F0                                l291 09F6  
                              l276 093A                                l293 0A3A  
                              l295 0A9C                                l297 0AE0  
                              l289 0994                                l299 0C2C  
                              _GIE 007F97                       __CFG_BOR$OFF 000000  
                              _key 0060                                prod 000FF3  
                              tosl 000FFD                                wreg 000FE8  
           __size_of_pulsonic_init 0038                       __CFG_LVP$OFF 000000  
                     __CFG_WDT$OFF 000000                               l1237 1780  
                             l2117 1636                               l1247 18E6  
                             l3111 13B6                               l3105 18DC  
                             l3121 13E8                               l2129 1654  
                             l1429 1426                               l3231 0FEE  
                             l2503 155C                               l2351 1288  
                             l3153 1A2C                               l3233 100A  
                             l2513 15AA                               l2361 12E4  
                             l2353 12A6                               l3305 1162  
                             l3147 19C2                               l3155 1A2E  
                             l3243 1054                               l2507 157E  
                             l2523 0E42                               l3323 1188  
                             l3077 174E                               l3253 109C  
                             l2357 12BC                               l2349 127E  
                             l2437 17D2                               l2541 0F12  
                             l2711 1936                               l3079 1756  
                             l3247 107A                               l3239 1034  
                             l2359 12DA                               l2623 0B92  
                             l3089 1776                               l3097 18BC  
                             l2529 0E80                               l3329 119A  
                             l3099 18C4                               l3259 10DE  
                             l2547 0F52                               l2539 0EF2  
                             l2725 1314                               l2653 0E34  
                             l2637 0CDE                               l2629 0C1C  
                             l2581 0890                               l2663 1A4C  
                             l2567 0812                               l2559 0FD6  
                             l2729 137C                               l2585 08B0  
                             l2915 150A                               l2579 0880  
                             l2931 145C                               l2909 14CE  
                             l2589 08D0                               l2871 16B0  
                             l2847 11E2                               l2951 1492  
                             l2935 1468                               l2961 14AE  
                             l2945 1488                               l2859 1686  
                             l2947 148A                               l2887 1980  
                             _LATA 000F89                               _LATB 000F8A  
                             _LATC 000F8B                               u1440 1270  
                             _LATD 000F8C                               _LATE 000F8D  
                             u2228 1946                               u2244 132A  
                             u2229 195A                               u2245 1324  
                             u2254 1344                               u1710 0EE2  
                             u2255 133E                               u1480 12EE  
                             u2520 1458                               u1708 0EC8  
                             u1709 0EDC                               u2278 1368  
                             u2288 138C                               u2289 13A0  
                             u1738 0F36                               u1739 0F4A  
                             u2740 175A                               u1668 0E64  
                             u1669 0E78                               u2478 14DE  
                             u2479 14F2                               u2770 18C8  
                             u1778 0F9C                               u1779 0FB0  
                             _UCFG 000F6F                               _UCON 000F6D  
                     __CFG_PWRT$ON 000000                               _main 10EE  
                     ___ftpack@arg 000B                               _lock 004B  
                             _itoa 19AA                               _mpap 002E  
                     ___ftpack@exp 000E                               fsr1h 000FE2  
                             fsr2h 000FDA                               _pump 0036  
                             indf2 000FDF                               fsr1l 000FE1  
                             fsr2l 000FD9                               btemp 0051  
                             _utoa 13AE    __end_of_disp7s_qtyDisp_writeInt 1A9C  
                             prodh 000FF4                               prodl 000FF3  
                             start 000E                     pulsonic_init@i 000B  
                    __CFG_IESO$OFF 000000                      __CFG_MCLRE$ON 000000  
             __end_of_DISP7S_CHARS 080D                       ___param_bank 000000  
                    __CFG_PLLDIV$5 000000                              ?_main 0001  
                            ?_itoa 001A                              _CMCON 000FB4  
                            ?_utoa 0012                              _T0CON 000FD5  
                  __end_of___lwdiv 178A                    __end_of___lwmod 18F0  
                            i2l125 1802                              i2l440 18AA  
                            i2l434 1734                              _TMR0H 000FD7  
                            _TMR0L 000FD6                              _PORTC 000F82  
                            _PORTD 000F83                              _PORTE 000F84  
                    __CFG_USBDIV$2 000000                              _TRISA 000F92  
                            _TRISB 000F93                              _TRISC 000F94  
                            _TRISD 000F95                              _TRISE 000F96  
                   __CFG_FCMEN$OFF 000000                    __end_of_ikb_job 1AC0  
                    ?_INTERRUPCION 0001                    _disp7s_mux0_off 1B42  
                  _disp7s_mux1_off 1B3A                    _disp7s_mux2_off 1B32  
                  _disp7s_mux3_off 1B2A                    _disp7s_mux4_off 1B22  
                    ___ftpack@sign 000F                              pclath 000FFA  
                            tablat 000FF5                              ttemp5 0052  
                            ttemp6 0055                              ttemp7 0059  
                            utoa@c 0019                    _disp7s_mux_init 1932  
                            utoa@v 0017                              status 000FD8  
                            wtemp8 0052   __end_of_disp7s_modeDisp_writeInt 1AB6  
      __size_of_ikey_is_accessible 004C                      ?_ikey_parsing 0001  
             __size_of__mpap_step1 000A               __size_of__mpap_step2 000A  
             __size_of__mpap_step3 000A               __size_of__mpap_step4 000A  
                    _pulsonic_init 1972                    __initialization 15AE  
                     __end_of_main 11AA                       __end_of_itoa 19DC  
                     __end_of_utoa 1442                             ??_main 002C  
                           ??_itoa 001F               __end_of_disp7s_mux_Q 13AE  
                           ??_utoa 0017                      mpap_do1step@i 0050  
                    __activetblptr 000002                     ??_INTERRUPCION 0005  
             __size_of_disp7s_init 005E                             _ADCON1 000FC1  
         __end_of_keyRead_pin_key1 1B0E           __end_of_keyRead_pin_key2 1AD4  
         __end_of_keyRead_pin_key3 1ACA           __end_of_keyRead_pin_key4 1B1C  
         __end_of_keyRead_pin_key5 1B16                   __end_of___ftpack 130E  
                           i2l2445 1906                             i2l2449 190E  
                           i2l2681 1716                             i2l2973 182C  
                           i2l2977 183A                   __end_of___lwtoft 1A26  
                           _TMR0IE 007F95                             _TMR0IF 007F92  
                   ??_ikey_parsing 001F                     __CFG_VREGEN$ON 000000  
                   ?_pulsonic_init 0001           __end_of_mpap_normal_mode 18AE  
         _error_requestToWriteDisp 0048                   __end_of_ikb_init 1260  
                           ___ftge 153A                             ___wmul 19DC  
                        ??___lwdiv 000F                          ??___lwmod 000F  
                           clear_0 15F2                             clear_1 15FE  
                           clear_2 160A                   __end_of_mpap_job 1866  
                        ??_ikb_job 0024                             _strlen 1A26  
          __end_of_disp7s_mux0_off 1B46            __end_of_disp7s_mux1_off 1B3E  
          __end_of_disp7s_mux2_off 1B36            __end_of_disp7s_mux3_off 1B2E  
          __end_of_disp7s_mux4_off 1B26                       __pdataCOMRAM 004E  
                     __mediumconst 0000                             tblptrh 000FF7  
                           tblptrl 000FF6                             tblptru 000FF8  
              ikey_is_accessible@k 000D            __end_of_disp7s_mux_init 1972  
                 __end_of_pump_job 1682       __size_of_ikey_clear_all_flag 001E  
                       __accesstop 0060            __end_of__initialization 1610  
                  __CFG_PBADEN$OFF 000000                      ?_mpap_do1step 0001  
                       ___ftge@ff1 0016                         ___ftge@ff2 0019  
                    ___rparam_used 000001                     __pcstackCOMRAM 0001  
                     __pidataBANK0 1A66                      ?_mpap_homming 0001  
               __size_of__mpap_off 000A                         ___lwtoft@c 0013  
__size_of_disp7s_modeDisp_writeInt 001A          ?_disp7s_modeDisp_writeInt 002A  
                     _DISP7S_CHARS 080B                 __size_of_ikb_flush 0006  
                   mpap_do1step@KI 0001                         __pbssBANK0 0060  
                       __pbssBANK1 0100                     ??_mpap_do1step 0001  
               __size_of_ikey_scan 01A0                    ??_pulsonic_init 000B  
                   ??_mpap_homming 0002                            ?___ftge 0016  
             __end_of_INTERRUPCION 181E                 __size_of_mpap_sych 0080  
                          ?___wmul 000B              __size_of_disp7s_mux_Q 00A0  
                  disp7s_write_i@i 00DE           ?_disp7s_qtyDisp_writeInt 002A  
                       _disp7s_job 14C2                         _disp7s_mux 00B5  
                        ?___ftpack 000B                            ?_strlen 000B  
                        ?___lwtoft 0013            __size_of_disp7s_mux0_on 0004  
          __size_of_disp7s_mux1_on 0004            __size_of_disp7s_mux2_on 0004  
          __size_of_disp7s_mux3_on 0004            __size_of_disp7s_mux4_on 0004  
                 ?_disp7s_mux0_off 0001                   ?_disp7s_mux1_off 0001  
                 ?_disp7s_mux2_off 0001                   ?_disp7s_mux3_off 0001  
                 ?_disp7s_mux4_off 0001               __end_of_ikey_parsing 0E3E  
          __size_of_disp7s_write_i 0110                         _disp_owner 0049  
                 ?_disp7s_mux_init 0001                          ?_ikb_init 0001  
                disp7s_write_i@num 0023                  __end_of__mpap_off 1B06  
                     _disp7s_mux_Q 130E                          ?_mpap_job 0001  
                          __Hparam 0000                            __Lparam 0000  
      disp7s_modeDisp_writeInt@num 002A          disp7s_write_i@NUM_OF_DISP 0022  
                __end_of_ikb_flush 1B22                    __size_of___ftge 0074  
                  __size_of___wmul 0026                            ___lwdiv 1738  
                        ?_pump_job 0001                            ___lwmod 18AE  
                     __psmallconst 0800                            __pcinit 15AE  
                       ??___ftpack 0010                            __ramtop 0800  
                          __ptext0 10EE                            __ptext1 161E  
                          __ptext2 1972                            __ptext3 1442  
                          __ptext4 1AB6                            __ptext5 0E3E  
                          __ptext6 1B16                            __ptext7 1AC0  
                          __ptext8 1ACA                            __ptext9 1B06  
                __end_of_ikey_scan 0FDE                            _ikb_job 1AB6  
                       ??___lwtoft 0016                    __size_of_strlen 0022  
                          _group_x 00B0           _error_grantedToWriteDisp 0047  
                __end_of_mpap_sych 14C2            mpap_normal_mode@cod_ret 0002  
                       ??_ikb_init 000B                     __pintcode_body 17D6  
             end_of_initialization 1610         __end_of_ikey_is_accessible 17D6  
                ?_keyRead_pin_key1 0001                  ?_keyRead_pin_key2 0001  
                ?_keyRead_pin_key3 0001                  ?_keyRead_pin_key4 0001  
                ?_keyRead_pin_key5 0001                      ??__mpap_step1 0001  
                    ??__mpap_step2 0001                      ??__mpap_step3 0001  
                    ??__mpap_step4 0001                            itoa@buf 001A  
                          itoa@val 001B                      __Lmediumconst 0000  
                          int_func 17D6                 ??_keyRead_pin_key1 000B  
               ??_keyRead_pin_key2 000B                 ??_keyRead_pin_key3 000B  
               ??_keyRead_pin_key4 000B                 ??_keyRead_pin_key5 000B  
              errorHandler_queue@c 003B                errorHandler_queue@i 0042  
                       ??_mpap_job 0004                  ?_mpap_normal_mode 0001  
                  main@c_access_kb 002C                            postdec1 000FE5  
                          postdec2 000FDD                 ??_mpap_normal_mode 0002  
                          postinc0 000FEE                            postinc1 000FE6  
                          postinc2 000FDE                         ??_pump_job 000B  
                          utoa@buf 0012                            utoa@val 0013  
                      ?_disp7s_job 0001                _ikey_clear_all_flag 1A48  
                          strlen@s 000B                       _machineState 004A  
             __end_of_mpap_do1step 1932                      ??_disp7s_init 000C  
             ikey_clear_all_flag@i 000B               __end_of_mpap_homming 1738  
             ?_ikey_clear_all_flag 0001                disp7s_write_i@pDisp 0020  
            __size_of_INTERRUPCION 1816                __end_of__mpap_step1 1AF2  
              __end_of__mpap_step2 1AE8                __end_of__mpap_step3 1ADE  
              __end_of__mpap_step4 1AFC                __end_of_DISP7S_NUMS 080B  
                   __end_of___ftge 15AE              __size_of_ikey_parsing 0630  
                   __end_of___wmul 1A02                      __pidataCOMRAM 1B4A  
                   _disp7s_mux0_on 1B3E                     _disp7s_mux1_on 1B36  
                   _disp7s_mux2_on 1B2E                     _disp7s_mux3_on 1B26  
                   _disp7s_mux4_on 1B46                     __end_of_strlen 1A48  
              start_initialization 15AE                     _disp7s_write_i 0FDE  
                     _INTERRUPCION 0008                __end_of_disp7s_init 16E0  
            ??_ikey_clear_all_flag 000B                         ikey_scan@k 000C  
              __size_of_disp7s_job 0078                       _ikey_parsing 080E  
                         ??___ftge 001C                           ??___wmul 000F  
                      __pdataBANK0 00B5             __end_of_disp7s_mux0_on 1B42  
           __end_of_disp7s_mux1_on 1B3A             __end_of_disp7s_mux2_on 1B32  
           __end_of_disp7s_mux3_on 1B2A             __end_of_disp7s_mux4_on 1B4A  
                         ??_strlen 000D             __end_of_disp7s_write_i 10EE  
                __size_of___ftpack 00AE                        __pbssCOMRAM 002E  
                __size_of___lwtoft 0024                      __pcstackBANK0 00D1  
       disp7s_qtyDisp_writeInt@num 002A                   disp7s_mux_init@i 000B  
                     mpap_sych@sm0 0040   __size_of_disp7s_qtyDisp_writeInt 001A  
                    ikey_parsing@k 0023                  __size_of_ikb_init 00B6  
                      __mpap_step1 1AE8                        __mpap_step2 1ADE  
                      __mpap_step3 1AD4                        __mpap_step4 1AF2  
                      _DISP7S_NUMS 0801                         mpap_sych@c 003F  
            __end_of_pulsonic_init 19AA                          __mpap_off 1AFC  
                 ___lwdiv@dividend 000B                  __size_of_mpap_job 0048  
                        __pintcode 0008              __size_of_mpap_do1step 0042  
                         ?___lwdiv 000B                           ?___lwmod 000B  
         _disp7s_modeDisp_writeInt 1A9C                    ?_disp7s_mux0_on 0001  
                  ?_disp7s_mux1_on 0001                    ?_disp7s_mux2_on 0001  
                  ?_disp7s_mux3_on 0001                    ?_disp7s_mux4_on 0001  
                        _ikb_flush 1B1C                  __size_of_pump_job 0064  
                         ?_ikb_job 0001                   disp7s_write_i@pi 00DB  
                      __smallconst 0800              __size_of_mpap_homming 0058  
                        _main_flag 004C                    ?_disp7s_write_i 0020  
                      _disp7s_init 1682                          _ikey_scan 0E3E  
                 ___lwdiv@quotient 0010           __size_of_disp7s_mux0_off 0004  
         __size_of_disp7s_mux1_off 0004           __size_of_disp7s_mux2_off 0004  
         __size_of_disp7s_mux3_off 0004           __size_of_disp7s_mux4_off 0004  
                        _mpap_step 00C9                          _mpap_sych 1442  
                   ___wmul@product 000F                       _mpap_do1step 18F0  
         __size_of_disp7s_mux_init 0040                         ?__mpap_off 0001  
                         i2u159_48 191E                           i2u266_48 184C  
                         i2u266_49 1860                 _ikey_is_accessible 178A  
                     _mpap_homming 16E0          __size_of_keyRead_pin_key1 0008  
        __size_of_keyRead_pin_key2 000A          __size_of_keyRead_pin_key3 000A  
        __size_of_keyRead_pin_key4 0006          __size_of_keyRead_pin_key5 0008  
                     ??_disp7s_job 0013                         ?_ikb_flush 0001  
                ___wmul@multiplier 000B                ?_ikey_is_accessible 0001  
                        ikb_init@i 000B          __size_of_mpap_normal_mode 0048  
               disp7s_write_i@buff 00D1                         ?_ikey_scan 0001  
                        copy_data0 15C2                mpap_homming@cod_ret 0003  
                       ?_mpap_sych 0001               ??_ikey_is_accessible 000B  
               __end_of_disp7s_job 153A                           __Hrparam 0000  
                         __Lrparam 0000               check_startSignal@sm0 0046  
             check_startSignal@sm1 0045                   __size_of___lwdiv 0052  
                 __size_of___lwmod 0042                           ___ftpack 1260  
                         ___lwtoft 1A02                   __size_of_ikb_job 000A  
                    disp7s_mux_Q@i 0012                      disp7s_mux_Q@q 0011  
            errorHandler_queue@sm0 0041                    ___lwdiv@divisor 000D  
          _disp7s_qtyDisp_writeInt 1A82                  check_oilLevel@sm0 0044  
                check_oilLevel@sm1 0043                    ___lwdiv@counter 000F  
                         __ptext10 1B0E                           __ptext11 080E  
                         __ptext20 1A9C                           __ptext12 178A  
                         __ptext21 0FDE                           __ptext13 1A02  
                         __ptext30 1682                           __ptext22 1A26  
                         __ptext14 1260                           __ptext31 1932  
                         __ptext23 19AA                           __ptext15 153A  
                         __ptext40 1B42                           __ptext32 1B22  
                         __ptext24 13AE                           __ptext16 11AA  
                         __ptext41 1B46                           __ptext33 1B26  
                         __ptext25 18AE                           __ptext17 1B1C  
                         __ptext50 1AF2                           __ptext34 1B2A  
                         __ptext26 1738                           __ptext18 1A48  
                         __ptext51 1AFC                           __ptext43 181E  
                         __ptext35 1B2E                           __ptext27 19DC  
                         __ptext19 1A82                           __ptext52 0000  
                         __ptext44 1866                           __ptext36 1B32  
                         __ptext28 14C2                           __ptext45 16E0  
                         __ptext37 1B36                           __ptext29 130E  
                         __ptext46 18F0                           __ptext38 1B3A  
                         __ptext47 1AD4                           __ptext39 1B3E  
                         __ptext48 1ADE                           __ptext49 1AE8  
                         _ikb_init 11AA                           _autoMode 0039  
                    __size_of_main 00BC                      __size_of_itoa 0032  
                    __size_of_utoa 0094                           _isr_flag 004D  
                         _mpap_job 181E                           _mpap_off 004E  
                ??_disp7s_mux0_off 000B                  ??_disp7s_mux1_off 000B  
                ??_disp7s_mux2_off 000B                  ??_disp7s_mux3_off 000B  
                      ??__mpap_off 0001                  ??_disp7s_mux4_off 000B  
                main@c_access_disp 002D                           int$flags 0051  
                ??_disp7s_mux_init 000B                           _pump_job 161E  
                         _pulsonic 0100                        ??_ikb_flush 000C  
            __CFG_CPUDIV$OSC1_PLL2 000000        __end_of_ikey_clear_all_flag 1A66  
                        pump_job@c 003E                        ??_ikey_scan 000B  
                         itoa@base 001D                       disp7s_job@pq 0015  
                     disp7s_init@i 000C                           intlevel2 0000  
                      ??_mpap_sych 000B                   ___lwmod@dividend 000B  
                     ?__mpap_step1 0001                       ?__mpap_step2 0001  
                     ?__mpap_step3 0001                       ?__mpap_step4 0001  
                    ?_disp7s_mux_Q 0001         ??_disp7s_modeDisp_writeInt 002C  
                 ??_disp7s_mux0_on 000B                   ??_disp7s_mux1_on 000B  
                 ??_disp7s_mux2_on 000B                   ??_disp7s_mux3_on 000B  
                 ??_disp7s_mux4_on 000B                   _keyRead_pin_key1 1B06  
                 _keyRead_pin_key2 1ACA                   _keyRead_pin_key3 1AC0  
                 _keyRead_pin_key4 1B16                   _keyRead_pin_key5 1B0E  
                 ??_disp7s_write_i 0025                           utoa@base 0015  
                      disp7s_job@q 003D          ??_disp7s_qtyDisp_writeInt 002C  
                     ?_disp7s_init 0001                    ___lwmod@divisor 000D  
                 _mpap_normal_mode 1866                           strlen@cp 000D  
                  ___lwmod@counter 000F                 __CFG_FOSC$HSPLL_HS 000000  
                   ??_disp7s_mux_Q 000B  
